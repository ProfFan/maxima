/* guess.usg 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *									 *
 * Copyright (C) 2002 Martin Rubey <Martin.Rubey at LaBRI.fr>               *
 *									 *
 * This file is part of GNU Maxima.					 *
 *									 *
 * This program is free software; you can redistribute it and/or	 *
 * modify it under the terms of the GNU General Public License as	 *
 * published by the Free Software Foundation; either version 2 of	 *
 * the License, or (at your option) any later version.			 *
 *									 *
 * This program is distributed in the hope that it will be		 *
 * useful, but WITHOUT ANY WARRANTY; without even the implied		 *
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR		 *
 * PURPOSE. See the GNU General Public License for more details.	 *
 *									 *
 * History:								 *
 * This is a translation of the Mathematica package Rate.m		 *
 * by Christian Krattenthaler <Kratt at pap.univie.ac.at>.			 *
 * The translation to Maple was done by Jean-Francois Beraud		 *
 * <Jean-Francois.Beraud at sic.sp2mi.univ-poitiers.fr> and Bruno Gauthier	 *
 * <Bruno.Gauthier at univ-mlv.fr>						 *
 *									 *
 * All features of this package are due to C. Krattenthaler      	 *
 * The help text is due to Jean-Francois Beraud and Bruno Gauthier	 *
 *									 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

A package to guess closed form for a sequence of numbers.

CALLING SEQUENCE:

guess(l, optional_args);

SYNOPSIS:
- This  package  provides  functions  to find a closed form for a 
sequence,
  of  numbers   within  the  hierarchy  of   expressions   of   the   
form,
  <rational function>, <product of rational function>, <product of 
product,
  of rational function>, etc.

EXAMPLES:
guess([1,2,3]);
                                [i0]

guess([1,4,9,16]);

                                   2
                                [i0 ]

guess([1,2,6,24,120]);

                           i0 - 1
                           /===\
                            ! !
                          [ ! !   (i1 + 1)]
                            ! !
                           i1 = 1

guess(makelist(product(product(GAMMA(i)*i^2,i,1,j),j,1,k),k,1,8));

                      i0 - 1   i1 - 1    i2 - 1
                      /===\    /===\     /===\          2
                       ! !      ! !       ! !   (i3 + 3)
                     [ ! !   4  ! !   18  ! !   ---------]
                       ! !      ! !       ! !    i3 + 2
                      i1 = 1   i2 = 1    i3 = 1

guess([1,2,7,42,429,7436,218348,10850216]);

                    i0 - 1   i1 - 1
                    /===\    /===\
                     ! !      ! !   3 (3 i2 + 2) (3 i2 + 4)
                   [ ! !   2  ! !   -----------------------]
                     ! !      ! !   4 (2 i2 + 1) (2 i2 + 3)
                    i1 = 1   i2 = 1



guess(makelist(k^3+k^2,k,1,7));


Dependent equations eliminated:  (6)
                       i0 - 1
                       /===\
         2              ! !                       5040
      [i0  (i0 + 1), 2  ! !   (- --------------------------------------),
                        ! !        4        3         2
                       i1 = 1    i1  - 24 i1  + 245 i1  - 1422 i1 + 360

                                                      i0 - 1
                                                      /===\
                                                       ! !   (i1 + 1) (i1 
+ 2)
                                                    2  ! !   
-----------------]
                                                       ! !            2
                                                      i1 = 1        i1

Note that the last example produces three solutions. The first and the 
last are
equivalent, but the second is different! In this case,

guess(makelist(k^3+k^2,k,1,7),1); 

or

guess(makelist(k^3+k^2,k,1,7),"one");
 
                          2
find only the solution i0  (i0 + 1), which is a rational function, and is 
also
the first function guess finds.

PARAMETERS:
  l               - a list of numbers,
  level           - an integer (optional),
  "one"           - the string "one" (optional),
  "nogamma"       - the string "nogamma" (optional),

SYNOPSIS:,
- guess(l) tries to find a closed form for a sequence within the 
hierarchy,
  of expressions  of  the  form  <rational function>, <product of 
rational,
  function>, <product of product of rational function>, etc.

- guess(l,level) does the same thing as guess(l) but it searches only
  within the first 'level' levels

- guess(l,"one") does the same thing as guess(l) but it returns the first
  solution it finds.

- guess(l,"nogamma") does the same thing as guess(l) but it returns
  expressions without GAMMA functions. In fact, there is not much 
difference
  just at the moment, because Maxima doesn't simplify products yet...  
*/
