# SOME DESCRIPTIVE TITLE.">
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
msgstr ""
 
# bitwise.texi
msgid ""
"The package @code{bitwise} provides functions that allow to manipulate\n"
"bits of integer constants. As always maxima attempts to simplify the result\n"
"of the operation if the actual value of a constant isn't known considering\n"
"attributes that might be known for the variables, see the @mref{declare}\n"
"mechanism.\n"
msgstr ""

# bitwise.texi
msgid ""
"@menu\n"
"* Functions and Variables for bitwise::\n"
"@end menu\n"
msgstr ""

# bitwise.texi
msgid ""
"@node Functions and Variables for bitwise, , Top, Top\n"
"@section Functions and Variables for bitwise\n"
msgstr ""

# bitwise.texi
msgid ""
"@anchor{bit_not}\n"
"@deffn {Function} bit_not (@var{int})\n"
msgstr ""

# bitwise.texi
msgid ""
"Inverts all bits of a signed integer. The result of this action reads\n"
"@code{-int - 1}.\n"
msgstr ""

# bitwise.texi
msgid ""
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_not(i);\n"
"@c bit_not(bit_not(i));\n"
"@c bit_not(3);\n"
"@c bit_not(100);\n"
"@c bit_not(-101);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_not(i);\n"
"(%o2)                      bit_not(i)\n"
"@end group\n"
"@group\n"
"(%i3) bit_not(bit_not(i));\n"
"(%o3)                           i\n"
"@end group\n"
"@group\n"
"(%i4) bit_not(3);\n"
"(%o4)                          - 4\n"
"@end group\n"
"@group\n"
"(%i5) bit_not(100);\n"
"(%o5)                         - 101\n"
"@end group\n"
"@group\n"
"(%i6) bit_not(-101);\n"
"(%o6)                          100\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"@opencatbox\n"
"@category{Number theory}\n"
"@category{Binary operations}\n"
"@category{Package bitwise}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# bitwise.texi
msgid ""
"@anchor{bit_and}\n"
"@deffn {Function} bit_and (@var{int1}, ...)\n"
msgstr ""

# bitwise.texi
msgid ""
"This function calculates a bitwise @code{and} of two or more signed integers.\n"
msgstr ""

# bitwise.texi
msgid ""
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_and(i,i);\n"
"@c bit_and(i,i,i);\n"
"@c bit_and(1,3);\n"
"@c bit_and(-7,7);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_and(i,i);\n"
"(%o2)                           i\n"
"@end group\n"
"@group\n"
"(%i3) bit_and(i,i,i);\n"
"(%o3)                           i\n"
"@end group\n"
"@group\n"
"(%i4) bit_and(1,3);\n"
"(%o4)                           1\n"
"@end group\n"
"@group\n"
"(%i5) bit_and(-7,7);\n"
"(%o5)                           1\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"If it is known if one of the parameters to @code{bit_and} is even this information\n"
"is taken into consideration by the function.\n"
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c declare(e,even,o,odd);\n"
"@c bit_and(1,e);\n"
"@c bit_and(1,o);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) declare(e,even,o,odd);\n"
"(%o2)                         done\n"
"@end group\n"
"@group\n"
"(%i3) bit_and(1,e);\n"
"(%o3)                           0\n"
"@end group\n"
"@group\n"
"(%i4) bit_and(1,o);\n"
"(%o4)                           1\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"@opencatbox\n"
"@category{Number theory}\n"
"@category{Binary operations}\n"
"@category{Package bitwise}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# bitwise.texi
msgid ""
"@anchor{bit_or}\n"
"@deffn {Function} bit_or (@var{int1}, ...)\n"
msgstr ""

# bitwise.texi
msgid ""
"This function calculates a bitwise @code{or} of two or more signed integers.\n"
msgstr ""

# bitwise.texi
msgid ""
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_or(i,i);\n"
"@c bit_or(i,i,i);\n"
"@c bit_or(1,3);\n"
"@c bit_or(-7,7);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_or(i,i);\n"
"(%o2)                           i\n"
"@end group\n"
"@group\n"
"(%i3) bit_or(i,i,i);\n"
"(%o3)                           i\n"
"@end group\n"
"@group\n"
"(%i4) bit_or(1,3);\n"
"(%o4)                           3\n"
"@end group\n"
"@group\n"
"(%i5) bit_or(-7,7);\n"
"(%o5)                          - 1\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"If it is known if one of the parameters to @code{bit_or} is even this information\n"
"is taken into consideration by the function.\n"
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c declare(e,even,o,odd);\n"
"@c bit_or(1,e);\n"
"@c bit_or(1,o);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) declare(e,even,o,odd);\n"
"(%o2)                         done\n"
"@end group\n"
"@group\n"
"(%i3) bit_or(1,e);\n"
"(%o3)                         e + 1\n"
"@end group\n"
"@group\n"
"(%i4) bit_or(1,o);\n"
"(%o4)                           o\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"@opencatbox\n"
"@category{Number theory}\n"
"@category{Binary operations}\n"
"@category{Package bitwise}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# bitwise.texi
msgid ""
"@anchor{bit_xor}\n"
"@deffn {Function} bit_xor (@var{int1}, ...)\n"
msgstr ""

# bitwise.texi
msgid ""
"This function calculates a bitwise @code{or} of two or more signed integers.\n"
msgstr ""

# bitwise.texi
msgid ""
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_xor(i,i);\n"
"@c bit_xor(i,i,i);\n"
"@c bit_xor(1,3);\n"
"@c bit_xor(-7,7);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_xor(i,i);\n"
"(%o2)                           0\n"
"@end group\n"
"@group\n"
"(%i3) bit_xor(i,i,i);\n"
"(%o3)                           i\n"
"@end group\n"
"@group\n"
"(%i4) bit_xor(1,3);\n"
"(%o4)                           2\n"
"@end group\n"
"@group\n"
"(%i5) bit_xor(-7,7);\n"
"(%o5)                          - 2\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"If it is known if one of the parameters to @code{bit_xor} is even this information\n"
"is taken into consideration by the function.\n"
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c declare(e,even,o,odd);\n"
"@c bit_xor(1,e);\n"
"@c bit_xor(1,o);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) declare(e,even,o,odd);\n"
"(%o2)                         done\n"
"@end group\n"
"@group\n"
"(%i3) bit_xor(1,e);\n"
"(%o3)                         e + 1\n"
"@end group\n"
"@group\n"
"(%i4) bit_xor(1,o);\n"
"(%o4)                         o - 1\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"@opencatbox\n"
"@category{Number theory}\n"
"@category{Binary operations}\n"
"@category{Package bitwise}\n"
"@closecatbox\n"
"@end deffn\n"
"@anchor{bit_lsh}\n"
"@deffn {Function} bit_lsh (@var{int}, @var{nBits})\n"
msgstr ""

# bitwise.texi
msgid ""
"This function shifts all bits of the signed integer @code{int} to the left by\n"
"@code{nBits} bits. The width of the integer is extended by @code{nBits} for\n"
"this process. The result of @code{bit_lsh} therefore is @code{int * 2}.\n"
msgstr ""

# bitwise.texi
msgid ""
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_lsh(0,1);\n"
"@c bit_lsh(1,0);\n"
"@c bit_lsh(1,1);\n"
"@c bit_lsh(1,i);\n"
"@c bit_lsh(-3,1);\n"
"@c bit_lsh(-2,1);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_lsh(0,1);\n"
"(%o2)                           0\n"
"@end group\n"
"@group\n"
"(%i3) bit_lsh(1,0);\n"
"(%o3)                           1\n"
"@end group\n"
"@group\n"
"(%i4) bit_lsh(1,1);\n"
"(%o4)                           2\n"
"@end group\n"
"@group\n"
"(%i5) bit_lsh(1,i);\n"
"(%o5)                     bit_lsh(1, i)\n"
"@end group\n"
"@group\n"
"(%i6) bit_lsh(-3,1);\n"
"(%o6)                          - 6\n"
"@end group\n"
"@group\n"
"(%i7) bit_lsh(-2,1);\n"
"(%o7)                          - 4\n"
"@end group\n"
"@end example\n"
"@opencatbox\n"
"@category{Number theory}\n"
"@category{Binary operations}\n"
"@category{Package bitwise}\n"
"@closecatbox\n"
"@end deffn\n"
"@anchor{bit_rsh}\n"
"@deffn {Function} bit_rsh (@var{int}, @var{nBits})\n"
msgstr ""

# bitwise.texi
msgid ""
"This function shifts all bits of the signed integer @code{int} to the right by\n"
"@code{nBits} bits. The width of the integer is reduced by @code{nBits} for\n"
"this process.\n"
msgstr ""

# bitwise.texi
msgid ""
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_rsh(0,1);\n"
"@c bit_rsh(2,0);\n"
"@c bit_rsh(2,1);\n"
"@c bit_rsh(2,2);\n"
"@c bit_rsh(-3,1);\n"
"@c bit_rsh(-2,1);\n"
"@c bit_rsh(-2,2);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_rsh(0,1);\n"
"(%o2)                           0\n"
"@end group\n"
"@group\n"
"(%i3) bit_rsh(2,0);\n"
"(%o3)                           2\n"
"@end group\n"
"@group\n"
"(%i4) bit_rsh(2,1);\n"
"(%o4)                           1\n"
"@end group\n"
"@group\n"
"(%i5) bit_rsh(2,2);\n"
"(%o5)                           0\n"
"@end group\n"
"@group\n"
"(%i6) bit_rsh(-3,1);\n"
"(%o6)                          - 2\n"
"@end group\n"
"@group\n"
"(%i7) bit_rsh(-2,1);\n"
"(%o7)                          - 1\n"
"@end group\n"
"@group\n"
"(%i8) bit_rsh(-2,2);\n"
"(%o8)                          - 1\n"
"@end group\n"
"@end example\n"
"@opencatbox\n"
"@category{Number theory}\n"
"@category{Binary operations}\n"
"@category{Package bitwise}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# bitwise.texi
msgid ""
"@anchor{bit_length}\n"
"@deffn {Function} bit_length (@var{int})\n"
msgstr ""

# bitwise.texi
msgid ""
"determines how many bits a variable needs to be long in order to store the\n"
"number @code{int}. This function only operates on positive numbers.\n"
msgstr ""

# bitwise.texi
msgid ""
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_length(0);\n"
"@c bit_length(1);\n"
"@c bit_length(7);\n"
"@c bit_length(8);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_length(0);\n"
"(%o2)                           0\n"
"@end group\n"
"@group\n"
"(%i3) bit_length(1);\n"
"(%o3)                           1\n"
"@end group\n"
"@group\n"
"(%i4) bit_length(7);\n"
"(%o4)                           3\n"
"@end group\n"
"@group\n"
"(%i5) bit_length(8);\n"
"(%o5)                           4\n"
"@end group\n"
"@end example\n"
"@opencatbox\n"
"@category{Number theory}\n"
"@category{Binary operations}\n"
"@category{Package bitwise}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# bitwise.texi
msgid ""
"@anchor{bit_onep}\n"
"@deffn {Function} bit_onep (@var{int}, @var{nBit})\n"
msgstr ""

# bitwise.texi
msgid ""
"determines if bits @code{nBit} is set in the signed integer @code{int}.\n"
msgstr ""

# bitwise.texi
msgid ""
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_onep(85,0);\n"
"@c bit_onep(85,1);\n"
"@c bit_onep(85,2);\n"
"@c bit_onep(85,3);\n"
"@c bit_onep(85,100);\n"
"@c bit_onep(i,100);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_onep(85,0);\n"
"(%o2)                         true\n"
"@end group\n"
"@group\n"
"(%i3) bit_onep(85,1);\n"
"(%o3)                         false\n"
"@end group\n"
"@group\n"
"(%i4) bit_onep(85,2);\n"
"(%o4)                         true\n"
"@end group\n"
"@group\n"
"(%i5) bit_onep(85,3);\n"
"(%o5)                         false\n"
"@end group\n"
"@group\n"
"(%i6) bit_onep(85,100);\n"
"(%o6)                         false\n"
"@end group\n"
"@group\n"
"(%i7) bit_onep(i,100);\n"
"(%o7)                   bit_onep(i, 100)\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"For signed numbers the sign bit is interpreted to be more than @code{nBit} to the\n"
"left of the leftmost bit of @code{int} that reads @code{1}.\n"
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c bit_onep(-2,0);\n"
"@c bit_onep(-2,1);\n"
"@c bit_onep(-2,2);\n"
"@c bit_onep(-2,3);\n"
"@c bit_onep(-2,4);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) bit_onep(-2,0);\n"
"(%o2)                         false\n"
"@end group\n"
"@group\n"
"(%i3) bit_onep(-2,1);\n"
"(%o3)                         true\n"
"@end group\n"
"@group\n"
"(%i4) bit_onep(-2,2);\n"
"(%o4)                         true\n"
"@end group\n"
"@group\n"
"(%i5) bit_onep(-2,3);\n"
"(%o5)                         true\n"
"@end group\n"
"@group\n"
"(%i6) bit_onep(-2,4);\n"
"(%o6)                         true\n"
"@end group\n"
"@end example\n"
"If it is known if the number to be tested is even this information\n"
"is taken into consideration by the function.\n"
"@c ===beg===\n"
"@c load(\"bitwise\")$\n"
"@c declare(e,even,o,odd);\n"
"@c bit_onep(e,0);\n"
"@c bit_onep(o,0);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"bitwise\")$\n"
"@group\n"
"(%i2) declare(e,even,o,odd);\n"
"(%o2)                         done\n"
"@end group\n"
"@group\n"
"(%i3) bit_onep(e,0);\n"
"(%o3)                         false\n"
"@end group\n"
"@group\n"
"(%i4) bit_onep(o,0);\n"
"(%o4)                         true\n"
"@end group\n"
"@end example\n"
msgstr ""

# bitwise.texi
msgid ""
"@opencatbox\n"
"@category{Number theory}\n"
"@category{Binary operations}\n"
"@category{Package bitwise}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""
