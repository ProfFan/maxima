# This file contains all translatable strings from a .texi file.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL>\n"
"Language-Team: LANGUAGE <LL.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: unit.texi:5
msgid ""
"@menu\n"
"* Introduction to Units::\n"
"* Functions and Variables for Units::\n"
"@end menu\n"
msgstr ""

#: unit.texi:8
msgid ""
"@node Introduction to Units, Functions and Variables for Units, unit-pkg, unit-pkg\n"
"@section Introduction to Units\n"
msgstr ""

#: unit.texi:22
msgid ""
"The @emph{unit} package enables the user to convert between arbitrary\n"
"units and work with dimensions in equations. The functioning of this package\n"
"is radically different from the original Maxima units package - whereas the\n"
"original was a basic list of definitions, this package uses rulesets to allow\n"
"the user to chose, on a per dimension basis, what unit final answers should be\n"
"rendered in.  It will separate units instead of intermixing them in the display,\n"
"allowing the user to readily identify the units associated with a particular\n"
"answer.  It will allow a user to simplify an expression to its fundamental Base\n"
"Units, as well as providing fine control over simplifying to derived units.\n"
"Dimensional analysis is possible, and a variety of tools are available to\n"
"manage conversion and simplification options. In addition to customizable\n"
"automatic conversion, @emph{units} also provides a traditional manual\n"
"conversion option.\n"
msgstr ""

#: unit.texi:32
msgid ""
"Note - when unit conversions are inexact Maxima will make approximations resulting\n"
"in fractions. This is a consequence of the techniques used to simplify units.\n"
"The messages warning of this type of substitution are disabled by default in\n"
"the case of units (normally they are on) since this situation occurs frequently\n"
"and the warnings clutter the output.  (The existing state of ratprint is restored\n"
"after unit conversions, so user changes to that setting will be preserved\n"
"otherwise.)  If  the user needs this information for units, they can set\n"
"@emph{unitverbose:on} to reactivate the printing of warnings from the unit\n"
"conversion process.\n"
msgstr ""

#: unit.texi:35
msgid ""
"@emph{unit} is included in Maxima in the share/contrib/unit directory. It obeys\n"
"normal Maxima package loading conventions:\n"
msgstr ""

#: unit.texi:46
msgid ""
"@example\n"
"@group\n"
"(%i1) load(\"unit\")$\n"
"*******************************************************************\n"
"*                       Units version 0.50                        *\n"
"*          Definitions based on the NIST Reference on             *\n"
"*              Constants, Units, and Uncertainty                  *\n"
"*       Conversion factors from various sources including         *\n"
"*                   NIST and the GNU units package                *\n"
"*******************************************************************\n"
msgstr ""

#: unit.texi:56
msgid ""
"Redefining necessary functions...\n"
"WARNING: DEFUN/DEFMACRO: redefining function TOPLEVEL-MACSYMA-EVAL ...\n"
"WARNING: DEFUN/DEFMACRO: redefining function MSETCHK ...\n"
"WARNING: DEFUN/DEFMACRO: redefining function KILL1 ...\n"
"WARNING: DEFUN/DEFMACRO: redefining function NFORMAT ...\n"
"Initializing unit arrays...\n"
"Done.\n"
"@end group\n"
"@end example\n"
msgstr ""

#: unit.texi:62
msgid ""
"The WARNING messages are expected and not a cause for concern - they indicate\n"
"the @emph{unit} package is redefining functions already defined in Maxima proper.\n"
"This is necessary in order to properly handle units.  The user\n"
"should be aware that if other changes have been made to these functions by other\n"
"packages those changes will be overwritten by this loading process.\n"
msgstr ""

#: unit.texi:65
msgid ""
"The @emph{unit.mac} file also loads a lisp file @emph{unit-functions.lisp} which\n"
"contains the lisp functions needed for the package.\n"
msgstr ""

#: unit.texi:69
msgid ""
"Clifford Yapp is the primary author.  He has received valuable assistance from\n"
"Barton Willis of the University of Nebraska at Kearney (UNK), Robert Dodier, and\n"
"other intrepid folk of the Maxima mailing list.\n"
msgstr ""

#: unit.texi:72
msgid ""
"There are probably lots of bugs.  Let me know.  @code{float} and @code{numer}\n"
"don't do what is expected.\n"
msgstr ""

#: unit.texi:76
msgid ""
"TODO : dimension functionality, handling of temperature,\n"
"showabbr and friends.  Show examples with addition of quantities containing\n"
"units.\n"
msgstr ""

#: unit.texi:80
msgid ""
"@opencatbox\n"
"@category{Physical units} @category{Share packages} @category{Package unit}\n"
"@closecatbox\n"
msgstr ""

#: unit.texi:84
msgid ""
"@node Functions and Variables for Units,  , Introduction to Units, unit-pkg\n"
"@section Functions and Variables for Units\n"
msgstr ""

#: unit.texi:118
msgid ""
"@anchor{setunits}\n"
"@deffn {Function} setunits (@var{list})\n"
"By default, the @emph{unit} package does not use any derived dimensions, but will\n"
"convert all units to the seven fundamental dimensions using MKS units.\n"
"@example\n"
"@group\n"
"(%i2) N;\n"
"                                     kg m\n"
"(%o2)                                ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i3) dyn;\n"
"                                   1      kg m\n"
"(%o3)                           (------) (----)\n"
"                                 100000     2\n"
"                                           s\n"
"@end group\n"
"@group\n"
"(%i4) g;\n"
"                                    1\n"
"(%o4)                             (----) (kg)\n"
"                                   1000\n"
"@end group\n"
"@group\n"
"(%i5) centigram*inch/minutes^2;\n"
"                                  127        kg m\n"
"(%o5)                       (-------------) (----)\n"
"                             1800000000000     2\n"
"                                              s\n"
"@end group\n"
"@end example\n"
msgstr ""

#: unit.texi:152
msgid ""
"In some cases this is the desired behavior.  If the user wishes to use other\n"
"units, this is achieved with the @code{setunits} command:\n"
"@example\n"
"@group\n"
"(%i6) setunits([centigram,inch,minute]);\n"
"(%o6)                                done\n"
"@end group\n"
"@group\n"
"(%i7) N;\n"
"                            1800000000000   %in cg\n"
"(%o7)                      (-------------) (------)\n"
"                                 127            2\n"
"                                            %min\n"
"@end group\n"
"@group\n"
"(%i8) dyn;\n"
"                               18000000   %in cg\n"
"(%o8)                         (--------) (------)\n"
"                                 127          2\n"
"                                          %min\n"
"@end group\n"
"@group\n"
"(%i9) g;\n"
"(%o9)                             (100) (cg)\n"
"@end group\n"
"@group\n"
"(%i10) centigram*inch/minutes^2;\n"
"                                    %in cg\n"
"(%o10)                              ------\n"
"                                        2\n"
"                                    %min\n"
"@end group\n"
"@end example\n"
msgstr ""

#: unit.texi:169
msgid ""
"The setting of units is quite flexible.  For example, if we want to\n"
"get back to kilograms, meters, and seconds as defaults for those\n"
"dimensions we can do:\n"
"@example\n"
"@group\n"
"(%i11) setunits([kg,m,s]);\n"
"(%o11)                               done\n"
"@end group\n"
"@group\n"
"(%i12) centigram*inch/minutes^2;\n"
"                                  127        kg m\n"
"(%o12)                      (-------------) (----)\n"
"                             1800000000000     2\n"
"                                              s\n"
"@end group\n"
"@end example\n"
msgstr ""

#: unit.texi:197
msgid ""
"Derived units are also handled by this command:\n"
"@example\n"
"@group\n"
"(%i17) setunits(N);\n"
"(%o17)                               done\n"
"@end group\n"
"@group\n"
"(%i18) N;\n"
"(%o18)                                 N\n"
"@end group\n"
"@group\n"
"(%i19) dyn;\n"
"                                    1\n"
"(%o19)                           (------) (N)\n"
"                                  100000\n"
"@end group\n"
"@group\n"
"(%i20) kg*m/s^2;\n"
"(%o20)                                 N\n"
"@end group\n"
"@group\n"
"(%i21) centigram*inch/minutes^2;\n"
"                                    127\n"
"(%o21)                        (-------------) (N)\n"
"                               1800000000000\n"
"@end group\n"
"@end example\n"
msgstr ""

#: unit.texi:218
msgid ""
"Notice that the @emph{unit} package recognized the non MKS combination\n"
"of mass, length, and inverse time squared as a force, and converted it\n"
"to Newtons.  This is how Maxima works in general.  If, for example, we\n"
"prefer dyne to Newtons, we simply do the following:\n"
"@example\n"
"@group\n"
"(%i22) setunits(dyn);\n"
"(%o22)                               done\n"
"@end group\n"
"@group\n"
"(%i23) kg*m/s^2;\n"
"(%o23)                          (100000) (dyn)\n"
"@end group\n"
"@group\n"
"(%i24) centigram*inch/minutes^2;\n"
"                                  127\n"
"(%o24)                         (--------) (dyn)\n"
"                                18000000\n"
"@end group\n"
"@end example\n"
msgstr ""

#: unit.texi:242
msgid ""
"To discontinue simplifying to any force, we use the uforget command:\n"
"@example\n"
"@group\n"
"(%i26) uforget(dyn);\n"
"(%o26)                               false\n"
"@end group\n"
"@group\n"
"(%i27) kg*m/s^2;\n"
"                                     kg m\n"
"(%o27)                               ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i28) centigram*inch/minutes^2;\n"
"                                  127        kg m\n"
"(%o28)                      (-------------) (----)\n"
"                             1800000000000     2\n"
"                                              s\n"
"@end group\n"
"@end example\n"
"This would have worked equally well with @code{uforget(N)} or\n"
"@code{uforget(%force)}.\n"
msgstr ""

#: unit.texi:244
msgid ""
"See also @mref{uforget}. To use this function write first @code{load(\"unit\")}.\n"
msgstr ""

#: unit.texi:248
msgid ""
"@opencatbox\n"
"@category{Package unit}\n"
"@closecatbox\n"
msgstr ""

#: unit.texi:250
msgid ""
"@end deffn\n"
msgstr ""

#: unit.texi:282
msgid ""
"@anchor{uforget}\n"
"@deffn {Function} uforget (@var{list})\n"
"By default, the @emph{unit} package converts all units to the\n"
"seven fundamental dimensions using MKS units. This behavior can\n"
"be changed with the @code{setunits} command. After that, the\n"
"user can restore the default behavior for a particular dimension\n"
"by means of the @code{uforget} command:\n"
"@example\n"
"@group\n"
"(%i13) setunits([centigram,inch,minute]);\n"
"(%o13)                               done\n"
"@end group\n"
"@group\n"
"(%i14) centigram*inch/minutes^2;\n"
"                                    %in cg\n"
"(%o14)                              ------\n"
"                                        2\n"
"                                    %min\n"
"@end group\n"
"@group\n"
"(%i15) uforget([cg,%in,%min]);\n"
"(%o15)                      [false, false, false]\n"
"@end group\n"
"@group\n"
"(%i16) centigram*inch/minutes^2;\n"
"                                  127        kg m\n"
"(%o16)                      (-------------) (----)\n"
"                             1800000000000     2\n"
"                                              s\n"
"@end group\n"
"@end example\n"
msgstr ""

#: unit.texi:286
msgid ""
"@code{uforget} operates on dimensions,\n"
"not units, so any unit of a particular dimension will work.  The\n"
"dimension itself is also a legal argument.\n"
msgstr ""

#: unit.texi:288
msgid ""
"See also @mref{setunits}. To use this function write first @code{load(\"unit\")}.\n"
msgstr ""

#: unit.texi:292
msgid ""
"@opencatbox\n"
"@category{Package unit}\n"
"@closecatbox\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: unit.texi:294
msgid ""
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: unit.texi:306
msgid ""
"@deffn {Function} convert (@var{expr}, @var{list})\n"
"When resetting the global environment is overkill, there is the @code{convert}\n"
"command, which allows one time conversions.  It can accept either a single\n"
"argument or a list of units to use in conversion.  When a convert operation is\n"
"done, the normal global evaluation system is bypassed, in order to avoid the\n"
"desired result being converted again.  As a consequence, for inexact calculations\n"
"\"rat\" warnings will be visible if the global environment controlling this behavior\n"
"(@code{ratprint}) is true.  This is also useful for spot-checking the\n"
"accuracy of a global conversion.  Another feature is @code{convert} will allow a\n"
"user to do Base Dimension conversions even if the global environment is set to\n"
"simplify to a Derived Dimension.\n"
msgstr ""

#: unit.texi:324
msgid ""
"@example\n"
"@group\n"
"(%i2) kg*m/s^2;\n"
"                                     kg m\n"
"(%o2)                                ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i3) convert(kg*m/s^2,[g,km,s]);\n"
"                                     g km\n"
"(%o3)                                ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i4) convert(kg*m/s^2,[g,inch,minute]);\n"
msgstr ""

#: unit.texi:349
msgid ""
"`rat' replaced 39.37007874015748 by 5000/127 = 39.37007874015748\n"
"                              18000000000   %in g\n"
"(%o4)                        (-----------) (-----)\n"
"                                  127           2\n"
"                                            %min\n"
"@end group\n"
"@group\n"
"(%i5) convert(kg*m/s^2,[N]);\n"
"(%o5)                                  N\n"
"@end group\n"
"@group\n"
"(%i6) convert(kg*m^2/s^2,[N]);\n"
"(%o6)                                 m N\n"
"@end group\n"
"@group\n"
"(%i7) setunits([N,J]);\n"
"(%o7)                                done\n"
"@end group\n"
"@group\n"
"(%i8) convert(kg*m^2/s^2,[N]);\n"
"(%o8)                                 m N\n"
"@end group\n"
"@group\n"
"(%i9) convert(kg*m^2/s^2,[N,inch]);\n"
msgstr ""

#: unit.texi:384
msgid ""
"`rat' replaced 39.37007874015748 by 5000/127 = 39.37007874015748\n"
"                                 5000\n"
"(%o9)                           (----) (%in N)\n"
"                                 127\n"
"@end group\n"
"@group\n"
"(%i10) convert(kg*m^2/s^2,[J]);\n"
"(%o10)                                 J\n"
"@end group\n"
"@group\n"
"(%i11) kg*m^2/s^2;\n"
"(%o11)                                 J\n"
"@end group\n"
"@group\n"
"(%i12) setunits([g,inch,s]);\n"
"(%o12)                               done\n"
"@end group\n"
"@group\n"
"(%i13) kg*m/s^2;\n"
"(%o13)                                 N\n"
"@end group\n"
"@group\n"
"(%i14) uforget(N);\n"
"(%o14)                               false\n"
"@end group\n"
"@group\n"
"(%i15) kg*m/s^2;\n"
"                                5000000   %in g\n"
"(%o15)                         (-------) (-----)\n"
"                                  127       2\n"
"                                           s\n"
"@end group\n"
"@group\n"
"(%i16) convert(kg*m/s^2,[g,inch,s]);\n"
msgstr ""

#: unit.texi:392
msgid ""
"`rat' replaced 39.37007874015748 by 5000/127 = 39.37007874015748\n"
"                                5000000   %in g\n"
"(%o16)                         (-------) (-----)\n"
"                                  127       2\n"
"                                           s\n"
"@end group\n"
"@end example\n"
msgstr ""

#: unit.texi:394
msgid ""
"See also @mref{setunits} and @mref{uforget}. To use this function write first @code{load(\"unit\")}.\n"
msgstr ""

#: unit.texi:398
msgid ""
"@opencatbox\n"
"@category{Package unit}\n"
"@closecatbox\n"
@c Occurrences of paragraphs with this contents up to now: 2
msgstr ""

#: unit.texi:400
msgid ""
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 2
msgstr ""

#: unit.texi:405
msgid ""
"@anchor{usersetunits}\n"
"@defvr {Optional variable} usersetunits\n"
"Default value: none\n"
msgstr ""

#: unit.texi:427
msgid ""
"If a user wishes to have a default unit behavior other than that described,\n"
"they can make use of @emph{maxima-init.mac} and the @emph{usersetunits}\n"
"variable.  The @emph{unit} package will check on startup to see if this variable\n"
"has been assigned a list.  If it has, it will use setunits on that list and take\n"
"the units from that list to be defaults.  @code{uforget} will revert to the behavior\n"
"defined by usersetunits over its own defaults.  For example, if we have a\n"
"@emph{maxima-init.mac} file containing:\n"
"@example\n"
"usersetunits : [N,J];\n"
"@end example\n"
"we would see the following behavior:\n"
"@example\n"
"@group\n"
"(%i1) load(\"unit\")$\n"
"*******************************************************************\n"
"*                       Units version 0.50                        *\n"
"*          Definitions based on the NIST Reference on             *\n"
"*              Constants, Units, and Uncertainty                  *\n"
"*       Conversion factors from various sources including         *\n"
"*                   NIST and the GNU units package                *\n"
"*******************************************************************\n"
msgstr ""

#: unit.texi:677
msgid ""
"Redefining necessary functions...\n"
"WARNING: DEFUN/DEFMACRO: redefining function\n"
" TOPLEVEL-MACSYMA-EVAL ...\n"
"WARNING: DEFUN/DEFMACRO: redefining function MSETCHK ...\n"
"WARNING: DEFUN/DEFMACRO: redefining function KILL1 ...\n"
"WARNING: DEFUN/DEFMACRO: redefining function NFORMAT ...\n"
"Initializing unit arrays...\n"
"Done.\n"
"User defaults found...\n"
"User defaults initialized.\n"
"@end group\n"
"@group\n"
"(%i2) kg*m/s^2;\n"
"(%o2)                                  N\n"
"@end group\n"
"@group\n"
"(%i3) kg*m^2/s^2;\n"
"(%o3)                                  J\n"
"@end group\n"
"@group\n"
"(%i4) kg*m^3/s^2;\n"
"(%o4)                                 J m\n"
"@end group\n"
"@group\n"
"(%i5) kg*m*km/s^2;\n"
"(%o5)                             (1000) (J)\n"
"@end group\n"
"@group\n"
"(%i6) setunits([dyn,eV]);\n"
"(%o6)                                done\n"
"@end group\n"
"@group\n"
"(%i7) kg*m/s^2;\n"
"(%o7)                           (100000) (dyn)\n"
"@end group\n"
"@group\n"
"(%i8) kg*m^2/s^2;\n"
"(%o8)                     (6241509596477042688) (eV)\n"
"@end group\n"
"@group\n"
"(%i9) kg*m^3/s^2;\n"
"(%o9)                    (6241509596477042688) (eV m)\n"
"@end group\n"
"@group\n"
"(%i10) kg*m*km/s^2;\n"
"(%o10)                   (6241509596477042688000) (eV)\n"
"@end group\n"
"@group\n"
"(%i11) uforget([dyn,eV]);\n"
"(%o11)                           [false, false]\n"
"@end group\n"
"@group\n"
"(%i12) kg*m/s^2;\n"
"(%o12)                                 N\n"
"@end group\n"
"@group\n"
"(%i13) kg*m^2/s^2;\n"
"(%o13)                                 J\n"
"@end group\n"
"@group\n"
"(%i14) kg*m^3/s^2;\n"
"(%o14)                                J m\n"
"@end group\n"
"@group\n"
"(%i15) kg*m*km/s^2;\n"
"(%o15)                            (1000) (J)\n"
"@end group\n"
"@end example\n"
"Without @code{usersetunits}, the initial inputs would have been converted\n"
"to MKS, and uforget would have resulted in a return to MKS rules.  Instead,\n"
"the user preferences are respected in both cases.  Notice these can still\n"
"be overridden if desired.  To completely eliminate this simplification - i.e.\n"
"to have the user defaults reset to factory defaults - the @code{dontusedimension}\n"
"command can be used.  @code{uforget} can restore user settings again, but\n"
"only if @code{usedimension} frees it for use.  Alternately,\n"
"@code{kill(usersetunits)} will completely remove all knowledge of the user defaults\n"
"from the session.  Here are some examples of how these various options work.\n"
"@example\n"
"@group\n"
"(%i2) kg*m/s^2;\n"
"(%o2)                                  N\n"
"@end group\n"
"@group\n"
"(%i3) kg*m^2/s^2;\n"
"(%o3)                                  J\n"
"@end group\n"
"@group\n"
"(%i4) setunits([dyn,eV]);\n"
"(%o4)                                done\n"
"@end group\n"
"@group\n"
"(%i5) kg*m/s^2;\n"
"(%o5)                           (100000) (dyn)\n"
"@end group\n"
"@group\n"
"(%i6) kg*m^2/s^2;\n"
"(%o6)                     (6241509596477042688) (eV)\n"
"@end group\n"
"@group\n"
"(%i7) uforget([dyn,eV]);\n"
"(%o7)                          [false, false]\n"
"@end group\n"
"@group\n"
"(%i8) kg*m/s^2;\n"
"(%o8)                                  N\n"
"@end group\n"
"@group\n"
"(%i9) kg*m^2/s^2;\n"
"(%o9)                                  J\n"
"@end group\n"
"@group\n"
"(%i10) dontusedimension(N);\n"
"(%o10)                             [%force]\n"
"@end group\n"
"@group\n"
"(%i11) dontusedimension(J);\n"
"(%o11)                         [%energy, %force]\n"
"@end group\n"
"@group\n"
"(%i12) kg*m/s^2;\n"
"                                     kg m\n"
"(%o12)                               ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i13) kg*m^2/s^2;\n"
"                                         2\n"
"                                     kg m\n"
"(%o13)                               -----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i14) setunits([dyn,eV]);\n"
"(%o14)                               done\n"
"@end group\n"
"@group\n"
"(%i15) kg*m/s^2;\n"
"                                     kg m\n"
"(%o15)                               ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i16) kg*m^2/s^2;\n"
"                                         2\n"
"                                     kg m\n"
"(%o16)                               -----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i17) uforget([dyn,eV]);\n"
"(%o17)                         [false, false]\n"
"@end group\n"
"@group\n"
"(%i18) kg*m/s^2;\n"
"                                     kg m\n"
"(%o18)                               ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i19) kg*m^2/s^2;\n"
"                                         2\n"
"                                     kg m\n"
"(%o19)                               -----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i20) usedimension(N);\n"
"Done.  To have Maxima simplify to this dimension, use\n"
"setunits([unit]) to select a unit.\n"
"(%o20)                               true\n"
"@end group\n"
"@group\n"
"(%i21) usedimension(J);\n"
"Done.  To have Maxima simplify to this dimension, use\n"
"setunits([unit]) to select a unit.\n"
"(%o21)                               true\n"
"@end group\n"
"@group\n"
"(%i22) kg*m/s^2;\n"
"                                     kg m\n"
"(%o22)                               ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i23) kg*m^2/s^2;\n"
"                                         2\n"
"                                     kg m\n"
"(%o23)                               -----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i24) setunits([dyn,eV]);\n"
"(%o24)                               done\n"
"@end group\n"
"@group\n"
"(%i25) kg*m/s^2;\n"
"(%o25)                          (100000) (dyn)\n"
"@end group\n"
"@group\n"
"(%i26) kg*m^2/s^2;\n"
"(%o26)                    (6241509596477042688) (eV)\n"
"@end group\n"
"@group\n"
"(%i27) uforget([dyn,eV]);\n"
"(%o27)                           [false, false]\n"
"@end group\n"
"@group\n"
"(%i28) kg*m/s^2;\n"
"(%o28)                                 N\n"
"@end group\n"
"@group\n"
"(%i29) kg*m^2/s^2;\n"
"(%o29)                                 J\n"
"@end group\n"
"@group\n"
"(%i30) kill(usersetunits);\n"
"(%o30)                               done\n"
"@end group\n"
"@group\n"
"(%i31) uforget([dyn,eV]);\n"
"(%o31)                          [false, false]\n"
"@end group\n"
"@group\n"
"(%i32) kg*m/s^2;\n"
"                                     kg m\n"
"(%o32)                               ----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@group\n"
"(%i33) kg*m^2/s^2;\n"
"                                         2\n"
"                                     kg m\n"
"(%o33)                               -----\n"
"                                       2\n"
"                                      s\n"
"@end group\n"
"@end example\n"
"Unfortunately this wide variety of options is a little confusing at first,\n"
"but once the user grows used to them they should find they have very full\n"
"control over their working environment.\n"
msgstr ""

#: unit.texi:683
msgid ""
"@c One other significant customization option available is the @code{setunitprefix}\n"
"@c command.  Normally, abbreviations used in this package are as close to those\n"
"@c used in standard texts as possible.  Some people, however, prefer to use those\n"
"@c symbols for normal work and have units labeled in some other fasion.\n"
"@c @code{setunitprefix} is provided for this case.  Here is an example of its use:\n"
msgstr ""

#: unit.texi:687
msgid ""
"@opencatbox\n"
"@category{Package unit}\n"
"@closecatbox\n"
@c Occurrences of paragraphs with this contents up to now: 3
msgstr ""

#: unit.texi:689
msgid ""
"@end defvr\n"
msgstr ""

#: unit.texi:712
msgid ""
"@deffn {Function} metricexpandall (@var{x})\n"
"Rebuilds global unit lists automatically creating all desired metric units.\n"
"@var{x} is a numerical argument which is used to specify how many metric\n"
"prefixes the user wishes defined.  The arguments are as follows, with each\n"
"higher number defining all lower numbers' units:\n"
"@example\n"
"@group\n"
"           0 - none. Only base units\n"
"           1 - kilo, centi, milli\n"
"(default)  2 - giga, mega, kilo, hecto, deka, deci, centi, milli,\n"
"               micro, nano\n"
"           3 - peta, tera, giga, mega, kilo, hecto, deka, deci,\n"
"               centi, milli, micro, nano, pico, femto\n"
"           4 - all\n"
"@end group\n"
"@end example\n"
"Normally, Maxima will not define the full expansion since this results in a\n"
"very large number of units, but @code{metricexpandall} can be used to\n"
"rebuild the list in a more or less complete fashion. The relevant variable\n"
"in the @emph{unit.mac} file is @var{%unitexpand}.\n"
"@c This should be made configurable as a maxima-init.mac controllable option.\n"
msgstr ""

#: unit.texi:716
msgid ""
"@opencatbox\n"
"@category{Package unit}\n"
"@closecatbox\n"
@c Occurrences of paragraphs with this contents up to now: 4
msgstr ""

#: unit.texi:718
msgid ""
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 3
msgstr ""

#: unit.texi:721
msgid ""
"@defvr {Variable} %unitexpand\n"
"Default value: @code{2}\n"
msgstr ""

#: unit.texi:724
msgid ""
"This is the value supplied to @code{metricexpandall} during the initial loading\n"
"of @emph{unit}.\n"
msgstr ""

#: unit.texi:728
msgid ""
"@opencatbox\n"
"@category{Package unit}\n"
"@closecatbox\n"
@c Occurrences of paragraphs with this contents up to now: 5
msgstr ""

#: unit.texi:730
msgid ""
"@end defvr\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: unit.texi:734
msgid ""
"@c @deffn {Function} functionname (@var{arg1}, @var{arg2}, ..., @var{argn})\n"
"@c @end deffn\n"
msgstr ""

#: unit.texi:738
msgid ""
"@c @defvr {Optional variable} variablename\n"
"@c Default value: @code{true}\n"
"@c @end defvr\n"
msgstr ""
