# This file contains all translatable strings from a .texi file.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL>, YEAR.
#
#, fuzzy
msgid ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL>\n"
"Language-Team: LANGUAGE <LL.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
msgstr ""

#: Differentiation.texi:4
msgid ""
"@menu\n"
"* Functions and Variables for Differentiation::  \n"
"@end menu\n"
msgstr ""

#: Differentiation.texi:9
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Functions and Variables for Differentiation,  , Differentiation, Differentiation\n"
"@section Functions and Variables for Differentiation\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

#: Differentiation.texi:13
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{antid}\n"
"@deffn {Function} antid (@var{expr}, @var{x}, @var{u(x)}) \n"
msgstr ""

#: Differentiation.texi:18
msgid ""
"@c TODO: The antid package is currently undocumented except of this function.\n"
"Returns a two-element list, such that an antiderivative of @var{expr} with\n"
"respect to @var{x} can be constructed from the list.  The expression @var{expr}\n"
"may contain an unknown function @var{u} and its derivatives.\n"
msgstr ""

#: Differentiation.texi:22
msgid ""
"Let @var{L}, a list of two elements, be the return value of @code{antid}.\n"
"Then @code{@var{L}[1] + 'integrate (@var{L}[2], @var{x})}\n"
"is an antiderivative of @var{expr} with respect to @var{x}.\n"
msgstr ""

#: Differentiation.texi:29
msgid ""
"When @code{antid} succeeds entirely,\n"
"the second element of the return value is zero.\n"
"Otherwise, the second element is nonzero,\n"
"and the first element is nonzero or zero.\n"
"If @code{antid} cannot make any progress,\n"
"the first element is zero and the second nonzero.\n"
msgstr ""

#: Differentiation.texi:32
msgid ""
"@code{load (\\"antid\\")} loads this function.  The @code{antid} package also\n"
"defines the functions @code{nonzeroandfreeof} and @code{linear}.\n"
msgstr ""

#: Differentiation.texi:38
msgid ""
"@code{antid} is related to @mref{antidiff} as follows.\n"
"Let @var{L}, a list of two elements, be the return value of @code{antid}.\n"
"Then the return value of @code{antidiff} is equal to\n"
"@code{@var{L}[1] + 'integrate (@var{L}[2], @var{x})} where @var{x} is the\n"
"variable of integration.\n"
msgstr ""

#: Differentiation.texi:40
msgid ""
"Examples:\n"
msgstr ""

#: Differentiation.texi:81
msgid ""
"@c FOLLOWING EXAMPLES GENERATED FROM THESE INPUTS\n"
"@c load (\\"antid\\")$\n"
"@c expr: exp (z(x)) * diff (z(x), x) * y(x);\n"
"@c a1: antid (expr, x, z(x));\n"
"@c a2: antidiff (expr, x, z(x));\n"
"@c a2 - (first (a1) + 'integrate (second (a1), x));\n"
"@c antid (expr, x, y(x));\n"
"@c antidiff (expr, x, y(x));\n"
"@c THERE IS A DEMO FILE share/integration/antid.dem, EXECUTED BY demo('antid)\n"
"@c BUT I THINK THE FOLLOWING ILLUSTRATES THE BASIC FUNCTIONALITY MORE CLEARLY\n"
"@c MAYBE MERGE IN THE DEMO PROBLEMS LATER\n"
"@example\n"
"(%i1) load (\\"antid\\")$\n"
"(%i2) expr: exp (z(x)) * diff (z(x), x) * y(x);\n"
"                            z(x)  d\n"
"(%o2)                y(x) %e     (-- (z(x)))\n"
"                                  dx\n"
"(%i3) a1: antid (expr, x, z(x));\n"
"                       z(x)      z(x)  d\n"
"(%o3)          [y(x) %e    , - %e     (-- (y(x)))]\n"
"                                       dx\n"
"(%i4) a2: antidiff (expr, x, z(x));\n"
"                            /\n"
"                     z(x)   [   z(x)  d\n"
"(%o4)         y(x) %e     - I %e     (-- (y(x))) dx\n"
"                            ]         dx\n"
"                            /\n"
"(%i5) a2 - (first (a1) + 'integrate (second (a1), x));\n"
"(%o5)                           0\n"
"(%i6) antid (expr, x, y(x));\n"
"                             z(x)  d\n"
"(%o6)             [0, y(x) %e     (-- (z(x)))]\n"
"                                   dx\n"
"(%i7) antidiff (expr, x, y(x));\n"
"                  /\n"
"                  [        z(x)  d\n"
"(%o7)             I y(x) %e     (-- (z(x))) dx\n"
"                  ]              dx\n"
"                  /\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:86
msgid ""
"@opencatbox\n"
"@category{Integral calculus}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:90
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{antidiff}\n"
"@deffn {Function} antidiff (@var{expr}, @var{x}, @var{u}(@var{x}))\n"
msgstr ""

#: Differentiation.texi:94
msgid ""
"Returns an antiderivative of @var{expr} with respect to @var{x}.\n"
"The expression @var{expr} may contain an unknown function @var{u} and its\n"
"derivatives.\n"
msgstr ""

#: Differentiation.texi:101
msgid ""
"When @code{antidiff} succeeds entirely, the resulting expression is free of\n"
"integral signs (that is, free of the @code{integrate} noun).\n"
"Otherwise, @code{antidiff} returns an expression\n"
"which is partly or entirely within an integral sign.\n"
"If @code{antidiff} cannot make any progress,\n"
"the return value is entirely within an integral sign.\n"
msgstr ""

#: Differentiation.texi:105
msgid ""
"@code{load (\\"antid\\")} loads this function.\n"
"The @code{antid} package also defines the functions @code{nonzeroandfreeof} and\n"
"@code{linear}.\n"
msgstr ""

#: Differentiation.texi:111
msgid ""
"@code{antidiff} is related to @code{antid} as follows.\n"
"Let @var{L}, a list of two elements, be the return value of @code{antid}.\n"
"Then the return value of @code{antidiff} is equal to\n"
"@code{@var{L}[1] + 'integrate (@var{L}[2], @var{x})} where @var{x} is the\n"
"variable of integration.\n"
msgstr ""

#: Differentiation.texi:113
msgid ""
"Examples:\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Differentiation.texi:154
msgid ""
"@c FOLLOWING EXAMPLES GENERATED FROM THESE INPUTS\n"
"@c load (\\"antid\\")$\n"
"@c expr: exp (z(x)) * diff (z(x), x) * y(x);\n"
"@c a1: antid (expr, x, z(x));\n"
"@c a2: antidiff (expr, x, z(x));\n"
"@c a2 - (first (a1) + 'integrate (second (a1), x));\n"
"@c antid (expr, x, y(x));\n"
"@c antidiff (expr, x, y(x));\n"
"@c THERE IS A DEMO FILE share/integration/antid.dem, EXECUTED BY demo('antid)\n"
"@c BUT I THINK THE FOLLOWING ILLUSTRATES THE BASIC FUNCTIONALITY MORE CLEARLY\n"
"@c MAYBE MERGE IN THE DEMO PROBLEMS LATER\n"
"@example\n"
"(%i1) load (\\"antid\\")$\n"
"(%i2) expr: exp (z(x)) * diff (z(x), x) * y(x);\n"
"                            z(x)  d\n"
"(%o2)                y(x) %e     (-- (z(x)))\n"
"                                  dx\n"
"(%i3) a1: antid (expr, x, z(x));\n"
"                       z(x)      z(x)  d\n"
"(%o3)          [y(x) %e    , - %e     (-- (y(x)))]\n"
"                                       dx\n"
"(%i4) a2: antidiff (expr, x, z(x));\n"
"                            /\n"
"                     z(x)   [   z(x)  d\n"
"(%o4)         y(x) %e     - I %e     (-- (y(x))) dx\n"
"                            ]         dx\n"
"                            /\n"
"(%i5) a2 - (first (a1) + 'integrate (second (a1), x));\n"
"(%o5)                           0\n"
"(%i6) antid (expr, x, y(x));\n"
"                             z(x)  d\n"
"(%o6)             [0, y(x) %e     (-- (z(x)))]\n"
"                                   dx\n"
"(%i7) antidiff (expr, x, y(x));\n"
"                  /\n"
"                  [        z(x)  d\n"
"(%o7)             I y(x) %e     (-- (z(x))) dx\n"
"                  ]              dx\n"
"                  /\n"
"@end example\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Differentiation.texi:159
msgid ""
"@opencatbox\n"
"@category{Integral calculus}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Differentiation.texi:165
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{at}\n"
"@deffn  {Function} at @\n"
"@fname{at} (@var{expr}, [@var{eqn_1}, @dots{}, @var{eqn_n}]) @\n"
"@fname{at} (@var{expr}, @var{eqn})\n"
msgstr ""

#: Differentiation.texi:169
msgid ""
"Evaluates the expression @var{expr} with the variables assuming the values as\n"
"specified for them in the list of equations @code{[@var{eqn_1}, ...,\n"
"@var{eqn_n}]} or the single equation @var{eqn}.\n"
msgstr ""

#: Differentiation.texi:174
msgid ""
"If a subexpression depends on any of the variables for which a value is\n"
"specified but there is no @code{atvalue} specified and it can't be otherwise\n"
"evaluated, then a noun form of the @code{at} is returned which displays in a\n"
"two-dimensional form.\n"
msgstr ""

#: Differentiation.texi:176
msgid ""
"@code{at} carries out multiple substitutions in parallel.\n"
msgstr ""

#: Differentiation.texi:179
msgid ""
"See also @mrefdot{atvalue}  For other functions which carry out substitutions,\n"
"see also @mref{subst} and @mrefdot{ev}\n"
msgstr ""

#: Differentiation.texi:181
msgid ""
"Examples:\n"
@c Occurrences of paragraphs with this contents up to now: 2
msgstr ""

#: Differentiation.texi:205
msgid ""
"@c ===beg===\n"
"@c atvalue (f(x,y), [x = 0, y = 1], a^2);\n"
"@c atvalue ('diff (f(x,y), x), x = 0, 1 + y);\n"
"@c printprops (all, atvalue);\n"
"@c diff (4*f(x, y)^2 - u(x, y)^2, x);\n"
"@c at (%, [x = 0, y = 1]);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) atvalue (f(x,y), [x = 0, y = 1], a^2);\n"
"                                2\n"
"(%o1)                          a\n"
"@end group\n"
"@group\n"
"(%i2) atvalue ('diff (f(x,y), x), x = 0, 1 + y);\n"
"(%o2)                        @@2 + 1\n"
"@end group\n"
"(%i3) printprops (all, atvalue);\n"
"                                !\n"
"                  d             !\n"
"                 --- (f(@@1, @@2))!       = @@2 + 1\n"
"                 d@@1            !\n"
"                                !@@1 = 0\n"
msgstr ""

#: Differentiation.texi:208
msgid ""
"                                     2\n"
"                          f(0, 1) = a\n"
msgstr ""

#: Differentiation.texi:225
msgid ""
"(%o3)                         done\n"
"@group\n"
"(%i4) diff (4*f(x, y)^2 - u(x, y)^2, x);\n"
"                  d                          d\n"
"(%o4)  8 f(x, y) (-- (f(x, y))) - 2 u(x, y) (-- (u(x, y)))\n"
"                  dx                         dx\n"
"@end group\n"
"@group\n"
"(%i5) at (%, [x = 0, y = 1]);\n"
"                                            !\n"
"                 2              d           !\n"
"(%o5)        16 a  - 2 u(0, 1) (-- (u(x, 1))!     )\n"
"                                dx          !\n"
"                                            !x = 0\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:228
msgid ""
"Note that in the last line @code{y} is treated differently to @code{x}\n"
"as @code{y} isn't used as a differentiation variable.\n"
msgstr ""

#: Differentiation.texi:231
msgid ""
"The difference between @mrefcomma{subst} @mref{at} and @mref{ev} can be\n"
"seen in the following example:\n"
msgstr ""

#: Differentiation.texi:266
msgid ""
"@c ===beg===\n"
"@c e1:I(t)=C*diff(U(t),t)$\n"
"@c e2:U(t)=L*diff(I(t),t)$\n"
"@c at(e1,e2);\n"
"@c subst(e2,e1);\n"
"@c ev(e1,e2,diff);\n"
"@c ===end===\n"
"@example\n"
"(%i1) e1:I(t)=C*diff(U(t),t)$\n"
"(%i2) e2:U(t)=L*diff(I(t),t)$\n"
"@group\n"
"(%i3) at(e1,e2);\n"
"                               !\n"
"                      d        !\n"
"(%o3)       I(t) = C (-- (U(t))!                    )\n"
"                      dt       !          d\n"
"                               !U(t) = L (-- (I(t)))\n"
"                                          dt\n"
"@end group\n"
"@group\n"
"(%i4) subst(e2,e1);\n"
"                            d      d\n"
"(%o4)             I(t) = C (-- (L (-- (I(t)))))\n"
"                            dt     dt\n"
"@end group\n"
"@group\n"
"(%i5) ev(e1,e2,diff);\n"
"                                  2\n"
"                                 d\n"
"(%o5)                I(t) = C L (--- (I(t)))\n"
"                                   2\n"
"                                 dt\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:272
msgid ""
"@opencatbox\n"
"@category{Evaluation} @category{Differential equations}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:276
msgid ""
"@c I SUSPECT THERE IS MORE TO BE SAID HERE\n"
"@c\n"
"@c Me, too: Where is desolve, for example?\n"
msgstr ""

#: Differentiation.texi:280
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{atomgrad}\n"
"@defvr {Property} atomgrad\n"
msgstr ""

#: Differentiation.texi:283
msgid ""
"@code{atomgrad} is the atomic gradient property of an expression.\n"
"This property is assigned by @code{gradef}.\n"
msgstr ""

#: Differentiation.texi:289
msgid ""
"@c NEED EXAMPLE HERE\n"
"@opencatbox\n"
"@category{Differential calculus}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

#: Differentiation.texi:295
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{atvalue}\n"
"@deffn  {Function} atvalue @\n"
"@fname{atvalue} (@var{expr}, [@var{x_1} = @var{a_1}, @dots{}, @var{x_m} = @var{a_m}], @var{c}) @\n"
"@fname{atvalue} (@var{expr}, @var{x_1} = @var{a_1}, @var{c})\n"
msgstr ""

#: Differentiation.texi:298
msgid ""
"Assigns the value @var{c} to @var{expr} at the point @code{@var{x} = @var{a}}.\n"
"Typically boundary values are established by this mechanism.\n"
msgstr ""

#: Differentiation.texi:306
msgid ""
"@var{expr} is a function evaluation, @code{@var{f}(@var{x_1}, ..., @var{x_m})},\n"
"or a derivative, @code{diff (@var{f}(@var{x_1}, ..., @var{x_m}), @var{x_1},\n"
"@var{n_1}, ..., @var{x_n}, @var{n_m})}\n"
"@c HMM, WHAT IS THIS NEXT PHRASE GETTING AT ??\n"
"@c DOES IT INTEND TO IMPLY THAT IMPLICIT DEPENDENCIES ARE IGNORED ??\n"
"in which the function arguments explicitly appear.\n"
"@var{n_i} is the order of differentiation with respect to @var{x_i}.\n"
msgstr ""

#: Differentiation.texi:311
msgid ""
"The point at which the atvalue is established is given by the list of equations\n"
"@code{[@var{x_1} = @var{a_1}, ..., @var{x_m} = @var{a_m}]}.\n"
"If there is a single variable @var{x_1},\n"
"the sole equation may be given without enclosing it in a list.\n"
msgstr ""

#: Differentiation.texi:317
msgid ""
"@code{printprops ([@var{f_1}, @var{f_2}, ...], atvalue)} displays the atvalues\n"
"of the functions @code{@var{f_1}, @var{f_2}, ...} as specified by calls to\n"
"@code{atvalue}.  @code{printprops (@var{f}, atvalue)} displays the atvalues of\n"
"one function @var{f}.  @code{printprops (all, atvalue)} displays the atvalues\n"
"of all functions for which atvalues are defined.\n"
msgstr ""

#: Differentiation.texi:320
msgid ""
"The symbols @code{@@1}, @code{@@2}, @dots{} represent the\n"
"variables @var{x_1}, @var{x_2}, @dots{} when atvalues are displayed.\n"
msgstr ""

#: Differentiation.texi:323
msgid ""
"@code{atvalue} evaluates its arguments.\n"
"@code{atvalue} returns @var{c}, the atvalue.\n"
msgstr ""

#: Differentiation.texi:325
msgid ""
"See also @mrefdot{at}\n"
msgstr ""

#: Differentiation.texi:327
msgid ""
"Examples:\n"
@c Occurrences of paragraphs with this contents up to now: 3
msgstr ""

#: Differentiation.texi:351
msgid ""
"@c ===beg===\n"
"@c atvalue (f(x,y), [x = 0, y = 1], a^2);\n"
"@c atvalue ('diff (f(x,y), x), x = 0, 1 + y);\n"
"@c printprops (all, atvalue);\n"
"@c diff (4*f(x,y)^2 - u(x,y)^2, x);\n"
"@c at (%, [x = 0, y = 1]);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) atvalue (f(x,y), [x = 0, y = 1], a^2);\n"
"                                2\n"
"(%o1)                          a\n"
"@end group\n"
"@group\n"
"(%i2) atvalue ('diff (f(x,y), x), x = 0, 1 + y);\n"
"(%o2)                        @@2 + 1\n"
"@end group\n"
"(%i3) printprops (all, atvalue);\n"
"                                !\n"
"                  d             !\n"
"                 --- (f(@@1, @@2))!       = @@2 + 1\n"
"                 d@@1            !\n"
"                                !@@1 = 0\n"
msgstr ""

#: Differentiation.texi:354
msgid ""
"                                     2\n"
"                          f(0, 1) = a\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Differentiation.texi:371
msgid ""
"(%o3)                         done\n"
"@group\n"
"(%i4) diff (4*f(x,y)^2 - u(x,y)^2, x);\n"
"                  d                          d\n"
"(%o4)  8 f(x, y) (-- (f(x, y))) - 2 u(x, y) (-- (u(x, y)))\n"
"                  dx                         dx\n"
"@end group\n"
"@group\n"
"(%i5) at (%, [x = 0, y = 1]);\n"
"                                            !\n"
"                 2              d           !\n"
"(%o5)        16 a  - 2 u(0, 1) (-- (u(x, 1))!     )\n"
"                                dx          !\n"
"                                            !x = 0\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:376
msgid ""
"@opencatbox\n"
"@category{Differential equations} @category{Declarations and inferences}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:380
msgid ""
"@c LOOKS LIKE cartan IS THE NAME OF A PACKAGE AND NOT A FUNCTION OR VARIABLE\n"
"@c PROBABLY SHOULD SPLIT OUT cartan AND ITS CONTENTS INTO ITS OWN TEXINFO FILE\n"
"@c ext_diff AND lie_diff NOT DOCUMENTED (OTHER THAN HERE)\n"
msgstr ""

#: Differentiation.texi:384
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{cartan}\n"
"@deffn {Function} cartan\n"
msgstr ""

#: Differentiation.texi:394
msgid ""
"The exterior calculus of differential forms is a basic tool\n"
"of differential geometry developed by Elie Cartan and has important\n"
"applications in the theory of partial differential equations.\n"
"The @code{cartan} package\n"
"implements the functions @code{ext_diff} and @code{lie_diff},\n"
"along with the operators @code{~} (wedge product) and @code{|} (contraction\n"
"of a form with a vector.)\n"
"Type @code{demo (tensor)} to see a brief\n"
"description of these commands along with examples.\n"
msgstr ""

#: Differentiation.texi:396
msgid ""
"@code{cartan} was implemented by F.B. Estabrook and H.D. Wahlquist.\n"
msgstr ""

#: Differentiation.texi:401
msgid ""
"@opencatbox\n"
"@category{Differential geometry}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:405
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{del}\n"
"@deffn {Function} del (@var{x})\n"
msgstr ""

#: Differentiation.texi:407
msgid ""
"@code{del (@var{x})} represents the differential of the variable @math{x}.\n"
msgstr ""

#: Differentiation.texi:411
msgid ""
"@code{diff} returns an expression containing @code{del}\n"
"if an independent variable is not specified.\n"
"In this case, the return value is the so-called \\"total differential\\".\n"
msgstr ""

#: Differentiation.texi:413
msgid ""
"Examples:\n"
@c Occurrences of paragraphs with this contents up to now: 4
msgstr ""

#: Differentiation.texi:429
msgid ""
"@c GENERATED FROM THE FOLLOWING\n"
"@c diff (log (x));\n"
"@c diff (exp (x*y));\n"
"@c diff (x*y*z);\n"
"@example\n"
"(%i1) diff (log (x));\n"
"                             del(x)\n"
"(%o1)                        ------\n"
"                               x\n"
"(%i2) diff (exp (x*y));\n"
"                     x y              x y\n"
"(%o2)            x %e    del(y) + y %e    del(x)\n"
"(%i3) diff (x*y*z);\n"
"(%o3)         x y del(z) + x z del(y) + y z del(x)\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:434
msgid ""
"@opencatbox\n"
"@category{Differential calculus}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:438
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{delta}\n"
"@deffn {Function} delta (@var{t})\n"
msgstr ""

#: Differentiation.texi:440
msgid ""
"The Dirac Delta function.\n"
msgstr ""

#: Differentiation.texi:442
msgid ""
"Currently only @code{laplace} knows about the @code{delta} function.\n"
msgstr ""

#: Differentiation.texi:444
msgid ""
"Example:\n"
msgstr ""

#: Differentiation.texi:448
msgid ""
"@example\n"
"(%i1) laplace (delta (t - a) * sin(b*t), t, s);\n"
"Is  a  positive, negative, or zero?\n"
msgstr ""

#: Differentiation.texi:453
msgid ""
"p;\n"
"                                   - a s\n"
"(%o1)                   sin(a b) %e\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:458
msgid ""
"@opencatbox\n"
"@category{Mathematical functions} @category{Laplace transform}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:463
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{dependencies}\n"
"@defvr {System variable} dependencies\n"
"@defvrx {Function} dependencies (@var{f_1}, @dots{}, @var{f_n})\n"
msgstr ""

#: Differentiation.texi:469
msgid ""
"The variable @code{dependencies} is the list of atoms which have functional\n"
"dependencies, assigned by @mref{depends}, the function @code{dependencies}, or @code{gradef}.\n"
"The @code{dependencies} list is cumulative:\n"
"each call to @code{depends}, @code{dependencies}, or @code{gradef} appends additional items.\n"
"The default value of @code{dependencies} is @code{[]}.\n"
msgstr ""

#: Differentiation.texi:474
msgid ""
"The function @code{dependencies(@var{f_1}, @dots{}, @var{f_n})} appends @var{f_1}, @dots{}, @var{f_n},\n"
"to the @code{dependencies} list,\n"
"where @var{f_1}, @dots{}, @var{f_n} are expressions of the form @code{@var{f}(@var{x_1}, @dots{}, @var{x_m})},\n"
"and @var{x_1}, @dots{}, @var{x_m} are any number of arguments.\n"
msgstr ""

#: Differentiation.texi:476
msgid ""
"@code{dependencies(@var{f}(@var{x_1}, @dots{}, @var{x_m}))} is equivalent to @code{depends(@var{f}, [@var{x_1}, @dots{}, @var{x_m}])}.\n"
msgstr ""

#: Differentiation.texi:478
msgid ""
"See also @mref{depends} and @mrefdot{gradef}\n"
msgstr ""

#: Differentiation.texi:524
msgid ""
"@c ===beg===\n"
"@c dependencies;\n"
"@c depends (foo, [bar, baz]);\n"
"@c depends ([g, h], [a, b, c]);\n"
"@c dependencies;\n"
"@c dependencies (quux (x, y), mumble (u));\n"
"@c dependencies;\n"
"@c remove (quux, dependency);\n"
"@c dependencies;\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) dependencies;\n"
"(%o1)                          []\n"
"@end group\n"
"@group\n"
"(%i2) depends (foo, [bar, baz]);\n"
"(%o2)                    [foo(bar, baz)]\n"
"@end group\n"
"@group\n"
"(%i3) depends ([g, h], [a, b, c]);\n"
"(%o3)               [g(a, b, c), h(a, b, c)]\n"
"@end group\n"
"@group\n"
"(%i4) dependencies;\n"
"(%o4)        [foo(bar, baz), g(a, b, c), h(a, b, c)]\n"
"@end group\n"
"@group\n"
"(%i5) dependencies (quux (x, y), mumble (u));\n"
"(%o5)                [quux(x, y), mumble(u)]\n"
"@end group\n"
"@group\n"
"(%i6) dependencies;\n"
"(%o6) [foo(bar, baz), g(a, b, c), h(a, b, c), quux(x, y), \n"
"                                                       mumble(u)]\n"
"@end group\n"
"@group\n"
"(%i7) remove (quux, dependency);\n"
"(%o7)                         done\n"
"@end group\n"
"@group\n"
"(%i8) dependencies;\n"
"(%o8)  [foo(bar, baz), g(a, b, c), h(a, b, c), mumble(u)]\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:529
msgid ""
"@opencatbox\n"
"@category{Declarations and inferences} @category{Global variables}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

#: Differentiation.texi:533
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{depends}\n"
"@deffn {Function} depends (@var{f_1}, @var{x_1}, @dots{}, @var{f_n}, @var{x_n})\n"
msgstr ""

#: Differentiation.texi:538
msgid ""
"Declares functional dependencies among variables for the purpose of computing\n"
"derivatives.  In the absence of declared dependence, @code{diff (f, x)} yields\n"
"zero.  If @code{depends (f, x)} is declared, @code{diff (f, x)} yields a\n"
"symbolic derivative (that is, a @code{diff} noun).\n"
msgstr ""

#: Differentiation.texi:546
msgid ""
"Each argument @var{f_1}, @var{x_1}, etc., can be the name of a variable or\n"
"array, or a list of names.\n"
"Every element of @var{f_i} (perhaps just a single element)\n"
"is declared to depend\n"
"on every element of @var{x_i} (perhaps just a single element).\n"
"If some @var{f_i} is the name of an array or contains the name of an array,\n"
"all elements of the array depend on @var{x_i}.\n"
msgstr ""

#: Differentiation.texi:549
msgid ""
"@code{diff} recognizes indirect dependencies established by @code{depends}\n"
"and applies the chain rule in these cases.\n"
msgstr ""

#: Differentiation.texi:552
msgid ""
"@code{remove (@var{f}, dependency)} removes all dependencies declared for\n"
"@var{f}.\n"
msgstr ""

#: Differentiation.texi:556
msgid ""
"@code{depends} returns a list of the dependencies established.\n"
"The dependencies are appended to the global variable @code{dependencies}.\n"
"@code{depends} evaluates its arguments.\n"
msgstr ""

#: Differentiation.texi:562
msgid ""
"@code{diff} is the only Maxima command which recognizes dependencies established\n"
"by @code{depends}.  Other functions (@code{integrate}, @code{laplace}, etc.)\n"
"only recognize dependencies explicitly represented by their arguments.\n"
"For example, @code{integrate} does not recognize the dependence of @code{f} on\n"
"@code{x} unless explicitly represented as @code{integrate (f(x), x)}.\n"
msgstr ""

#: Differentiation.texi:564
msgid ""
"@code{depends(@var{f}, [@var{x_1}, @dots{}, @var{x_n}])} is equivalent to @code{dependencies(@var{f}(@var{x_1}, @dots{}, @var{x_n}))}.\n"
msgstr ""

#: Differentiation.texi:585
msgid ""
"@c GENERATED BY THE FOLLOWING\n"
"@c depends ([f, g], x);\n"
"@c depends ([r, s], [u, v, w]);\n"
"@c depends (u, t);\n"
"@c dependencies;\n"
"@c diff (r.s, u);\n"
"@example\n"
"(%i1) depends ([f, g], x);\n"
"(%o1)                     [f(x), g(x)]\n"
"(%i2) depends ([r, s], [u, v, w]);\n"
"(%o2)               [r(u, v, w), s(u, v, w)]\n"
"(%i3) depends (u, t);\n"
"(%o3)                        [u(t)]\n"
"(%i4) dependencies;\n"
"(%o4)      [f(x), g(x), r(u, v, w), s(u, v, w), u(t)]\n"
"(%i5) diff (r.s, u);\n"
"                         dr           ds\n"
"(%o5)                    -- . s + r . --\n"
"                         du           du\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:594
msgid ""
"@c GENERATED BY THE FOLLOWING\n"
"@c diff (r.s, t);\n"
"@example\n"
"(%i6) diff (r.s, t);\n"
"                      dr du           ds du\n"
"(%o6)                 -- -- . s + r . -- --\n"
"                      du dt           du dt\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:606
msgid ""
"@c GENERATED BY THE FOLLOWING\n"
"@c remove (r, dependency);\n"
"@c diff (r.s, t);\n"
"@example\n"
"(%i7) remove (r, dependency);\n"
"(%o7)                         done\n"
"(%i8) diff (r.s, t);\n"
"                                ds du\n"
"(%o8)                       r . -- --\n"
"                                du dt\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:611
msgid ""
"@opencatbox\n"
"@category{Differential calculus} @category{Declarations and inferences}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:616
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{derivabrev}\n"
"@defvr {Option variable} derivabbrev\n"
"Default value: @code{false}\n"
msgstr ""

#: Differentiation.texi:620
msgid ""
"When @code{derivabbrev} is @code{true},\n"
"symbolic derivatives (that is, @code{diff} nouns) are displayed as subscripts.\n"
"Otherwise, derivatives are displayed in the Leibniz notation @code{dy/dx}.\n"
msgstr ""

#: Differentiation.texi:626
msgid ""
"@c NEED EXAMPLES HERE\n"
"@opencatbox\n"
"@category{Differential calculus} @category{Global flags}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

#: Differentiation.texi:628
msgid ""
"@c SEEMS LIKE THIS STATEMENT COULD BE LESS CLUMSY\n"
msgstr ""

#: Differentiation.texi:632
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{derivdegree}\n"
"@deffn {Function} derivdegree (@var{expr}, @var{y}, @var{x})\n"
msgstr ""

#: Differentiation.texi:636
msgid ""
"Returns the highest degree of the derivative\n"
"of the dependent variable @var{y} with respect to the independent variable\n"
"@var{x} occurring in @var{expr}.\n"
msgstr ""

#: Differentiation.texi:638
msgid ""
"Example:\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Differentiation.texi:652
msgid ""
"@c GENERATED FROM THE FOLLOWING\n"
"@c 'diff (y, x, 2) + 'diff (y, z, 3) + 'diff (y, x) * x^2;\n"
"@c derivdegree (%, y, x);\n"
"@example\n"
"(%i1) 'diff (y, x, 2) + 'diff (y, z, 3) + 'diff (y, x) * x^2;\n"
"                         3     2\n"
"                        d y   d y    2 dy\n"
"(%o1)                   --- + --- + x  --\n"
"                          3     2      dx\n"
"                        dz    dx\n"
"(%i2) derivdegree (%, y, x);\n"
"(%o2)                           2\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:657
msgid ""
"@opencatbox\n"
"@category{Differential calculus} @category{Expressions}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:659
msgid ""
"@c I HAVE NO IDEA WHAT THIS DOES\n"
msgstr ""

#: Differentiation.texi:663
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{derivlist}\n"
"@deffn {Function} derivlist (@var{var_1}, @dots{}, @var{var_k})\n"
msgstr ""

#: Differentiation.texi:666
msgid ""
"Causes only differentiations with respect to\n"
"the indicated variables, within the @code{ev} command.\n"
msgstr ""

#: Differentiation.texi:671
msgid ""
"@opencatbox\n"
"@category{Differential calculus} @category{Evaluation}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:676
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{derivsubst}\n"
"@defvr {Option variable} derivsubst\n"
"Default value: @code{false}\n"
msgstr ""

#: Differentiation.texi:679
msgid ""
"When @code{derivsubst} is @code{true}, a non-syntactic substitution such as\n"
"@code{subst (x, 'diff (y, t), 'diff (y, t, 2))} yields @code{'diff (x, t)}.\n"
msgstr ""

#: Differentiation.texi:684
msgid ""
"@opencatbox\n"
"@category{Differential calculus} @category{Expressions}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

#: Differentiation.texi:692
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{diff}\n"
"@deffn  {Function} diff @\n"
"@fname{diff} (@var{expr}, @var{x_1}, @var{n_1}, @dots{}, @var{x_m}, @var{n_m}) @\n"
"@fname{diff} (@var{expr}, @var{x}, @var{n}) @\n"
"@fname{diff} (@var{expr}, @var{x}) @\n"
"@fname{diff} (@var{expr})\n"
msgstr ""

#: Differentiation.texi:695
msgid ""
"Returns the derivative or differential of @var{expr} with respect to some or\n"
"all variables in @var{expr}.\n"
msgstr ""

#: Differentiation.texi:698
msgid ""
"@code{diff (@var{expr}, @var{x}, @var{n})} returns the @var{n}'th derivative of\n"
"@var{expr} with respect to @var{x}.\n"
msgstr ""

#: Differentiation.texi:703
msgid ""
"@code{diff (@var{expr}, @var{x_1}, @var{n_1}, ..., @var{x_m}, @var{n_m})}\n"
"returns the mixed partial derivative of @var{expr} with respect to @var{x_1}, \n"
"@dots{}, @var{x_m}.  It is equivalent to @code{diff (... (diff (@var{expr},\n"
"@var{x_m}, @var{n_m}) ...), @var{x_1}, @var{n_1})}.\n"
msgstr ""

#: Differentiation.texi:707
msgid ""
"@code{diff (@var{expr}, @var{x})}\n"
"returns the first derivative of @var{expr} with respect to\n"
"the variable @var{x}.\n"
msgstr ""

#: Differentiation.texi:713
msgid ""
"@code{diff (@var{expr})} returns the total differential of @var{expr}, that is,\n"
"the sum of the derivatives of @var{expr} with respect to each its variables\n"
"times the differential @code{del} of each variable.\n"
"@c WHAT DOES THIS NEXT STATEMENT MEAN, EXACTLY ??\n"
"No further simplification of @code{del} is offered.\n"
msgstr ""

#: Differentiation.texi:718
msgid ""
"The noun form of @code{diff} is required in some contexts,\n"
"such as stating a differential equation.\n"
"In these cases, @code{diff} may be quoted (as @code{'diff}) to yield the noun\n"
"form instead of carrying out the differentiation.\n"
msgstr ""

#: Differentiation.texi:721
msgid ""
"When @code{derivabbrev} is @code{true}, derivatives are displayed as subscripts.\n"
"Otherwise, derivatives are displayed in the Leibniz notation, @code{dy/dx}.\n"
msgstr ""

#: Differentiation.texi:723
msgid ""
"Examples:\n"
@c Occurrences of paragraphs with this contents up to now: 5
msgstr ""

#: Differentiation.texi:754
msgid ""
"@c GENERATED FROM THE FOLLOWING\n"
"@c diff (exp (f(x)), x, 2);\n"
"@c derivabbrev: true$\n"
"@c 'integrate (f(x, y), y, g(x), h(x));\n"
"@c diff (%, x);\n"
"@example\n"
"(%i1) diff (exp (f(x)), x, 2);\n"
"                     2\n"
"              f(x)  d               f(x)  d         2\n"
"(%o1)       %e     (--- (f(x))) + %e     (-- (f(x)))\n"
"                      2                   dx\n"
"                    dx\n"
"(%i2) derivabbrev: true$\n"
"(%i3) 'integrate (f(x, y), y, g(x), h(x));\n"
"                         h(x)\n"
"                        /\n"
"                        [\n"
"(%o3)                   I     f(x, y) dy\n"
"                        ]\n"
"                        /\n"
"                         g(x)\n"
"(%i4) diff (%, x);\n"
"       h(x)\n"
"      /\n"
"      [\n"
"(%o4) I     f(x, y)  dy + f(x, h(x)) h(x)  - f(x, g(x)) g(x)\n"
"      ]            x                     x                  x\n"
"      /\n"
"       g(x)\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:757
msgid ""
"For the tensor package, the following modifications have been\n"
"incorporated:\n"
msgstr ""

#: Differentiation.texi:761
msgid ""
"(1) The derivatives of any indexed objects in @var{expr} will have the\n"
"variables @var{x_i} appended as additional arguments.  Then all the\n"
"derivative indices will be sorted.\n"
msgstr ""

#: Differentiation.texi:772
msgid ""
"(2) The @var{x_i} may be integers from 1 up to the value of the variable\n"
"@code{dimension} [default value: 4].  This will cause the differentiation to be\n"
"carried out with respect to the @var{x_i}'th member of the list\n"
"@code{coordinates} which should be set to a list of the names of the\n"
"coordinates, e.g., @code{[x, y, z, t]}. If @code{coordinates} is bound to an\n"
"atomic variable, then that variable subscripted by @var{x_i} will be used for\n"
"the variable of differentiation.  This permits an array of coordinate names or\n"
"subscripted names like @code{X[1]}, @code{X[2]}, @dots{} to be used.  If\n"
"@code{coordinates} has not been assigned a value, then the variables will be\n"
"treated as in (1) above.\n"
msgstr ""

#: Differentiation.texi:778
msgid ""
"@c NEED EXAMPLES FOR TENSOR STUFF\n"
"@opencatbox\n"
"@category{Differential calculus}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:780
msgid ""
"@c MERGE THIS INTO @defun diff\n"
msgstr ""

#: Differentiation.texi:784
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{symbol_diff}\n"
"@defvr {Special symbol} diff\n"
msgstr ""

#: Differentiation.texi:787
msgid ""
"When @code{diff} is present as an @code{evflag} in call to @code{ev},\n"
"all differentiations indicated in @code{expr} are carried out.\n"
msgstr ""

#: Differentiation.texi:790
msgid ""
"@c NEED EXAMPLE HERE\n"
"@end defvr\n"
msgstr ""

#: Differentiation.texi:792
msgid ""
"@c NOT SURE HOW THIS IS SUPPOSED TO WORK\n"
msgstr ""

#: Differentiation.texi:796
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{dscalar}\n"
"@deffn {Function} dscalar (@var{f})\n"
msgstr ""

#: Differentiation.texi:798
msgid ""
"Applies the scalar d'Alembertian to the scalar function @var{f}.\n"
msgstr ""

#: Differentiation.texi:802
msgid ""
"@c APPARENTLY dscalar DOESN'T EXIST IN THE CORE FILES ANYMORE\n"
"@c ctensor HAS THE ONLY DEFN I FOUND (OUTSIDE OF archive/)\n"
"@code{load (\\"ctensor\\")} loads this function.\n"
msgstr ""

#: Differentiation.texi:807
msgid ""
"@c FOLLOWING EXAMPLE DOESN'T WORK; I GET dscalar (field) ==> 0\n"
"@c (I GET 0 FOR THE ctensor VERSION OF dscalar, AND SAME FOR\n"
"@c THE DEFN OF dscalar GIVEN IN archive/share/lisp/ctensr.trl)\n"
"@c INCIDENTALLY dependencies IS DOCUMENTED ONLY AS A VARIABLE\n"
msgstr ""

#: Differentiation.texi:820
msgid ""
"@c @example\n"
"@c (%i41) dependencies(field(r));\n"
"@c (%o41)                           [field(r)]\n"
"@c (%i42) dscalar(field);\n"
"@c (%o43)\n"
"@c     -m\n"
"@c   %e  ((field  n - field  m + 2 field   ) r + 4 field )\n"
"@c              r  r       r  r         r r             r\n"
"@c \n"
"@c - -----------------------------------------------------\n"
"@c                              2 r\n"
"@c @end example\n"
msgstr ""

#: Differentiation.texi:825
msgid ""
"@opencatbox\n"
"@category{Differential calculus} @category{Package ctensor}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:829
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{express}\n"
"@deffn {Function} express (@var{expr})\n"
msgstr ""

#: Differentiation.texi:838
msgid ""
"@c HERE IS THE PREVIOUS TEXT. WHAT IS THE POINT ABOUT depends ?? I'M NOT GETTING IT\n"
"@c The result uses the noun form of any\n"
"@c derivatives arising from expansion of the vector differential\n"
"@c operators.  To force evaluation of these derivatives, the built-in @code{ev}\n"
"@c function can be used together with the @code{diff} evflag, after using the\n"
"@c built-in @code{depends} function to establish any new implicit dependencies.\n"
"@c\n"
"@c TODO: curl, grad, div and laplacian aren't currently documented.\n"
msgstr ""

#: Differentiation.texi:843
msgid ""
"Expands differential operator nouns into expressions in terms of partial\n"
"derivatives.  @code{express} recognizes the operators @code{grad}, @code{div},\n"
"@code{curl}, @code{laplacian}.  @code{express} also expands the cross product\n"
"@mref{~}.\n"
msgstr ""

#: Differentiation.texi:848
msgid ""
"Symbolic derivatives (that is, @code{diff} nouns)\n"
"in the return value of express may be evaluated by including @code{diff}\n"
"in the @code{ev} function call or command line.\n"
"In this context, @mref{diff} acts as an @mref{evfun}.\n"
msgstr ""

#: Differentiation.texi:851
msgid ""
"@code{load (\\"vect\\")} loads this function.\n"
"@c IN POINT OF FACT, express IS A SIMPLIFICATION RULE, AND express1 IS THE FCN WHICH DOES ALL THE WORK\n"
msgstr ""

#: Differentiation.texi:853
msgid ""
"Examples:\n"
@c Occurrences of paragraphs with this contents up to now: 6
msgstr ""

#: Differentiation.texi:916
msgid ""
"@c GENERATED FROM THE FOLLOWING\n"
"@c load (\\"vect\\")$\n"
"@c grad (x^2 + y^2 + z^2);\n"
"@c express (%);\n"
"@c ev (%, diff);\n"
"@c div ([x^2, y^2, z^2]);\n"
"@c express (%);\n"
"@c ev (%, diff);\n"
"@c curl ([x^2, y^2, z^2]);\n"
"@c express (%);\n"
"@c ev (%, diff);\n"
"@c laplacian (x^2 * y^2 * z^2);\n"
"@c express (%);\n"
"@c ev (%, diff);\n"
"@c [a, b, c] ~ [x, y, z];\n"
"@c express (%);\n"
"@example\n"
"(%i1) load (\\"vect\\")$\n"
"(%i2) grad (x^2 + y^2 + z^2);\n"
"                              2    2    2\n"
"(%o2)                  grad (z  + y  + x )\n"
"(%i3) express (%);\n"
"       d    2    2    2   d    2    2    2   d    2    2    2\n"
"(%o3) [-- (z  + y  + x ), -- (z  + y  + x ), -- (z  + y  + x )]\n"
"       dx                 dy                 dz\n"
"(%i4) ev (%, diff);\n"
"(%o4)                    [2 x, 2 y, 2 z]\n"
"(%i5) div ([x^2, y^2, z^2]);\n"
"                              2   2   2\n"
"(%o5)                   div [x , y , z ]\n"
"(%i6) express (%);\n"
"                   d    2    d    2    d    2\n"
"(%o6)              -- (z ) + -- (y ) + -- (x )\n"
"                   dz        dy        dx\n"
"(%i7) ev (%, diff);\n"
"(%o7)                    2 z + 2 y + 2 x\n"
"(%i8) curl ([x^2, y^2, z^2]);\n"
"                               2   2   2\n"
"(%o8)                   curl [x , y , z ]\n"
"(%i9) express (%);\n"
"       d    2    d    2   d    2    d    2   d    2    d    2\n"
"(%o9) [-- (z ) - -- (y ), -- (x ) - -- (z ), -- (y ) - -- (x )]\n"
"       dy        dz       dz        dx       dx        dy\n"
"(%i10) ev (%, diff);\n"
"(%o10)                      [0, 0, 0]\n"
"(%i11) laplacian (x^2 * y^2 * z^2);\n"
"                                  2  2  2\n"
"(%o11)                laplacian (x  y  z )\n"
"(%i12) express (%);\n"
"         2                2                2\n"
"        d     2  2  2    d     2  2  2    d     2  2  2\n"
"(%o12)  --- (x  y  z ) + --- (x  y  z ) + --- (x  y  z )\n"
"          2                2                2\n"
"        dz               dy               dx\n"
"(%i13) ev (%, diff);\n"
"                      2  2      2  2      2  2\n"
"(%o13)             2 y  z  + 2 x  z  + 2 x  y\n"
"(%i14) [a, b, c] ~ [x, y, z];\n"
"(%o14)                [a, b, c] ~ [x, y, z]\n"
"(%i15) express (%);\n"
"(%o15)          [b z - c y, c x - a z, a y - b x]\n"
"@end example\n"
msgstr ""

#: Differentiation.texi:921
msgid ""
"@opencatbox\n"
"@category{Differential calculus} @category{Vectors} @category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:943
msgid ""
"@c COMMENTING OUT THIS TEXT PENDING RESOLUTION OF BUG REPORT # 836704:\n"
"@c \\"gendiff is all bugs: should be deprecated\\"\n"
"@c @defun gendiff\n"
"@c Sometimes @code{diff(e,x,n)} can be reduced even though N is\n"
"@c symbolic.\n"
"@c \n"
"@c @example\n"
"@c batch(\\"gendif\\")$\n"
"@c @end example\n"
"@c \n"
"@c and you can try, for example,\n"
"@c \n"
"@c @example\n"
"@c diff(%e^(a*x),x,q)\n"
"@c @end example\n"
"@c \n"
"@c by using @code{gendiff} rather than @code{diff}.  Unevaluable\n"
"@c items come out quoted.  Some items are in terms of @code{genfact}, which\n"
"@c see.\n"
"@c \n"
"@c @end defun\n"
msgstr ""

#: Differentiation.texi:949
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{gradef}\n"
"@deffn  {Function} gradef @\n"
"@fname{gradef} (@var{f}(@var{x_1}, @dots{}, @var{x_n}), @var{g_1}, @dots{}, @var{g_m}) @\n"
"@fname{gradef} (@var{a}, @var{x}, @var{expr})\n"
msgstr ""

#: Differentiation.texi:952
msgid ""
"Defines the partial derivatives (i.e., the components of the gradient) of the\n"
"function @var{f} or variable @var{a}.\n"
msgstr ""

#: Differentiation.texi:959
msgid ""
"@code{gradef (@var{f}(@var{x_1}, ..., @var{x_n}), @var{g_1}, ..., @var{g_m})}\n"
"defines @code{d@var{f}/d@var{x_i}} as @var{g_i}, where @var{g_i} is an\n"
"expression; @var{g_i} may be a function call, but not the name of a function.\n"
"The number of partial derivatives @var{m} may be less than the number of\n"
"arguments @var{n}, in which case derivatives are defined with respect to\n"
"@var{x_1} through @var{x_m} only.\n"
msgstr ""

#: Differentiation.texi:963
msgid ""
"@code{gradef (@var{a}, @var{x}, @var{expr})} defines the derivative of variable\n"
"@var{a} with respect to @var{x} as @var{expr}.  This also establishes the\n"
"dependence of @var{a} on @var{x} (via @code{depends (@var{a}, @var{x})}).\n"
msgstr ""

#: Differentiation.texi:968
msgid ""
"The first argument @code{@var{f}(@var{x_1}, ..., @var{x_n})} or @var{a} is\n"
"quoted, but the remaining arguments @var{g_1}, ..., @var{g_m} are evaluated.\n"
"@code{gradef} returns the function or variable for which the partial derivatives\n"
"are defined.\n"
msgstr ""

#: Differentiation.texi:972
msgid ""
"@code{gradef} can redefine the derivatives of Maxima's built-in functions.\n"
"For example, @code{gradef (sin(x), sqrt (1 - sin(x)^2))} redefines the\n"
"derivative of @code{sin}.\n"
msgstr ""

#: Differentiation.texi:974
msgid ""
"@code{gradef} cannot define partial derivatives for a subscripted function.\n"
msgstr ""

#: Differentiation.texi:978
msgid ""
"@code{printprops ([@var{f_1}, ..., @var{f_n}], gradef)} displays the partial\n"
"derivatives of the functions @var{f_1}, ..., @var{f_n}, as defined by\n"
"@code{gradef}.\n"
msgstr ""

#: Differentiation.texi:982
msgid ""
"@code{printprops ([@var{a_n}, ..., @var{a_n}], atomgrad)} displays the partial\n"
"derivatives of the variables @var{a_n}, ..., @var{a_n}, as defined by\n"
"@code{gradef}.\n"
msgstr ""

#: Differentiation.texi:987
msgid ""
"@code{gradefs} is the list of the functions\n"
"for which partial derivatives have been defined by @code{gradef}.\n"
"@code{gradefs} does not include any variables\n"
"for which partial derivatives have been defined by @code{gradef}.\n"
msgstr ""

#: Differentiation.texi:992
msgid ""
"@c REPHRASE THIS NEXT BIT\n"
"Gradients are needed when, for example, a function is not known\n"
"explicitly but its first derivatives are and it is desired to obtain\n"
"higher order derivatives.\n"
msgstr ""

#: Differentiation.texi:998
msgid ""
"@c NEED EXAMPLES HERE\n"
"@opencatbox\n"
"@category{Differential calculus} @category{Declarations and inferences}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Differentiation.texi:1003
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{gradefs}\n"
"@defvr {System variable} gradefs\n"
"Default value: @code{[]}\n"
msgstr ""

#: Differentiation.texi:1008
msgid ""
"@code{gradefs} is the list of the functions\n"
"for which partial derivatives have been defined by @code{gradef}.\n"
"@code{gradefs} does not include any variables\n"
"for which partial derivatives have been defined by @code{gradef}.\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Differentiation.texi:1013
msgid ""
"@opencatbox\n"
"@category{Differential calculus} @category{Declarations and inferences}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

#: Differentiation.texi:1017
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{laplace}\n"
"@deffn {Function} laplace (@var{expr}, @var{t}, @var{s})\n"
msgstr ""

#: Differentiation.texi:1020
msgid ""
"Attempts to compute the Laplace transform of @var{expr} with respect to the \n"
"variable @var{t} and transform parameter @var{s}.\n"
msgstr ""

#: Differentiation.texi:1028
msgid ""
"@code{laplace} recognizes in @var{expr} the functions @code{delta}, @code{exp},\n"
"@code{log}, @code{sin}, @code{cos}, @code{sinh}, @code{cosh}, and @code{erf},\n"
"as well as @code{derivative}, @code{integrate}, @code{sum}, and @code{ilt}.  If\n"
"laplace fails to find a transform the function @code{specint} is called.\n"
"@code{specint} can find the laplace transform for expressions with special\n"
"functions like the bessel functions @code{bessel_j}, @code{bessel_i}, @dots{}\n"
"and can handle the @code{unit_step} function.  See also @mrefdot{specint}\n"
msgstr ""

#: Differentiation.texi:1030
msgid ""
"If @code{specint} cannot find a solution too, a noun @code{laplace} is returned.\n"
msgstr ""

#: Differentiation.texi:1040
msgid ""
"@c REPHRASE THIS\n"
"@var{expr} may also be a linear, constant coefficient differential equation in\n"
"which case @code{atvalue} of the dependent variable is used.\n"
"@c \\"used\\" -- USED HOW ??\n"
"The required atvalue may be supplied either before or after the transform is\n"
"computed.  Since the initial conditions must be specified at zero, if one has\n"
"boundary conditions imposed elsewhere he can impose these on the general\n"
"solution and eliminate the constants by solving the general solution\n"
"for them and substituting their values back.\n"
msgstr ""

#: Differentiation.texi:1044
msgid ""
"@code{laplace} recognizes convolution integrals of the form\n"
"@code{integrate (f(x) * g(t - x), x, 0, t)};\n"
"other kinds of convolutions are not recognized.\n"
msgstr ""

#: Differentiation.texi:1049
msgid ""
"Functional relations must be explicitly represented in @var{expr};\n"
"implicit relations, established by @code{depends}, are not recognized.\n"
"That is, if @var{f} depends on @var{x} and @var{y},\n"
"@code{f (x, y)} must appear in @var{expr}.\n"
msgstr ""

#: Differentiation.texi:1051
msgid ""
"See also @mrefcomma{ilt}, the inverse Laplace transform.\n"
msgstr ""

#: Differentiation.texi:1053
msgid ""
"Examples:\n"
@c Occurrences of paragraphs with this contents up to now: 7
msgstr ""

#: Differentiation.texi:1113
msgid ""
"@c GENERATED FROM THE FOLLOWING:\n"
"@c laplace (exp (2*t + a) * sin(t) * t, t, s);\n"
"@c laplace ('diff (f (x), x), x, s);\n"
"@c diff (diff (delta (t), t), t);\n"
"@c laplace (%, t, s);\n"
"@example\n"
"(%i1) laplace (exp (2*t + a) * sin(t) * t, t, s);\n"
"                            a\n"
"                          %e  (2 s - 4)\n"
"(%o1)                    ---------------\n"
"                           2           2\n"
"                         (s  - 4 s + 5)\n"
"(%i2) laplace ('diff (f (x), x), x, s);\n"
"(%o2)             s laplace(f(x), x, s) - f(0)\n"
"(%i3) diff (diff (delta (t), t), t);\n"
"                          2\n"
"                         d\n"
"(%o3)                    --- (delta(t))\n"
"                           2\n"
"                         dt\n"
"(%i4) laplace (%, t, s);\n"
"                            !\n"
"               d            !         2\n"
"(%o4)        - -- (delta(t))!      + s  - delta(0) s\n"
"               dt           !\n"
"                            !t = 0\n"
"(%i5) assume(a>0)$\n"
"(%i6) laplace(gamma_incomplete(a,t),t,s),gamma_expand:true;\n"
"                                              - a - 1\n"
"                         gamma(a)   gamma(a) s\n"
"(%o6)                    -------- - -----------------\n"
"                            s            1     a\n"
"                                        (- + 1)\n"
"                                         s\n"
"(%i7) factor(laplace(gamma_incomplete(1/2,t),t,s));\n"
"                                              s + 1\n"
"                      sqrt(%pi) (sqrt(s) sqrt(-----) - 1)\n"
"                                                s\n"
"(%o7)                 -----------------------------------\n"
"                                3/2      s + 1\n"
"                               s    sqrt(-----)\n"
"                                           s\n"
"(%i8) assume(exp(%pi*s)>1)$\n"
"(%i9) laplace(sum((-1)^n*unit_step(t-n*%pi)*sin(t),n,0,inf),t,s),\n"
"         simpsum;\n"
"@group\n"
"                         %i                         %i\n"
"              ------------------------ - ------------------------\n"
"                              - %pi s                    - %pi s\n"
"              (s + %i) (1 - %e       )   (s - %i) (1 - %e       )\n"
"(%o9)         ---------------------------------------------------\n"
"                                       2\n"
"@end group\n"
"(%i9) factor(%);\n"
"                                      %pi s\n"
"                                    %e\n"
"(%o9)                   -------------------------------\n"
"                                             %pi s\n"
"                        (s - %i) (s + %i) (%e      - 1)\n"
msgstr ""

#: Differentiation.texi:1115
msgid ""
"@end example\n"
msgstr ""

#: Differentiation.texi:1120
msgid ""
"@opencatbox\n"
"@category{Laplace transform} @category{Differential equations}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

