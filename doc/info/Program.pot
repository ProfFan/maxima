# This file contains all translatable strings from a .texi file.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL>\n"
"Language-Team: LANGUAGE <LL.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: Program.texi:7
msgid ""
"@menu\n"
"* Lisp and Maxima::\n"
"* Garbage Collection::\n"
"* Introduction to Program Flow::\n"
"* Functions and Variables for Program Flow::\n"
"@end menu\n"
msgstr ""

#: Program.texi:12
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Lisp and Maxima, Garbage Collection, Program Flow, Program Flow\n"
"@section Lisp and Maxima\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

#: Program.texi:17
msgid ""
"Maxima is written in Lisp, and it is easy to access Lisp functions and variables\n"
"from Maxima and vice versa.  Lisp and Maxima symbols are distinguished by a\n"
"naming convention.  A Lisp symbol which begins with a dollar sign @code{$}\n"
"corresponds to a Maxima symbol without the dollar sign.\n"
msgstr ""

#: Program.texi:21
msgid ""
"@c NEED TO MENTION THIS OR IS IT JUST CLUTTERING ??\n"
"@c This includes special Maxima variables such as @code{%} and input and output\n"
"@c labels, which appear as @code{$%}, @code{$%i1}, @code{$%o1}, etc., in Lisp.\n"
msgstr ""

#: Program.texi:28
msgid ""
"A Maxima symbol which begins with a question mark @code{?} corresponds to a Lisp\n"
"symbol without the question mark.  For example, the Maxima symbol @code{foo}\n"
"corresponds to the Lisp symbol @code{$FOO}, while the Maxima symbol @code{?foo}\n"
"corresponds to the Lisp symbol @code{FOO}.  Note that @code{?foo} is written\n"
"without a space between @code{?} and @code{foo}; otherwise it might be mistaken\n"
"for @code{describe (\"foo\")}.\n"
msgstr ""

#: Program.texi:33
msgid ""
"Hyphen @code{-}, asterisk @code{*}, or other special characters in Lisp symbols\n"
"must be escaped by backslash @code{\} where they appear in Maxima code.  For\n"
"example, the Lisp identifier @code{*foo-bar*} is written @code{?\*foo\-bar\*}\n"
"in Maxima.\n"
msgstr ""

#: Program.texi:37
msgid ""
"Lisp code may be executed from within a Maxima session.  A single line of Lisp\n"
"(containing one or more forms) may be executed by the special command\n"
"@code{:lisp}.  For example,\n"
msgstr ""

#: Program.texi:41
msgid ""
"@example\n"
"(%i1) :lisp (foo $x $y)\n"
"@end example\n"
msgstr ""

#: Program.texi:48
msgid ""
"@noindent\n"
"calls the Lisp function @code{foo} with Maxima variables @code{x} and @code{y}\n"
"as arguments.  The @code{:lisp} construct can appear at the interactive prompt\n"
"or in a file processed by @mref{batch} or @mrefcomma{demo} but not in a file\n"
"processed by @mrefcomma{load} @mrefcomma{batchload}@w{}\n"
"@mrefcomma{translate_file} or @mrefdot{compile_file}\n"
msgstr ""

#: Program.texi:55
msgid ""
"The function @mref{to_lisp} opens an interactive Lisp session.\n"
"Entering @code{(to-maxima)} closes the Lisp session and returns to Maxima.\n"
"@c I DON'T EVEN WANT TO MENTION USING CTRL-C TO OPEN A LISP SESSION.\n"
"@c (1) IT TAKES EXTRA SET UP TO GET STARTED NAMELY :lisp (setq *debugger-hook* nil)\n"
"@c (2) IT GETS SCREWED UP EASILY -- TYPE SOMETHING WRONG AND YOU CAN'T GET BACK TO MAXIMA\n"
"@c (3) IT DOESN'T OFFER FUNCTIONALITY NOT PRESENT IN THE to_lisp() SESSION\n"
msgstr ""

#: Program.texi:59
msgid ""
"Lisp functions and variables which are to be visible in Maxima as functions and\n"
"variables with ordinary names (no special punctuation) must have Lisp names\n"
"beginning with the dollar sign @code{$}.\n"
msgstr ""

#: Program.texi:63
msgid ""
"Maxima is case-sensitive, distinguishing between lowercase and uppercase letters\n"
"in identifiers.  There are some rules governing the translation of names between\n"
"Lisp and Maxima.\n"
msgstr ""

#: Program.texi:83
msgid ""
"@enumerate\n"
"@item\n"
"A Lisp identifier not enclosed in vertical bars corresponds to a Maxima\n"
"identifier in lowercase.  Whether the Lisp identifier is uppercase, lowercase,\n"
"or mixed case, is ignored.  E.g., Lisp @code{$foo}, @code{$FOO}, and @code{$Foo}\n"
"all correspond to Maxima @code{foo}.  But this is because @code{$foo},\n"
"@code{$FOO} and @code{$Foo} are converted by the Lisp reader by default to the\n"
"Lisp symbol @code{$FOO}.\n"
"@item\n"
"A Lisp identifier which is all uppercase or all lowercase and enclosed in\n"
"vertical bars corresponds to a Maxima identifier with case reversed.  That is,\n"
"uppercase is changed to lowercase and lowercase to uppercase.  E.g., Lisp\n"
"@code{|$FOO|} and @code{|$foo|} correspond to Maxima @code{foo} and @code{FOO},\n"
"respectively.\n"
"@item\n"
"A Lisp identifier which is mixed uppercase and lowercase and enclosed in\n"
"vertical bars corresponds to a Maxima identifier with the same case.  E.g.,\n"
"Lisp @code{|$Foo|} corresponds to Maxima @code{Foo}.\n"
"@end enumerate\n"
msgstr ""

#: Program.texi:87
msgid ""
"The @code{#$} Lisp macro allows the use of Maxima expressions in Lisp code.\n"
"@code{#$@var{expr}$} expands to a Lisp expression equivalent to the Maxima\n"
"expression @var{expr}.\n"
msgstr ""

#: Program.texi:91
msgid ""
"@example\n"
"(msetq $foo #$[x, y]$)\n"
"@end example\n"
msgstr ""

#: Program.texi:94
msgid ""
"@noindent\n"
"This has the same effect as entering\n"
msgstr ""

#: Program.texi:98
msgid ""
"@example\n"
"(%i1) foo: [x, y];\n"
"@end example\n"
msgstr ""

#: Program.texi:101
msgid ""
"@noindent\n"
"The Lisp function @code{displa} prints an expression in Maxima format.\n"
msgstr ""

#: Program.texi:109
msgid ""
"@example\n"
"(%i1) :lisp #$[x, y, z]$ \n"
"((MLIST SIMP) $X $Y $Z)\n"
"(%i1) :lisp (displa '((MLIST SIMP) $X $Y $Z))\n"
"[x, y, z]\n"
"NIL\n"
"@end example\n"
msgstr ""

#: Program.texi:112
msgid ""
"Functions defined in Maxima are not ordinary Lisp functions.  The Lisp function\n"
"@code{mfuncall} calls a Maxima function.  For example:\n"
msgstr ""

#: Program.texi:118
msgid ""
"@example\n"
"(%i1) foo(x,y) := x*y$\n"
"(%i2) :lisp (mfuncall '$foo 'a 'b)\n"
"((MTIMES SIMP) A B)\n"
"@end example\n"
msgstr ""

#: Program.texi:120
msgid ""
"Some Lisp functions are shadowed in the Maxima package, namely the following.\n"
msgstr ""

#: Program.texi:130
msgid ""
"@verbatim\n"
"   complement     continue      //\n"
"   float          functionp     array\n"
"   exp            listen        signum\n"
"   atan           asin          acos\n"
"   asinh          acosh         atanh\n"
"   tanh           cosh          sinh\n"
"   tan            break         gcd\n"
"@end verbatim\n"
msgstr ""

#: Program.texi:134
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
msgstr ""

#: Program.texi:139
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Garbage Collection, Introduction to Program Flow, Lisp and Maxima, Program Flow\n"
"@section Garbage Collection\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

#: Program.texi:143
msgid ""
"Symbolic computation tends to create a good deal of garbage (temporary or\n"
"intermediate results that are eventually not used), and effective handling of\n"
"this can be crucial to successful completion of some programs.\n"
msgstr ""

#: Program.texi:153
msgid ""
"@c HOW MUCH OF THE FOLLOWING STILL HOLDS ??\n"
"@c WHAT ABOUT GC IN GCL ON MS WINDOWS ??\n"
"@c SHOULD WE SAY SOMETHING ABOUT GC FOR OTHER LISPS ??\n"
"Under GCL, on UNIX systems where the mprotect system call is available\n"
"(including SUN OS 4.0 and some variants of BSD) a stratified garbage collection\n"
"is available.  This limits the collection to pages which have been recently\n"
"written to.  See the GCL documentation under ALLOCATE and GBC.  At the Lisp\n"
"level doing (setq si::*notify-gbc* t) will help you determine which areas might\n"
"need more space.\n"
msgstr ""

#: Program.texi:156
msgid ""
"For other Lisps that run Maxima, we refer the reader to the documentation for\n"
"that Lisp on how to control GC.\n"
msgstr ""

#: Program.texi:161
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Introduction to Program Flow, Functions and Variables for Program Flow, Garbage Collection, Program Flow\n"
"@section Introduction to Program Flow\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

#: Program.texi:164
msgid ""
"Maxima provides a @code{do} loop for iteration, as well as more primitive\n"
"constructs such as @code{go}.\n"
msgstr ""

#: Program.texi:166
msgid ""
"@c end concepts Program Flow\n"
msgstr ""

#: Program.texi:171
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Functions and Variables for Program Flow,  , Introduction to Program Flow, Program Flow\n"
"@section Functions and Variables for Program Flow\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

#: Program.texi:177
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{backtrace}\n"
"@deffn  {Function} backtrace @\n"
"@fname{backtrace} () @\n"
"@fname{backtrace} (@var{n})\n"
msgstr ""

#: Program.texi:180
msgid ""
"Prints the call stack, that is, the list of functions which\n"
"called the currently active function.\n"
msgstr ""

#: Program.texi:182
msgid ""
"@code{backtrace()} prints the entire call stack.\n"
msgstr ""

#: Program.texi:185
msgid ""
"@code{backtrace (@var{n})} prints the @var{n} most recent \n"
"functions, including the currently active function.\n"
msgstr ""

#: Program.texi:190
msgid ""
"@c IS THIS STATEMENT REALLY NEEDED ?? \n"
"@c (WHY WOULD ANYONE BELIEVE backtrace CANNOT BE CALLED OUTSIDE A DEBUGGING CONTEXT??)\n"
"@code{backtrace} can be called from a script, a function, or the interactive\n"
"prompt (not only in a debugging context).\n"
msgstr ""

#: Program.texi:192
msgid ""
"Examples:\n"
msgstr ""

#: Program.texi:196
msgid ""
"@itemize @bullet\n"
"@item\n"
"@code{backtrace()} prints the entire call stack.\n"
msgstr ""

#: Program.texi:212
msgid ""
"@example\n"
"(%i1) h(x) := g(x/7)$\n"
"(%i2) g(x) := f(x-11)$\n"
"(%i3) f(x) := e(x^2)$\n"
"(%i4) e(x) := (backtrace(), 2*x + 13)$\n"
"(%i5) h(10);\n"
"#0: e(x=4489/49)\n"
"#1: f(x=-67/7)\n"
"#2: g(x=10/7)\n"
"#3: h(x=10)\n"
"                              9615\n"
"(%o5)                         ----\n"
"                               49\n"
"@end example\n"
"@end itemize\n"
msgstr ""

#: Program.texi:217
msgid ""
"@itemize @bullet\n"
"@item\n"
"@code{backtrace (@var{n})} prints the @var{n} most recent \n"
"functions, including the currently active function.\n"
msgstr ""

#: Program.texi:233
msgid ""
"@example\n"
"(%i1) h(x) := (backtrace(1), g(x/7))$\n"
"(%i2) g(x) := (backtrace(1), f(x-11))$\n"
"(%i3) f(x) := (backtrace(1), e(x^2))$\n"
"(%i4) e(x) := (backtrace(1), 2*x + 13)$\n"
"(%i5) h(10);\n"
"#0: h(x=10)\n"
"#0: g(x=10/7)\n"
"#0: f(x=-67/7)\n"
"#0: e(x=4489/49)\n"
"                              9615\n"
"(%o5)                         ----\n"
"                               49\n"
"@end example\n"
"@end itemize\n"
msgstr ""

#: Program.texi:238
msgid ""
"@opencatbox\n"
"@category{Debugging}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Program.texi:258
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{do}\n"
"@anchor{while}\n"
"@anchor{unless}\n"
"@anchor{for}\n"
"@anchor{from}\n"
"@anchor{thru}\n"
"@anchor{step}\n"
"@anchor{next}\n"
"@anchor{in}\n"
"@deffn {Special operator} do\n"
"@deffnx {Special operator} while\n"
"@deffnx {Special operator} unless\n"
"@deffnx {Special operator} for\n"
"@deffnx {Special operator} from\n"
"@deffnx {Special operator} thru\n"
"@deffnx {Special operator} step\n"
"@deffnx {Special operator} next\n"
"@deffnx {Special operator} in\n"
msgstr ""

#: Program.texi:264
msgid ""
"The @code{do} statement is used for performing iteration.  Due to its\n"
"great generality the @code{do} statement will be described in two parts.\n"
"First the usual form will be given which is analogous to that used in\n"
"several other programming languages (Fortran, Algol, PL/I, etc.); then\n"
"the other features will be mentioned.\n"
msgstr ""

#: Program.texi:267
msgid ""
"There are three variants of this form that differ only in their\n"
"terminating conditions.  They are:\n"
msgstr ""

#: Program.texi:279
msgid ""
"@itemize @bullet\n"
"@item\n"
"@code{for @var{variable}: @var{initial_value} step @var{increment}\n"
"      thru @var{limit} do @var{body}}\n"
"@item\n"
"@code{for @var{variable}: @var{initial_value} step @var{increment}\n"
"      while @var{condition} do @var{body}}\n"
"@item\n"
"@code{for @var{variable}: @var{initial_value} step @var{increment}\n"
"      unless @var{condition} do @var{body}}\n"
"@end itemize\n"
msgstr ""

#: Program.texi:283
msgid ""
"@c UGH. DO WE REALLY NEED TO MENTION THIS??\n"
"(Alternatively, the @code{step} may be given after the termination condition\n"
"or limit.)\n"
msgstr ""

#: Program.texi:286
msgid ""
"@var{initial_value}, @var{increment}, @var{limit}, and @var{body} can be any\n"
"expressions.  If the increment is 1 then \"@code{step 1}\" may be omitted.\n"
msgstr ""

#: Program.texi:298
msgid ""
"The execution of the @code{do} statement proceeds by first assigning\n"
"the @var{initial_value} to the @var{variable} (henceforth called the\n"
"control-variable).  Then: (1) If the control-variable has exceeded the\n"
"limit of a @code{thru} specification, or if the condition of the\n"
"@code{unless} is @code{true}, or if the condition of the @code{while}\n"
"is @code{false} then the @code{do} terminates.  (2) The @var{body} is\n"
"evaluated.  (3) The increment is added to the control-variable.  The\n"
"process from (1) to (3) is performed repeatedly until the termination\n"
"condition is satisfied.  One may also give several termination\n"
"conditions in which case the @code{do} terminates when any of them is\n"
"satisfied.\n"
msgstr ""

#: Program.texi:309
msgid ""
"In general the @code{thru} test is satisfied when the control-variable\n"
"is greater than the @var{limit} if the @var{increment} was\n"
"non-negative, or when the control-variable is less than the\n"
"@var{limit} if the @var{increment} was negative.  The\n"
"@var{increment} and @var{limit} may be non-numeric expressions as\n"
"long as this inequality can be determined.  However, unless the\n"
"@var{increment} is syntactically negative (e.g. is a negative number)\n"
"at the time the @code{do} statement is input, Maxima assumes it will\n"
"be positive when the @code{do} is executed.  If it is not positive,\n"
"then the @code{do} may not terminate properly.\n"
msgstr ""

#: Program.texi:316
msgid ""
"Note that the @var{limit}, @var{increment}, and termination condition are\n"
"evaluated each time through the loop.  Thus if any of these involve\n"
"much computation, and yield a result that does not change during all\n"
"the executions of the @var{body}, then it is more efficient to set a\n"
"variable to their value prior to the @code{do} and use this variable in the\n"
"@code{do} form.\n"
msgstr ""

#: Program.texi:324
msgid ""
"The value normally returned by a @code{do} statement is the atom\n"
"@code{done}.  However, the function @code{return} may be used inside\n"
"the @var{body} to exit the @code{do} prematurely and give it any\n"
"desired value.  Note however that a @code{return} within a @code{do}\n"
"that occurs in a @code{block} will exit only the @code{do} and not the\n"
"@code{block}.  Note also that the @code{go} function may not be used\n"
"to exit from a @code{do} into a surrounding @code{block}.\n"
msgstr ""

#: Program.texi:329
msgid ""
"The control-variable is always local to the @code{do} and thus any\n"
"variable may be used without affecting the value of a variable with\n"
"the same name outside of the @code{do}.  The control-variable is unbound\n"
"after the @code{do} terminates.\n"
msgstr ""

#: Program.texi:333
msgid ""
"@example\n"
"(%i1) for a:-3 thru 26 step 7 do display(a)$\n"
"                             a = - 3\n"
msgstr ""

#: Program.texi:335
msgid ""
"                              a = 4\n"
msgstr ""

#: Program.texi:337
msgid ""
"                             a = 11\n"
msgstr ""

#: Program.texi:339
msgid ""
"                             a = 18\n"
msgstr ""

#: Program.texi:342
msgid ""
"                             a = 25\n"
"@end example\n"
msgstr ""

#: Program.texi:350
msgid ""
"@example\n"
"(%i1) s: 0$\n"
"(%i2) for i: 1 while i <= 10 do s: s+i;\n"
"(%o2)                         done\n"
"(%i3) s;\n"
"(%o3)                          55\n"
"@end example\n"
msgstr ""

#: Program.texi:353
msgid ""
"Note that the condition @code{while i <= 10}\n"
"is equivalent to @code{unless i > 10} and also @code{thru 10}.\n"
msgstr ""

#: Program.texi:366
msgid ""
"@example\n"
"(%i1) series: 1$\n"
"(%i2) term: exp (sin (x))$\n"
"(%i3) for p: 1 unless p > 7 do\n"
"          (term: diff (term, x)/p, \n"
"           series: series + subst (x=0, term)*x^p)$\n"
"(%i4) series;\n"
"                  7    6     5    4    2\n"
"                 x    x     x    x    x\n"
"(%o4)            -- - --- - -- - -- + -- + x + 1\n"
"                 90   240   15   8    2\n"
"@end example\n"
msgstr ""

#: Program.texi:368
msgid ""
"which gives 8 terms of the Taylor series for @code{e^sin(x)}.\n"
msgstr ""

#: Program.texi:383
msgid ""
"@example\n"
"(%i1) poly: 0$\n"
"(%i2) for i: 1 thru 5 do\n"
"          for j: i step -1 thru 1 do\n"
"              poly: poly + i*x^j$\n"
"(%i3) poly;\n"
"                  5      4       3       2\n"
"(%o3)          5 x  + 9 x  + 12 x  + 14 x  + 15 x\n"
"(%i4) guess: -3.0$\n"
"(%i5) for i: 1 thru 10 do\n"
"          (guess: subst (guess, x, 0.5*(x + 10/x)),\n"
"           if abs (guess^2 - 10) < 0.00005 then return (guess));\n"
"(%o5)                  - 3.162280701754386\n"
"@end example\n"
msgstr ""

#: Program.texi:387
msgid ""
"This example computes the negative square root of 10 using the\n"
"Newton- Raphson iteration a maximum of 10 times.  Had the convergence\n"
"criterion not been met the value returned would have been @code{done}.\n"
msgstr ""

#: Program.texi:393
msgid ""
"Instead of always adding a quantity to the control-variable one\n"
"may sometimes wish to change it in some other way for each iteration.\n"
"In this case one may use @code{next @var{expression}} instead of\n"
"@code{step @var{increment}}.  This will cause the control-variable to be set to\n"
"the result of evaluating @var{expression} each time through the loop.\n"
msgstr ""

#: Program.texi:397
msgid ""
"@example\n"
"(%i6) for count: 2 next 3*count thru 20 do display (count)$\n"
"                            count = 2\n"
msgstr ""

#: Program.texi:399
msgid ""
"                            count = 6\n"
msgstr ""

#: Program.texi:402
msgid ""
"                           count = 18\n"
"@end example\n"
msgstr ""

#: Program.texi:410
msgid ""
"@c UGH. DO WE REALLY NEED TO MENTION THIS??\n"
"As an alternative to @code{for @var{variable}: @var{value} ...do...}\n"
"the syntax @code{for @var{variable} from @var{value} ...do...}  may be\n"
"used.  This permits the @code{from @var{value}} to be placed after the\n"
"@code{step} or @code{next} value or after the termination condition.\n"
"If @code{from @var{value}} is omitted then 1 is used as the initial\n"
"value.\n"
msgstr ""

#: Program.texi:416
msgid ""
"Sometimes one may be interested in performing an iteration where\n"
"the control-variable is never actually used.  It is thus permissible\n"
"to give only the termination conditions omitting the initialization\n"
"and updating information as in the following example to compute the\n"
"square-root of 5 using a poor initial guess.\n"
msgstr ""

#: Program.texi:425
msgid ""
"@example\n"
"(%i1) x: 1000$\n"
"(%i2) thru 20 do x: 0.5*(x + 5.0/x)$\n"
"(%i3) x;\n"
"(%o3)                   2.23606797749979\n"
"(%i4) sqrt(5), numer;\n"
"(%o4)                   2.23606797749979\n"
"@end example\n"
msgstr ""

#: Program.texi:430
msgid ""
"If it is desired one may even omit the termination conditions entirely\n"
"and just give @code{do @var{body}} which will continue to evaluate the\n"
"@var{body} indefinitely.  In this case the function @code{return}\n"
"should be used to terminate execution of the @code{do}.\n"
msgstr ""

#: Program.texi:439
msgid ""
"@example\n"
"(%i1) newton (f, x):= ([y, df, dfx], df: diff (f ('x), 'x),\n"
"          do (y: ev(df), x: x - f(x)/y, \n"
"              if abs (f (x)) < 5e-6 then return (x)))$\n"
"(%i2) sqr (x) := x^2 - 5.0$\n"
"(%i3) newton (sqr, 1000);\n"
"(%o3)                   2.236068027062195\n"
"@end example\n"
msgstr ""

#: Program.texi:445
msgid ""
"@c DUNNO IF WE NEED THIS LEVEL OF DETAIL; THIS ARTICLE IS GETTING PRETTY LONG\n"
"(Note that @code{return}, when executed, causes the current value of @code{x} to\n"
"be returned as the value of the @code{do}.  The @code{block} is exited and this\n"
"value of the @code{do} is returned as the value of the @code{block} because the\n"
"@code{do} is the last statement in the block.)\n"
msgstr ""

#: Program.texi:447
msgid ""
"One other form of the @code{do} is available in Maxima.  The syntax is:\n"
msgstr ""

#: Program.texi:451
msgid ""
"@example\n"
"for @var{variable} in @var{list} @var{end_tests} do @var{body}\n"
"@end example\n"
msgstr ""

#: Program.texi:459
msgid ""
"The elements of @var{list} are any expressions which will successively\n"
"be assigned to the @code{variable} on each iteration of the\n"
"@var{body}.  The optional termination tests @var{end_tests} can be\n"
"used to terminate execution of the @code{do}; otherwise it will\n"
"terminate when the @var{list} is exhausted or when a @code{return} is\n"
"executed in the @var{body}.  (In fact, @code{list} may be any\n"
"non-atomic expression, and successive parts are taken.)\n"
msgstr ""

#: Program.texi:470
msgid ""
"@example\n"
"(%i1)  for f in [log, rho, atan] do ldisp(f(1))$\n"
"(%t1)                                  0\n"
"(%t2)                                rho(1)\n"
"                                     %pi\n"
"(%t3)                                 ---\n"
"                                      4\n"
"(%i4) ev(%t3,numer);\n"
"(%o4)                             0.78539816\n"
"@end example\n"
msgstr ""

#: Program.texi:475
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Program.texi:479
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{errcatch}\n"
"@deffn {Function} errcatch (@var{expr_1}, @dots{}, @var{expr_n})\n"
msgstr ""

#: Program.texi:485
msgid ""
"Evaluates @var{expr_1}, @dots{}, @var{expr_n} one by one and\n"
"returns @code{[@var{expr_n}]} (a list) if no error occurs.  If an\n"
"error occurs in the evaluation of any argument, @code{errcatch} \n"
"prevents the error from propagating and\n"
"returns the empty list @code{[]} without evaluating any more arguments.\n"
msgstr ""

#: Program.texi:489
msgid ""
"@code{errcatch}\n"
"is useful in @code{batch} files where one suspects an error might occur which\n"
"would terminate the @code{batch} if the error weren't caught.\n"
msgstr ""

#: Program.texi:494
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Program.texi:499
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{error}\n"
"@deffn  {Function} error (@var{expr_1}, @dots{}, @var{expr_n})\n"
"@deffnx {System variable} error\n"
msgstr ""

#: Program.texi:503
msgid ""
"Evaluates and prints @var{expr_1}, @dots{}, @var{expr_n},\n"
"and then causes an error return to top level Maxima\n"
"or to the nearest enclosing @code{errcatch}.\n"
msgstr ""

#: Program.texi:508
msgid ""
"The variable @code{error} is set to a list describing the error.\n"
"The first element of @code{error} is a format string, which merges all the\n"
"strings among the arguments @var{expr_1}, @dots{}, @var{expr_n},\n"
"and the remaining elements are the values of any non-string arguments.\n"
msgstr ""

#: Program.texi:511
msgid ""
"@code{errormsg()} formats and prints @code{error}.\n"
"This is effectively reprinting the most recent error message.\n"
msgstr ""

#: Program.texi:516
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 2
msgstr ""

#: Program.texi:521
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{error_size}\n"
"@defvr {Option variable} error_size\n"
"Default value: 10\n"
msgstr ""

#: Program.texi:527
msgid ""
"@code{error_size} modifies error messages according to the size of expressions\n"
"which appear in them.  If the size of an expression (as determined by the Lisp\n"
"function @code{ERROR-SIZE}) is greater than @code{error_size}, the expression is\n"
"replaced in the message by a symbol, and the symbol is assigned the expression.\n"
"The symbols are taken from the list @code{error_syms}.\n"
msgstr ""

#: Program.texi:530
msgid ""
"Otherwise, the expression is smaller than @code{error_size}, and the expression\n"
"is displayed in the message.\n"
msgstr ""

#: Program.texi:532
msgid ""
"See also @mref{error} and @mrefdot{error_syms}\n"
msgstr ""

#: Program.texi:541
msgid ""
"Example:\n"
"@c OUTPUT GENERATED BY THE FOLLOWING\n"
"@c U: (C^D^E + B + A)/(cos(X-1) + 1)$\n"
"@c error_size: 20$\n"
"@c error (\"Example expression is\", U);\n"
"@c errexp1;\n"
"@c error_size: 30$\n"
"@c error (\"Example expression is\", U);\n"
msgstr ""

#: Program.texi:543
msgid ""
"The size of @code{U}, as determined by @code{ERROR-SIZE}, is 24.\n"
msgstr ""

#: Program.texi:546
msgid ""
"@example\n"
"(%i1) U: (C^D^E + B + A)/(cos(X-1) + 1)$\n"
msgstr ""

#: Program.texi:548
msgid ""
"(%i2) error_size: 20$\n"
msgstr ""

#: Program.texi:550
msgid ""
"(%i3) error (\"Example expression is\", U);\n"
msgstr ""

#: Program.texi:560
msgid ""
"Example expression is errexp1\n"
" -- an error.  Quitting.  To debug this try debugmode(true);\n"
"(%i4) errexp1;\n"
"                            E\n"
"                           D\n"
"                          C   + B + A\n"
"(%o4)                    --------------\n"
"                         cos(X - 1) + 1\n"
"(%i5) error_size: 30$\n"
msgstr ""

#: Program.texi:562
msgid ""
"(%i6) error (\"Example expression is\", U);\n"
msgstr ""

#: Program.texi:570
msgid ""
"                         E\n"
"                        D\n"
"                       C   + B + A\n"
"Example expression is --------------\n"
"                      cos(X - 1) + 1\n"
" -- an error.  Quitting.  To debug this try debugmode(true);\n"
"@end example\n"
msgstr ""

#: Program.texi:575
msgid ""
"@opencatbox\n"
"@category{Debugging} @category{Display flags and variables}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

#: Program.texi:580
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{error_syms}\n"
"@defvr {Option variable} error_syms\n"
"Default value: @code{[errexp1, errexp2, errexp3]}\n"
msgstr ""

#: Program.texi:585
msgid ""
"In error messages, expressions larger than @code{error_size} are replaced by\n"
"symbols, and the symbols are set to the expressions.  The symbols are taken from\n"
"the list @code{error_syms}.  The first too-large expression is replaced by\n"
"@code{error_syms[1]}, the second by @code{error_syms[2]}, and so on.\n"
msgstr ""

#: Program.texi:589
msgid ""
"If there are more too-large expressions than there are elements of\n"
"@code{error_syms}, symbols are constructed automatically, with the @var{n}-th\n"
"symbol equivalent to @code{concat ('errexp, @var{n})}.\n"
msgstr ""

#: Program.texi:591
msgid ""
"See also @mref{error} and @mrefdot{error_size}\n"
msgstr ""

#: Program.texi:596
msgid ""
"@opencatbox\n"
"@category{Debugging} @category{Display flags and variables}\n"
"@closecatbox\n"
"@end defvr\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Program.texi:600
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{errormsg_fn}\n"
"@deffn {Function} errormsg ()\n"
msgstr ""

#: Program.texi:604
msgid ""
"Reprints the most recent error message.\n"
"The variable @code{error} holds the message,\n"
"and @code{errormsg} formats and prints it.\n"
msgstr ""

#: Program.texi:609
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 3
msgstr ""

#: Program.texi:614
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{option_errormsg}\n"
"@defvr {Option variable} errormsg\n"
"Default value: @code{true}\n"
msgstr ""

#: Program.texi:616
msgid ""
"When @code{false} the output of error messages is suppressed.\n"
msgstr ""

#: Program.texi:619
msgid ""
"The option variable @code{errormsg} can not be set in a block to a local \n"
"value.  The global value of @code{errormsg} is always present.\n"
msgstr ""

#: Program.texi:645
msgid ""
"@c ===beg===\n"
"@c errormsg;\n"
"@c sin(a,b);\n"
"@c errormsg:false;\n"
"@c sin(a,b);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) errormsg;\n"
"(%o1)                         true\n"
"@end group\n"
"@group\n"
"(%i2) sin(a,b);\n"
"sin: wrong number of arguments.\n"
" -- an error. To debug this try: debugmode(true);\n"
"@end group\n"
"@group\n"
"(%i3) errormsg:false;\n"
"(%o3)                         false\n"
"@end group\n"
"@group\n"
"(%i4) sin(a,b);\n"
" -- an error. To debug this try: debugmode(true);\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Program.texi:647
msgid ""
"The option variable @code{errormsg} can not be set in a block to a local value.\n"
msgstr ""

#: Program.texi:676
msgid ""
"@c ===beg===\n"
"@c f(bool):=block([errormsg:bool], print (\"value of errormsg is\",errormsg))$\n"
"@c errormsg:true;\n"
"@c f(false);\n"
"@c errormsg:false;\n"
"@c f(true);\n"
"@c ===end===\n"
"@example\n"
"(%i1) f(bool):=block([errormsg:bool], print (\"value of errormsg is\",errormsg))$\n"
"@group\n"
"(%i2) errormsg:true;\n"
"(%o2)                         true\n"
"@end group\n"
"@group\n"
"(%i3) f(false);\n"
"value of errormsg is true \n"
"(%o3)                         true\n"
"@end group\n"
"@group\n"
"(%i4) errormsg:false;\n"
"(%o4)                         false\n"
"@end group\n"
"@group\n"
"(%i5) f(true);\n"
"value of errormsg is false \n"
"(%o5)                         false\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Program.texi:681
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

#: Program.texi:685
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{go}\n"
"@deffn {Function} go (@var{tag})\n"
msgstr ""

#: Program.texi:690
msgid ""
"is used within a @code{block} to transfer control to the statement\n"
"of the block which is tagged with the argument to @code{go}.  To tag a\n"
"statement, precede it by an atomic argument as another statement in\n"
"the @code{block}.  For example:\n"
msgstr ""

#: Program.texi:694
msgid ""
"@example\n"
"block ([x], x:1, loop, x+1, ..., go(loop), ...)\n"
"@end example\n"
msgstr ""

#: Program.texi:698
msgid ""
"The argument to @code{go} must be the name of a tag appearing in the same\n"
"@code{block}.  One cannot use @code{go} to transfer to tag in a @code{block}\n"
"other than the one containing the @code{go}.\n"
msgstr ""

#: Program.texi:703
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 4
msgstr ""

#: Program.texi:706
msgid ""
"@c NEEDS CLARIFICATION, EXPANSION, EXAMPLES\n"
"@c THIS ITEM IS IMPORTANT\n"
msgstr ""

#: Program.texi:710
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{if}\n"
"@deffn {Special operator} if\n"
msgstr ""

#: Program.texi:713
msgid ""
"Represents conditional evaluation.  Various forms of @code{if} expressions are\n"
"recognized.\n"
msgstr ""

#: Program.texi:717
msgid ""
"@code{if @var{cond_1} then @var{expr_1} else @var{expr_0}}\n"
"eva@-lu@-ates to @var{expr_1} if @var{cond_1} evaluates to @code{true},\n"
"otherwise the expression evaluates to @var{expr_0}.\n"
msgstr ""

#: Program.texi:723
msgid ""
"The command @code{if @var{cond_1} then @var{expr_1} elseif @var{cond_2} then\n"
"@var{expr_2} elseif ... else @var{expr_0}} evaluates to @var{expr_k} if\n"
"@var{cond_k} is @code{true} and all preceding conditions are @code{false}.  If\n"
"none of the conditions are @code{true}, the expression evaluates to\n"
"@code{expr_0}.\n"
msgstr ""

#: Program.texi:730
msgid ""
"A trailing @code{else false} is assumed if @code{else} is missing.  That is,\n"
"the command @code{if @var{cond_1} then @var{expr_1}} is equivalent to\n"
"@code{if @var{cond_1} then @var{expr_1} else false}, and the command\n"
"@code{if @var{cond_1} then @var{expr_1} elseif ... elseif @var{cond_n} then\n"
"@var{expr_n}} is equivalent to @code{if @var{cond_1} then @var{expr_1} elseif \n"
"... elseif @var{cond_n} then @var{expr_n} else false}.\n"
msgstr ""

#: Program.texi:735
msgid ""
"The alternatives @var{expr_0}, @dots{}, @var{expr_n} may be any Maxima\n"
"expressions, including nested @code{if} expressions.  The alternatives are\n"
"neither simplified nor evaluated unless the corresponding condition is\n"
"@code{true}.\n"
msgstr ""

#: Program.texi:744
msgid ""
"The conditions @var{cond_1}, @dots{}, @var{cond_n} are expressions which\n"
"potentially or actually evaluate to @code{true} or @code{false}.\n"
"When a condition does not actually evaluate to @code{true} or @code{false},\n"
"the behavior of @code{if} is governed by the global flag @code{prederror}.\n"
"When @code{prederror} is @code{true}, it is an error if any evaluated condition\n"
"does not evaluate to @code{true} or @code{false}.  Otherwise, conditions which\n"
"do not evaluate to @code{true} or @code{false} are accepted, and the result is\n"
"a conditional expression.\n"
msgstr ""

#: Program.texi:747
msgid ""
"Among other elements, conditions may comprise relational and logical operators\n"
"as follows.\n"
msgstr ""

#: Program.texi:767
msgid ""
"@c - SEEMS LIKE THIS TABLE WANTS TO BE IN A DISCUSSION OF PREDICATE FUNCTIONS; PRESENT LOCATION IS OK I GUESS\n"
"@c - REFORMAT THIS TABLE USING TEXINFO MARKUP (MAYBE)\n"
"@example\n"
"Operation            Symbol      Type\n"
" \n"
"less than            <           relational infix\n"
"less than            <=\n"
"  or equal to                    relational infix\n"
"equality (syntactic) =           relational infix\n"
"negation of =        #           relational infix\n"
"equality (value)     equal       relational function\n"
"negation of equal    notequal    relational function\n"
"greater than         >=\n"
"  or equal to                    relational infix\n"
"greater than         >           relational infix\n"
"and                  and         logical infix\n"
"or                   or          logical infix\n"
"not                  not         logical prefix\n"
"@end example\n"
msgstr ""

#: Program.texi:772
msgid ""
"@opencatbox\n"
"@category{Programming} @category{Predicate functions}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Program.texi:775
msgid ""
"@c NEEDS CLARIFICATION\n"
"@c THIS ITEM IS IMPORTANT\n"
msgstr ""

#: Program.texi:779
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{map}\n"
"@deffn {Function} map (@var{f}, @var{expr_1}, @dots{}, @var{expr_n})\n"
msgstr ""

#: Program.texi:785
msgid ""
"Returns an expression whose leading operator is the same as that of the\n"
"expressions @var{expr_1}, @dots{}, @var{expr_n} but whose subparts are the\n"
"results of applying @var{f} to the corresponding subparts of the expressions.\n"
"@var{f} is either the name of a function of @math{n} arguments or is a\n"
"@code{lambda} form of @math{n} arguments.\n"
msgstr ""

#: Program.texi:793
msgid ""
"@code{maperror} - if @code{false} will cause all of the mapping\n"
"functions to (1) stop when they finish going down the shortest\n"
"@var{expr_i} if not all of the @var{expr_i} are of the same length and\n"
"(2) apply @var{f} to [@var{expr_1}, @var{expr_2}, @dots{}]  if the\n"
"@var{expr_i} are not all the same type of object.  If @code{maperror}\n"
"is @code{true} then an error message will be given in the above two\n"
"instances.\n"
msgstr ""

#: Program.texi:798
msgid ""
"One of the uses of this function is to @code{map} a function (e.g.\n"
"@code{partfrac}) onto each term of a very large expression where it ordinarily\n"
"wouldn't be possible to use the function on the entire expression due to an\n"
"exhaustion of list storage space in the course of the computation.\n"
msgstr ""

#: Program.texi:800
msgid ""
"See also @mrefcomma{scanmap} @mrefcomma{maplist} @mrefcomma{outermap} @mref{matrixmap} and @mrefdot{apply}\n"
msgstr ""

#: Program.texi:817
msgid ""
"@c IN THESE EXAMPLES, SPELL OUT WHAT IS THE MAIN OPERATOR \n"
"@c AND SHOW HOW THE RESULT FOLLOWS FROM THE DESCRIPTION STATED IN THE FIRST PARAGRAPH\n"
"@example\n"
"(%i1) map(f,x+a*y+b*z);\n"
"(%o1)                        f(b z) + f(a y) + f(x)\n"
"(%i2) map(lambda([u],partfrac(u,x)),x+1/(x^3+4*x^2+5*x+2));\n"
"                           1       1        1\n"
"(%o2)                     ----- - ----- + -------- + x\n"
"                         x + 2   x + 1          2\n"
"                                         (x + 1)\n"
"(%i3) map(ratsimp, x/(x^2+x)+(y^2+y)/y);\n"
"                                      1\n"
"(%o3)                            y + ----- + 1\n"
"                                    x + 1\n"
"(%i4) map(\"=\",[a,b],[-0.5,3]);\n"
"(%o4)                          [a = - 0.5, b = 3]\n"
msgstr ""

#: Program.texi:820
msgid ""
"@end example\n"
msgstr ""

#: Program.texi:825
msgid ""
"@opencatbox\n"
"@category{Function application}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Program.texi:829
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{mapatom}\n"
"@deffn {Function} mapatom (@var{expr})\n"
msgstr ""

#: Program.texi:834
msgid ""
"Returns @code{true} if and only if @var{expr} is treated by the mapping\n"
"routines as an atom.  \"Mapatoms\" are atoms, numbers\n"
"(including rational numbers), and subscripted variables.\n"
"@c WHAT ARE \"THE MAPPING ROUTINES\", AND WHY DO THEY HAVE A SPECIALIZED NOTION OF ATOMS ??\n"
msgstr ""

#: Program.texi:839
msgid ""
"@opencatbox\n"
"@category{Predicate functions}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

#: Program.texi:841
msgid ""
"@c NEEDS CLARIFICATION\n"
msgstr ""

#: Program.texi:846
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{maperror}\n"
"@defvr {Option variable} maperror\n"
"Default value: @code{true}\n"
msgstr ""

#: Program.texi:849
msgid ""
"When @code{maperror} is @code{false}, causes all of the mapping functions,\n"
"for example\n"
msgstr ""

#: Program.texi:853
msgid ""
"@example\n"
"map (@var{f}, @var{expr_1}, @var{expr_2}, ...)\n"
"@end example\n"
msgstr ""

#: Program.texi:858
msgid ""
"to (1) stop when they finish going down the shortest @var{expr_i} if\n"
"not all of the @var{expr_i} are of the same length and (2) apply\n"
"@var{f} to [@var{expr_1}, @var{expr_2}, @dots{}] if the @var{expr_i} are\n"
"not all the same type of object.\n"
msgstr ""

#: Program.texi:861
msgid ""
"If @code{maperror} is @code{true} then an error message\n"
"is displayed in the above two instances.\n"
msgstr ""

#: Program.texi:866
msgid ""
"@opencatbox\n"
"@category{Function application}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

#: Program.texi:871
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{mapprint}\n"
"@defvr {Option variable} mapprint\n"
"Default value: @code{true}\n"
msgstr ""

#: Program.texi:876
msgid ""
"When @code{mapprint} is @code{true}, various information messages from\n"
"@code{map}, @code{maplist}, and @code{fullmap} are produced in certain\n"
"situations.  These include situations where @code{map} would use\n"
"@code{apply}, or @code{map} is truncating on the shortest list.\n"
msgstr ""

#: Program.texi:878
msgid ""
"If @code{mapprint} is @code{false}, these messages are suppressed.\n"
msgstr ""

#: Program.texi:883
msgid ""
"@opencatbox\n"
"@category{Function application}\n"
"@closecatbox\n"
"@end defvr\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Program.texi:885
msgid ""
"@c NEEDS CLARIFICATION\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Program.texi:889
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{maplist}\n"
"@deffn {Function} maplist (@var{f}, @var{expr_1}, @dots{}, @var{expr_n})\n"
msgstr ""

#: Program.texi:893
msgid ""
"Returns a list of the applications of @var{f} to the parts of the expressions\n"
"@var{expr_1}, @dots{}, @var{expr_n}.  @var{f} is the name of a function, or a\n"
"lambda expression.\n"
msgstr ""

#: Program.texi:897
msgid ""
"@code{maplist} differs from @code{map(@var{f}, @var{expr_1}, ..., @var{expr_n})}\n"
"which returns an expression with the same main operator as @var{expr_i} has\n"
"(except for simplifications and the case where @code{map} does an @code{apply}).\n"
msgstr ""

#: Program.texi:902
msgid ""
"@opencatbox\n"
"@category{Function application}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Program.texi:904
msgid ""
"@c NEEDS CLARIFICATION\n"
@c Occurrences of paragraphs with this contents up to now: 2
msgstr ""

#: Program.texi:909
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{prederror}\n"
"@defvr {Option variable} prederror\n"
"Default value: @code{false}\n"
msgstr ""

#: Program.texi:913
msgid ""
"When @code{prederror} is @code{true}, an error message is displayed whenever the\n"
"predicate of an @code{if} statement or an @code{is} function fails to evaluate\n"
"to either @code{true} or @code{false}.\n"
msgstr ""

#: Program.texi:918
msgid ""
"If @code{false}, @code{unknown} is returned\n"
"instead in this case.  The @code{prederror: false} mode is not supported in\n"
"translated code;\n"
"however, @code{maybe} is supported in translated code.\n"
msgstr ""

#: Program.texi:920
msgid ""
"See also @mref{is} and @mrefdot{maybe}\n"
msgstr ""

#: Program.texi:924
msgid ""
"@opencatbox\n"
"@category{Programming} @category{Predicate functions}\n"
"@closecatbox\n"
msgstr ""

#: Program.texi:926
msgid ""
"@end defvr\n"
msgstr ""

#: Program.texi:935
msgid ""
"@anchor{return}\n"
"@deffn {Function} return (@var{value})\n"
"May be used to exit explicitly from the current @mrefcomma{block} @mrefcomma{while}\n"
"@mref{for} or @mref{do} loop bringing its argument. It therefore can be compared\n"
"with the @code{return} statement found in other programming languages but it yields\n"
"one difference: In maxima only returns from the current block, not from the entire\n"
"function it was called in. In this aspect it more closely resembles the @code{break}\n"
"statement from C.\n"
msgstr ""

#: Program.texi:988
msgid ""
"@c ===beg===\n"
"@c for i:1 thru 10 do o:i;\n"
"@c for i:1 thru 10 do if i=3 then return(i);\n"
"@c for i:1 thru 10 do \n"
"@c     (\n"
"@c         block([i],\n"
"@c             i:3,\n"
"@c             return(i)\n"
"@c         ), \n"
"@c         return(8)\n"
"@c     );\n"
"@c block([i],\n"
"@c     i:4,\n"
"@c     block([o],\n"
"@c         o:5,\n"
"@c         return(o)\n"
"@c     ),\n"
"@c     return(i),\n"
"@c     return(10)\n"
"@c  );\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) for i:1 thru 10 do o:i;\n"
"(%o1)                         done\n"
"@end group\n"
"@group\n"
"(%i2) for i:1 thru 10 do if i=3 then return(i);\n"
"(%o2)                           3\n"
"@end group\n"
"@group\n"
"(%i3) for i:1 thru 10 do\n"
"    (\n"
"        block([i],\n"
"            i:3,\n"
"            return(i)\n"
"        ),\n"
"        return(8)\n"
"    );\n"
"(%o3)                           8\n"
"@end group\n"
"(%i4) block([i],\n"
"    i:4,\n"
"    block([o],\n"
"        o:5,\n"
"        return(o)\n"
"    ),\n"
"    return(i),\n"
"    return(10)\n"
" );\n"
"(%o4)                           4\n"
"@end example\n"
msgstr ""

#: Program.texi:991
msgid ""
"See also @mrefcomma{for} @mrefcomma{while} @mref{do} and @mref{block}.\n"
msgstr ""

#: Program.texi:996
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 5
msgstr ""

#: Program.texi:1002
msgid ""
"@c NEEDS CLARIFICATION\n"
"@anchor{scanmap}\n"
"@deffn {Function} scanmap @\n"
"@fname{scanmap} (@var{f}, @var{expr}) @\n"
"@fname{scanmap} (@var{f}, @var{expr}, bottomup)\n"
msgstr ""

#: Program.texi:1006
msgid ""
"Recursively applies @var{f} to @var{expr}, in a top\n"
"down manner.  This is most useful when complete factorization is\n"
"desired, for example:\n"
msgstr ""

#: Program.texi:1013
msgid ""
"@example\n"
"(%i1) exp:(a^2+2*a+1)*y + x^2$\n"
"(%i2) scanmap(factor,exp);\n"
"                                    2      2\n"
"(%o2)                         (a + 1)  y + x\n"
"@end example\n"
msgstr ""

#: Program.texi:1019
msgid ""
"Note the way in which @code{scanmap} applies the given function\n"
"@code{factor} to the constituent subexpressions of @var{expr}; if\n"
"another form of @var{expr} is presented to @code{scanmap} then the\n"
"result may be different.  Thus, @code{%o2} is not recovered when\n"
"@code{scanmap} is applied to the expanded form of @code{exp}:\n"
msgstr ""

#: Program.texi:1025
msgid ""
"@example\n"
"(%i3) scanmap(factor,expand(exp));\n"
"                           2                  2\n"
"(%o3)                      a  y + 2 a y + y + x\n"
"@end example\n"
msgstr ""

#: Program.texi:1028
msgid ""
"Here is another example of the way in which @code{scanmap} recursively\n"
"applies a given function to all subexpressions, including exponents:\n"
msgstr ""

#: Program.texi:1035
msgid ""
"@example\n"
"(%i4) expr : u*v^(a*x+b) + c$\n"
"(%i5) scanmap('f, expr);\n"
"                    f(f(f(a) f(x)) + f(b))\n"
"(%o5) f(f(f(u) f(f(v)                      )) + f(c))\n"
"@end example\n"
msgstr ""

#: Program.texi:1038
msgid ""
"@code{scanmap (@var{f}, @var{expr}, bottomup)} applies @var{f} to @var{expr} in a\n"
"bottom-up manner.  E.g., for undefined @code{f},\n"
msgstr ""

#: Program.texi:1046
msgid ""
"@example\n"
"scanmap(f,a*x+b) ->\n"
"   f(a*x+b) -> f(f(a*x)+f(b)) -> f(f(f(a)*f(x))+f(b))\n"
"scanmap(f,a*x+b,bottomup) -> f(a)*f(x)+f(b)\n"
"    -> f(f(a)*f(x))+f(b) ->\n"
"     f(f(f(a)*f(x))+f(b))\n"
"@end example\n"
msgstr ""

#: Program.texi:1049
msgid ""
"In this case, you get the same answer both\n"
"ways.\n"
msgstr ""

#: Program.texi:1054
msgid ""
"@opencatbox\n"
"@category{Function application}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 2
msgstr ""

#: Program.texi:1058
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{throw}\n"
"@deffn {Function} throw (@var{expr})\n"
msgstr ""

#: Program.texi:1062
msgid ""
"Evaluates @var{expr} and throws the value back to the most recent\n"
"@code{catch}.  @code{throw} is used with @code{catch} as a nonlocal return\n"
"mechanism.\n"
msgstr ""

#: Program.texi:1067
msgid ""
"@opencatbox\n"
"@category{Programming}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 6
msgstr ""

#: Program.texi:1071
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{outermap}\n"
"@deffn {Function} outermap (@var{f}, @var{a_1}, @dots{}, @var{a_n})\n"
msgstr ""

#: Program.texi:1074
msgid ""
"Applies the function @var{f} to each one of the elements of the outer product\n"
"@var{a_1} cross @var{a_2} @dots{} cross @var{a_n}.\n"
msgstr ""

#: Program.texi:1078
msgid ""
"@var{f} is the name of a function of @math{n} arguments or a lambda expression\n"
"of @math{n} arguments.  Each argument @var{a_k} may be a list or nested list,\n"
"or a matrix, or any other kind of expression.\n"
msgstr ""

#: Program.texi:1089
msgid ""
"The @code{outermap} return value is a nested structure.  Let @var{x} be the\n"
"return value.  Then @var{x} has the same structure as the first list, nested\n"
"list, or matrix argument, @code{@var{x}[i_1]...[i_m]} has the same structure as\n"
"the second list, nested list, or matrix argument,\n"
"@code{@var{x}[i_1]...[i_m][j_1]...[j_n]} has the same structure as the third\n"
"list, nested list, or matrix argument, and so on, where @var{m}, @var{n},\n"
"@dots{} are the numbers of indices required to access the elements of each\n"
"argument (one for a list, two for a matrix, one or more for a nested list).\n"
"Arguments which are not lists or matrices have no effect on the structure of\n"
"the return value.\n"
msgstr ""

#: Program.texi:1094
msgid ""
"Note that the effect of @code{outermap} is different from that of applying\n"
"@var{f} to each one of the elements of the outer product returned by\n"
"@code{cartesian_product}.  @code{outermap} preserves the structure of the\n"
"arguments in the return value, while @code{cartesian_product} does not.\n"
msgstr ""

#: Program.texi:1096
msgid ""
"@code{outermap} evaluates its arguments.\n"
msgstr ""

#: Program.texi:1099
msgid ""
"See also @mrefcomma{map} @mrefcomma{maplist} and @mrefdot{apply}\n"
"@c CROSS REF OTHER FUNCTIONS HERE ??\n"
msgstr ""

#: Program.texi:1101
msgid ""
"Examples:\n"
@c Occurrences of paragraphs with this contents up to now: 1
msgstr ""

#: Program.texi:1104
msgid ""
"Elementary examples of @code{outermap}.\n"
"To show the argument combinations more clearly, @code{F} is left undefined.\n"
msgstr ""

#: Program.texi:1149
msgid ""
"@c ===beg===\n"
"@c outermap (F, [a, b, c], [1, 2, 3]);\n"
"@c outermap (F, matrix ([a, b], [c, d]), matrix ([1, 2], [3, 4]));\n"
"@c outermap (F, [a, b], x, matrix ([1, 2], [3, 4]));\n"
"@c outermap (F, [a, b], matrix ([1, 2]), matrix ([x], [y]));\n"
"@c outermap (\"+\", [a, b, c], [1, 2, 3]);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) outermap (F, [a, b, c], [1, 2, 3]);\n"
"(%o1) [[F(a, 1), F(a, 2), F(a, 3)], [F(b, 1), F(b, 2), F(b, 3)], \n"
"                                     [F(c, 1), F(c, 2), F(c, 3)]]\n"
"@end group\n"
"@group\n"
"(%i2) outermap (F, matrix ([a, b], [c, d]), matrix ([1, 2], [3, 4]));\n"
"         [ [ F(a, 1)  F(a, 2) ]  [ F(b, 1)  F(b, 2) ] ]\n"
"         [ [                  ]  [                  ] ]\n"
"         [ [ F(a, 3)  F(a, 4) ]  [ F(b, 3)  F(b, 4) ] ]\n"
"(%o2)    [                                            ]\n"
"         [ [ F(c, 1)  F(c, 2) ]  [ F(d, 1)  F(d, 2) ] ]\n"
"         [ [                  ]  [                  ] ]\n"
"         [ [ F(c, 3)  F(c, 4) ]  [ F(d, 3)  F(d, 4) ] ]\n"
"@end group\n"
"@group\n"
"(%i3) outermap (F, [a, b], x, matrix ([1, 2], [3, 4]));\n"
"       [ F(a, x, 1)  F(a, x, 2) ]  [ F(b, x, 1)  F(b, x, 2) ]\n"
"(%o3) [[                        ], [                        ]]\n"
"       [ F(a, x, 3)  F(a, x, 4) ]  [ F(b, x, 3)  F(b, x, 4) ]\n"
"@end group\n"
"@group\n"
"(%i4) outermap (F, [a, b], matrix ([1, 2]), matrix ([x], [y]));\n"
"       [ [ F(a, 1, x) ]  [ F(a, 2, x) ] ]\n"
"(%o4) [[ [            ]  [            ] ], \n"
"       [ [ F(a, 1, y) ]  [ F(a, 2, y) ] ]\n"
"                              [ [ F(b, 1, x) ]  [ F(b, 2, x) ] ]\n"
"                              [ [            ]  [            ] ]]\n"
"                              [ [ F(b, 1, y) ]  [ F(b, 2, y) ] ]\n"
"@end group\n"
"@group\n"
"(%i5) outermap (\"+\", [a, b, c], [1, 2, 3]);\n"
"(%o5) [[a + 1, a + 2, a + 3], [b + 1, b + 2, b + 3], \n"
"                                           [c + 1, c + 2, c + 3]]\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Program.texi:1155
msgid ""
"A closer examination of the @code{outermap} return value.  The first, second,\n"
"and third arguments are a matrix, a list, and a matrix, respectively.\n"
"The return value is a matrix.\n"
"Each element of that matrix is a list,\n"
"and each element of each list is a matrix.\n"
msgstr ""

#: Program.texi:1226
msgid ""
"@c ===beg===\n"
"@c arg_1 :  matrix ([a, b], [c, d]);\n"
"@c arg_2 : [11, 22];\n"
"@c arg_3 : matrix ([xx, yy]);\n"
"@c xx_0 : outermap (lambda ([x, y, z], x / y + z), arg_1, \n"
"@c                                                    arg_2, arg_3);\n"
"@c xx_1 : xx_0 [1][1];\n"
"@c xx_2 : xx_0 [1][1] [1];\n"
"@c xx_3 : xx_0 [1][1] [1] [1][1];\n"
"@c [op (arg_1), op (arg_2), op (arg_3)];\n"
"@c [op (xx_0), op (xx_1), op (xx_2)];\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) arg_1 :  matrix ([a, b], [c, d]);\n"
"                            [ a  b ]\n"
"(%o1)                       [      ]\n"
"                            [ c  d ]\n"
"@end group\n"
"@group\n"
"(%i2) arg_2 : [11, 22];\n"
"(%o2)                       [11, 22]\n"
"@end group\n"
"@group\n"
"(%i3) arg_3 : matrix ([xx, yy]);\n"
"(%o3)                      [ xx  yy ]\n"
"@end group\n"
"(%i4) xx_0 : outermap (lambda ([x, y, z], x / y + z), arg_1,\n"
"                                                   arg_2, arg_3);\n"
"               [  [      a        a  ]  [      a        a  ]  ]\n"
"               [ [[ xx + --  yy + -- ], [ xx + --  yy + -- ]] ]\n"
"               [  [      11       11 ]  [      22       22 ]  ]\n"
"(%o4)  Col 1 = [                                              ]\n"
"               [  [      c        c  ]  [      c        c  ]  ]\n"
"               [ [[ xx + --  yy + -- ], [ xx + --  yy + -- ]] ]\n"
"               [  [      11       11 ]  [      22       22 ]  ]\n"
"                 [  [      b        b  ]  [      b        b  ]  ]\n"
"                 [ [[ xx + --  yy + -- ], [ xx + --  yy + -- ]] ]\n"
"                 [  [      11       11 ]  [      22       22 ]  ]\n"
"         Col 2 = [                                              ]\n"
"                 [  [      d        d  ]  [      d        d  ]  ]\n"
"                 [ [[ xx + --  yy + -- ], [ xx + --  yy + -- ]] ]\n"
"                 [  [      11       11 ]  [      22       22 ]  ]\n"
"@group\n"
"(%i5) xx_1 : xx_0 [1][1];\n"
"           [      a        a  ]  [      a        a  ]\n"
"(%o5)     [[ xx + --  yy + -- ], [ xx + --  yy + -- ]]\n"
"           [      11       11 ]  [      22       22 ]\n"
"@end group\n"
"@group\n"
"(%i6) xx_2 : xx_0 [1][1] [1];\n"
"                      [      a        a  ]\n"
"(%o6)                 [ xx + --  yy + -- ]\n"
"                      [      11       11 ]\n"
"@end group\n"
"@group\n"
"(%i7) xx_3 : xx_0 [1][1] [1] [1][1];\n"
"                                  a\n"
"(%o7)                        xx + --\n"
"                                  11\n"
"@end group\n"
"@group\n"
"(%i8) [op (arg_1), op (arg_2), op (arg_3)];\n"
"(%o8)                  [matrix, [, matrix]\n"
"@end group\n"
"@group\n"
"(%i9) [op (xx_0), op (xx_1), op (xx_2)];\n"
"(%o9)                  [matrix, [, matrix]\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Program.texi:1229
msgid ""
"@code{outermap} preserves the structure of the arguments in the return value,\n"
"while @code{cartesian_product} does not.\n"
msgstr ""

#: Program.texi:1259
msgid ""
"@c ===beg===\n"
"@c outermap (F, [a, b, c], [1, 2, 3]);\n"
"@c setify (flatten (%));\n"
"@c map (lambda ([L], apply (F, L)), \n"
"@c                      cartesian_product ({a, b, c}, {1, 2, 3}));\n"
"@c is (equal (%, %th (2)));\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) outermap (F, [a, b, c], [1, 2, 3]);\n"
"(%o1) [[F(a, 1), F(a, 2), F(a, 3)], [F(b, 1), F(b, 2), F(b, 3)], \n"
"                                     [F(c, 1), F(c, 2), F(c, 3)]]\n"
"@end group\n"
"@group\n"
"(%i2) setify (flatten (%));\n"
"(%o2) @{F(a, 1), F(a, 2), F(a, 3), F(b, 1), F(b, 2), F(b, 3), \n"
"                                       F(c, 1), F(c, 2), F(c, 3)@}\n"
"@end group\n"
"@group\n"
"(%i3) map (lambda ([L], apply (F, L)),\n"
"                     cartesian_product (@{a, b, c@}, @{1, 2, 3@}));\n"
"(%o3) @{F(a, 1), F(a, 2), F(a, 3), F(b, 1), F(b, 2), F(b, 3), \n"
"                                       F(c, 1), F(c, 2), F(c, 3)@}\n"
"@end group\n"
"@group\n"
"(%i4) is (equal (%, %th (2)));\n"
"(%o4)                         true\n"
"@end group\n"
"@end example\n"
msgstr ""

#: Program.texi:1264
msgid ""
"@opencatbox\n"
"@category{Function application}\n"
"@closecatbox\n"
"@end deffn\n"
@c Occurrences of paragraphs with this contents up to now: 3
msgstr ""
