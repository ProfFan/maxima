@c This file has been autogenerated from a .po file containing translations.
@node Einfhrung fr Celine
@section Einfhrung fr Celine
Eine Implementierung der Methode von Schwester Celine. Sie wurde von Barton 
Willis
geschrieben und unter der
@uref{https://creativecommons.org/about/cc0,Creative Commons CC0 Lizenz} 
verffentlicht.
Die Methode von Schwester Celine wird in den Kapiteln4.1--4.4 des Buches 
\"A=B\" von
Marko Petkovsek, Herbert S. Wilf und Doron Zeilberger beschrieben. Das Buch 
ist unter
@uref{http://www.math.rutgers.edu/~zeilberg/AeqB.pdf} erhltlich.
Mit f = F(n,k) liefert die Funktion celine liefert einen Satz an rekursiven 
Verbindungen
fr F in der folgenden Form:
    p_0(n) * fff(n,k) + p_1(n) * fff(n+1,k) + ... +  p_p(n) * fff(n+p,k+q),
p_0 bis p_p sind dabei Polynome. Wenn es Maxima nicht gelingt, eine 
rationale Funktion
sum(sum(a(i,j) * F(n+i,k+j),i,0,p),j,0,q) / F(n,k) von n und k zu finden, 
wird eine leere
Menge zurckgeliefert.
Falls f Parameter auer n und k bentigt, kann es geschehen, dass celine 
Annahmen
fr diese Parameter machen. Mittels 'put' kann ber die Eigenschaft 'proviso'
ein Erfragen der anzunehmenden Werte erzwungen werden.
Um diese function verwenden zu knnen mssen die Pakete integer_sequence, 
opsubst und
to_poly_solve geladen sein.
@c ===beg===
@c load(\"integer_sequence\")$
@c load(\"opsubst\")$
@c load(\"to_poly_solve\")$
@c load(\"celine\")$
@c celine(n!,n,k,1,0);
@c ===end===
@example
(%i1) load(\"integer_sequence\")$
(%i2) load(\"opsubst\")$
(%i3) load(\"to_poly_solve\")$
(%i4) load(\"celine\")$
@group
(%i5) celine(n!,n,k,1,0);
(%o5)       @{fff(n + 1, k) - n fff(n, k) - fff(n, k)@}
@end group
@end example
Verification that this result is correct:
@c ===beg===
@c load(\"integer_sequence\")$
@c load(\"opsubst\")$
@c load(\"to_poly_solve\")$
@c load(\"celine\")$
@c g1:{fff(n+1,k)-n*fff(n,k)-fff(n,k)};
@c ratsimp(minfactorial(first(g1))),fff(n,k) := n!;
@c ===end===
@example
(%i1) load(\"integer_sequence\")$
(%i2) load(\"opsubst\")$
(%i3) load(\"to_poly_solve\")$
(%i4) load(\"celine\")$
@group
(%i5) g1:@{fff(n+1,k)-n*fff(n,k)-fff(n,k)@};
(%o5)       @{fff(n + 1, k) - n fff(n, k) - fff(n, k)@}
@end group
@group
(%i6) ratsimp(minfactorial(first(g1))),fff(n,k) := n!;
(%o6)                           0
@end group
@end example
An example with parameters including the test that the result of the 
example
is correct:
@c ===beg===
@c load(\"integer_sequence\")$
@c load(\"opsubst\")$
@c load(\"to_poly_solve\")$
@c load(\"celine\")$
@c e : pochhammer(a,k) * pochhammer(-k,n) / (pochhammer(b,k));
@c recur : celine(e,n,k,2,1);
@c /* Test this result for correctness */
@c first(%), fff(n,k) := ''(e)$
@c makefact(makegamma(%))$
@c minfactorial(factor(minfactorial(factor(%))));
@c ===end===
@example
(%i1) load(\"integer_sequence\")$
(%i2) load(\"opsubst\")$
(%i3) load(\"to_poly_solve\")$
(%i4) load(\"celine\")$
@group
(%i5) e : pochhammer(a,k) * pochhammer(-k,n) / (pochhammer(b,k));
                           (a)  (- k)
                              k      n
(%o5)                      -----------
                              (b)
                                 k
@end group
@group
(%i6) recur : celine(e,n,k,2,1);
(%o6) @{fff(n + 2, k + 1) - fff(n + 2, k) - b fff(n + 1, k + 1)
 + n ((- fff(n + 1, k + 1)) + 2 fff(n + 1, k) - a fff(n, k)
 - fff(n, k)) + a (fff(n + 1, k) - fff(n, k)) + 2 fff(n + 1, k)
    2
 - n  fff(n, k)@}
@end group
(%i7) /* Test this result for correctness */
(%i8) first(%), fff(n,k) := ''(e)$
@group
(%i9) makefact(makegamma(%))$
(%o9)                           0
@end group
(%i10) minfactorial(factor(minfactorial(factor(%))));
@end example
