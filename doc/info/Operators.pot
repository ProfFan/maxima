# SOME DESCRIPTIVE TITLE.">
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF8\n"
"Content-Transfer-Encoding: 8bit\n"
 
# Operators.texi
msgid ""
"@menu     \n"
"* Introduction to operators::      \n"
"* Arithmetic operators::\n"
"* Relational operators::\n"
"* Logical operators::\n"
"* Operators for Equations::\n"
"* Assignment operators::\n"
"* User defined operators::\n"
"@end menu\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Introduction to operators, Arithmetic operators, Operators, Operators\n"
"@section Introduction to operators\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Operators.texi
msgid ""
"It is possible to define new operators with specified precedence, to undefine\n"
"existing operators, or to redefine the precedence of existing operators.  An\n"
"operator may be unary prefix or unary postfix, binary infix, n-ary infix,\n"
"matchfix, or nofix.  \"Matchfix\" means a pair of symbols which enclose their\n"
"argument or arguments, and \"nofix\" means an operator which takes no arguments.\n"
"As examples of the different types of operators, there are the following.\n"
msgstr ""

# Operators.texi
msgid ""
"@table @asis\n"
"@item unary prefix\n"
"negation @code{- a}\n"
"@item unary postfix\n"
"factorial @code{a!}\n"
"@item binary infix\n"
"exponentiation @code{a^b}\n"
"@item n-ary infix\n"
"addition @code{a + b}\n"
"@item matchfix\n"
"list construction @code{[a, b]}\n"
"@end table\n"
msgstr ""

# Operators.texi
msgid ""
"(There are no built-in nofix operators; for an example of such an operator,\n"
"see @code{nofix}.)\n"
msgstr ""

# Operators.texi
msgid ""
"The mechanism to define a new operator is straightforward.  It is only necessary\n"
"to declare a function as an operator; the operator function might or might not\n"
"be defined.\n"
msgstr ""

# Operators.texi
msgid ""
"An example of user-defined operators is the following.  Note that the explicit\n"
"function call @code{\"dd\" (a)} is equivalent to @code{dd a}, likewise\n"
"@code{\"<-\" (a, b)} is equivalent to @code{a <- b}.  Note also that the functions\n"
"@code{\"dd\"} and @code{\"<-\"} are undefined in this example.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c prefix (\"dd\");\n"
"@c dd a;\n"
"@c \"dd\" (a);\n"
"@c infix (\"<-\");\n"
"@c a <- dd b;\n"
"@c \"<-\" (a, \"dd\" (b));\n"
"@c ===end===\n"
"@example\n"
"(%i1) prefix (\"dd\");\n"
"(%o1)                          dd\n"
"(%i2) dd a;\n"
"(%o2)                         dd a\n"
"(%i3) \"dd\" (a);\n"
"(%o3)                         dd a\n"
"(%i4) infix (\"<-\");\n"
"(%o4)                          <-\n"
"(%i5) a <- dd b;\n"
"(%o5)                      a <- dd b\n"
"(%i6) \"<-\" (a, \"dd\" (b));\n"
"(%o6)                      a <- dd b\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"The Maxima functions which define new operators are summarized in this table,\n"
"stating the default left and right binding powers (lbp and rbp, respectively).\n"
"@c REWORK FOLLOWING COMMENT.\n"
"@c IT'S NOT CLEAR ENOUGH, GIVEN THAT IT'S FAIRLY IMPORTANT\n"
"(Binding power determines operator precedence.  However, since left and right\n"
"binding powers can differ, binding power is somewhat more complicated than\n"
"precedence.) Some of the operation definition functions take additional\n"
"arguments; see the function descriptions for details.\n"
msgstr ""

# Operators.texi
msgid ""
"@c MAKE ANCHORS FOR ALL 6 FUNCTIONS AND CHANGE @code TO @ref ACCORDINGLY\n"
"@table @code\n"
"@item prefix\n"
"rbp=180\n"
"@item postfix\n"
"lbp=180\n"
"@item infix\n"
"lbp=180, rbp=180\n"
"@item nary\n"
"lbp=180, rbp=180\n"
"@item matchfix\n"
"(binding power not applicable)\n"
"@item nofix\n"
"(binding power not applicable)\n"
"@end table\n"
msgstr ""

# Operators.texi
msgid ""
"For comparison, here are some built-in operators and their left and right\n"
"binding powers.\n"
msgstr ""

# Operators.texi
msgid ""
"@example\n"
"Operator   lbp     rbp\n"
msgstr ""

# Operators.texi
msgid ""
"  :        180     20 \n"
"  ::       180     20 \n"
"  :=       180     20 \n"
"  ::=      180     20 \n"
"  !        160\n"
"  !!       160\n"
"  ^        140     139 \n"
"  .        130     129 \n"
"  *        120\n"
"  /        120     120 \n"
"  +        100     100 \n"
"  -        100     134 \n"
"  =        80      80 \n"
"  #        80      80 \n"
"  >        80      80 \n"
"  >=       80      80 \n"
"  <        80      80 \n"
"  <=       80      80 \n"
"  not              70 \n"
"  and      65\n"
"  or       60\n"
"  ,        10\n"
"  $        -1\n"
"  ;        -1\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@mref{remove} and @mref{kill} remove operator properties from an atom.\n"
"@code{remove (\"@var{a}\", op)} removes only the operator properties of @var{a}.\n"
"@code{kill (\"@var{a}\")} removes all properties of @var{a}, including the\n"
"operator properties.  Note that the name of the operator must be enclosed in\n"
"quotation marks.\n"
msgstr ""

# Operators.texi
msgid ""
"@c MAYBE COPY THIS EXAMPLE TO remove AND/OR kill\n"
"@c ===beg===\n"
"@c infix (\"##\");\n"
"@c \"##\" (a, b) := a^b;\n"
"@c 5 ## 3;\n"
"@c remove (\"##\", op);\n"
"@c 5 ## 3;\n"
"@c \"##\" (5, 3);\n"
"@c infix (\"##\");\n"
"@c 5 ## 3;\n"
"@c kill (\"##\");\n"
"@c 5 ## 3;\n"
"@c \"##\" (5, 3);\n"
"@c ===end===\n"
"@example\n"
"(%i1) infix (\"##\");\n"
"(%o1)                          ##\n"
"(%i2) \"##\" (a, b) := a^b;\n"
"                                     b\n"
"(%o2)                     a ## b := a\n"
"(%i3) 5 ## 3;\n"
"(%o3)                          125\n"
"(%i4) remove (\"##\", op);\n"
"(%o4)                         done\n"
"(%i5) 5 ## 3;\n"
"Incorrect syntax: # is not a prefix operator\n"
"5 ##\n"
"  ^\n"
"(%i5) \"##\" (5, 3);\n"
"(%o5)                          125\n"
"(%i6) infix (\"##\");\n"
"(%o6)                          ##\n"
"(%i7) 5 ## 3;\n"
"(%o7)                          125\n"
"(%i8) kill (\"##\");\n"
"(%o8)                         done\n"
"(%i9) 5 ## 3;\n"
"Incorrect syntax: # is not a prefix operator\n"
"5 ##\n"
"  ^\n"
"(%i9) \"##\" (5, 3);\n"
"(%o9)                       ##(5, 3)\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators} @category{Syntax}\n"
"@closecatbox\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Arithmetic operators, Relational operators, Introduction to operators, Operators\n"
"@section Arithmetic operators\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{+}\n"
"@anchor{-}\n"
"@anchor{*}\n"
"@anchor{/}\n"
"@anchor{^}\n"
"@fnindex Addition\n"
"@fnindex Subtraction\n"
"@fnindex Multiplication\n"
"@fnindex Division\n"
"@fnindex Exponentiation\n"
msgstr ""

# Operators.texi
msgid ""
"@deffn {Operator} +\n"
"@deffnx {Operator} -\n"
"@deffnx {Operator} *\n"
"@deffnx {Operator} /\n"
"@deffnx {Operator} ^\n"
msgstr ""

# Operators.texi
msgid ""
"The symbols @code{+} @code{*} @code{/} and @code{^} represent addition,\n"
"multiplication, division, and exponentiation, respectively.  The names of these\n"
"operators are @code{\"+\"} @code{\"*\"} @code{\"/\"} and @code{\"^\"}, which may appear\n"
"where the name of a function or operator is required.\n"
msgstr ""

# Operators.texi
msgid ""
"The symbols @code{+} and @code{-} represent unary addition and negation,\n"
"respectively, and the names of these operators are @code{\"+\"} and @code{\"-\"},\n"
"respectively.\n"
msgstr ""

# Operators.texi
msgid ""
"Subtraction @code{a - b} is represented within Maxima as addition,\n"
"@code{a + (- b)}.  Expressions such as @code{a + (- b)} are displayed as\n"
"subtraction.  Maxima recognizes @code{\"-\"} only as the name of the unary\n"
"negation operator, and not as the name of the binary subtraction operator.\n"
msgstr ""

# Operators.texi
msgid ""
"Division @code{a / b} is represented within Maxima as multiplication,\n"
"@code{a * b^(- 1)}.  Expressions such as @code{a * b^(- 1)} are displayed as\n"
"division.  Maxima recognizes @code{\"/\"} as the name of the division operator.\n"
msgstr ""

# Operators.texi
msgid ""
"Addition and multiplication are n-ary, commutative operators.\n"
"Division and exponentiation are binary, noncommutative operators.\n"
msgstr ""

# Operators.texi
msgid ""
"Maxima sorts the operands of commutative operators to construct a canonical\n"
"representation.  For internal storage, the ordering is determined by\n"
"@mrefdot{orderlessp}  For display, the ordering for addition is determined by\n"
"@mrefcomma{ordergreatp} and for multiplication, it is the same as the internal\n"
"ordering.\n"
msgstr ""

# Operators.texi
msgid ""
"Arithmetic computations are carried out on literal numbers (integers, rationals,\n"
"ordinary floats, and bigfloats).  Except for exponentiation, all arithmetic\n"
"operations on numbers are simplified to numbers.  Exponentiation is simplified\n"
"to a number if either operand is an ordinary float or bigfloat or if the result\n"
"is an exact integer or rational; otherwise an exponentiation may be simplified\n"
"to @mref{sqrt} or another exponentiation or left unchanged.\n"
msgstr ""

# Operators.texi
msgid ""
"Floating-point contagion applies to arithmetic computations: if any operand is\n"
"a bigfloat, the result is a bigfloat; otherwise, if any operand is an ordinary\n"
"float, the result is an ordinary float; otherwise, the operands are rationals\n"
"or integers and the result is a rational or integer.\n"
msgstr ""

# Operators.texi
msgid ""
"Arithmetic computations are a simplification, not an evaluation.\n"
"Thus arithmetic is carried out in quoted (but simplified) expressions.\n"
msgstr ""

# Operators.texi
msgid ""
"Arithmetic operations are applied element-by-element to lists when the global\n"
"flag @mref{listarith} is @code{true}, and always applied element-by-element to\n"
"matrices.  When one operand is a list or matrix and another is an operand of\n"
"some other type, the other operand is combined with each of the elements of the\n"
"list or matrix.\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"Addition and multiplication are n-ary, commutative operators.\n"
"Maxima sorts the operands to construct a canonical representation.\n"
"The names of these operators are @code{\"+\"} and @code{\"*\"}.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c c + g + d + a + b + e + f;\n"
"@c [op (%), args (%)];\n"
"@c c * g * d * a * b * e * f;\n"
"@c [op (%), args (%)];\n"
"@c apply (\"+\", [a, 8, x, 2, 9, x, x, a]);\n"
"@c apply (\"*\", [a, 8, x, 2, 9, x, x, a]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) c + g + d + a + b + e + f;\n"
"(%o1)               g + f + e + d + c + b + a\n"
"(%i2) [op (%), args (%)];\n"
"(%o2)              [+, [g, f, e, d, c, b, a]]\n"
"(%i3) c * g * d * a * b * e * f;\n"
"(%o3)                     a b c d e f g\n"
"(%i4) [op (%), args (%)];\n"
"(%o4)              [*, [a, b, c, d, e, f, g]]\n"
"(%i5) apply (\"+\", [a, 8, x, 2, 9, x, x, a]);\n"
"(%o5)                    3 x + 2 a + 19\n"
"(%i6) apply (\"*\", [a, 8, x, 2, 9, x, x, a]);\n"
"                                 2  3\n"
"(%o6)                       144 a  x\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Division and exponentiation are binary, noncommutative operators.\n"
"The names of these operators are @code{\"/\"} and @code{\"^\"}.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c [a / b, a ^ b];\n"
"@c [map (op, %), map (args, %)];\n"
"@c [apply (\"/\", [a, b]), apply (\"^\", [a, b])];\n"
"@c ===end===\n"
"@example\n"
"(%i1) [a / b, a ^ b];\n"
"                              a   b\n"
"(%o1)                        [-, a ]\n"
"                              b\n"
"(%i2) [map (op, %), map (args, %)];\n"
"(%o2)              [[/, ^], [[a, b], [a, b]]]\n"
"(%i3) [apply (\"/\", [a, b]), apply (\"^\", [a, b])];\n"
"                              a   b\n"
"(%o3)                        [-, a ]\n"
"                              b\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Subtraction and division are represented internally\n"
"in terms of addition and multiplication, respectively.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c [inpart (a - b, 0), inpart (a - b, 1), inpart (a - b, 2)];\n"
"@c [inpart (a / b, 0), inpart (a / b, 1), inpart (a / b, 2)];\n"
"@c ===end===\n"
"@example\n"
"(%i1) [inpart (a - b, 0), inpart (a - b, 1), inpart (a - b, 2)];\n"
"(%o1)                      [+, a, - b]\n"
"(%i2) [inpart (a / b, 0), inpart (a / b, 1), inpart (a / b, 2)];\n"
"                                   1\n"
"(%o2)                       [*, a, -]\n"
"                                   b\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Computations are carried out on literal numbers.\n"
"Floating-point contagion applies.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c 17 + b - (1/2)*29 + 11^(2/4);\n"
"@c [17 + 29, 17 + 29.0, 17 + 29b0];\n"
"@c ===end===\n"
"@example\n"
"(%i1) 17 + b - (1/2)*29 + 11^(2/4);\n"
"                                       5\n"
"(%o1)                   b + sqrt(11) + -\n"
"                                       2\n"
"(%i2) [17 + 29, 17 + 29.0, 17 + 29b0];\n"
"(%o2)                   [46, 46.0, 4.6b1]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Arithmetic computations are a simplification, not an evaluation.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c simp : false;\n"
"@c '(17 + 29*11/7 - 5^3);\n"
"@c simp : true;\n"
"@c '(17 + 29*11/7 - 5^3);\n"
"@c ===end===\n"
"@example\n"
"(%i1) simp : false;\n"
"(%o1)                         false\n"
"(%i2) '(17 + 29*11/7 - 5^3);\n"
"                              29 11    3\n"
"(%o2)                    17 + ----- - 5\n"
"                                7\n"
"(%i3) simp : true;\n"
"(%o3)                         true\n"
"(%i4) '(17 + 29*11/7 - 5^3);\n"
"                                437\n"
"(%o4)                         - ---\n"
"                                 7\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Arithmetic is carried out element-by-element for lists (depending on\n"
"@code{listarith}) and matrices.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c matrix ([a, x], [h, u]) - matrix ([1, 2], [3, 4]);\n"
"@c 5 * matrix ([a, x], [h, u]);\n"
"@c listarith : false;\n"
"@c [a, c, m, t] / [1, 7, 2, 9];\n"
"@c [a, c, m, t] ^ x;\n"
"@c listarith : true;\n"
"@c [a, c, m, t] / [1, 7, 2, 9];\n"
"@c [a, c, m, t] ^ x;\n"
"@c ===end===\n"
"@example\n"
"(%i1) matrix ([a, x], [h, u]) - matrix ([1, 2], [3, 4]);\n"
"@group\n"
"                        [ a - 1  x - 2 ]\n"
"(%o1)                   [              ]\n"
"                        [ h - 3  u - 4 ]\n"
"@end group\n"
"(%i2) 5 * matrix ([a, x], [h, u]);\n"
"                          [ 5 a  5 x ]\n"
"(%o2)                     [          ]\n"
"                          [ 5 h  5 u ]\n"
"(%i3) listarith : false;\n"
"(%o3)                         false\n"
"(%i4) [a, c, m, t] / [1, 7, 2, 9];\n"
"                          [a, c, m, t]\n"
"(%o4)                     ------------\n"
"                          [1, 7, 2, 9]\n"
"(%i5) [a, c, m, t] ^ x;\n"
"                                      x\n"
"(%o5)                     [a, c, m, t]\n"
"(%i6) listarith : true;\n"
"(%o6)                         true\n"
"(%i7) [a, c, m, t] / [1, 7, 2, 9];\n"
"                              c  m  t\n"
"(%o7)                     [a, -, -, -]\n"
"                              7  2  9\n"
"(%i8) [a, c, m, t] ^ x;\n"
"                          x   x   x   x\n"
"(%o8)                   [a , c , m , t ]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{**}\n"
"@deffn {Operator} **\n"
msgstr ""

# Operators.texi
msgid ""
"Exponentiation operator.\n"
"Maxima recognizes @code{**} as the same operator as @mref{^} in input,\n"
"and it is displayed as @code{^} in 1-dimensional output,\n"
"or by placing the exponent as a superscript in 2-dimensional output.\n"
msgstr ""

# Operators.texi
msgid ""
"The @mref{fortran} function displays the exponentiation operator as @code{**},\n"
"whether it was input as @code{**} or @code{^}.\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c is (a**b = a^b);\n"
"@c x**y + x^z;\n"
"@c string (x**y + x^z);\n"
"@c fortran (x**y + x^z);\n"
"@c ===end===\n"
"@example\n"
"(%i1) is (a**b = a^b);\n"
"(%o1)                         true\n"
"(%i2) x**y + x^z;\n"
"                              z    y\n"
"(%o2)                        x  + x\n"
"(%i3) string (x**y + x^z);\n"
"(%o3)                        x^z+x^y\n"
"(%i4) fortran (x**y + x^z);\n"
"      x**z+x**y\n"
"(%o4)                         done\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{^^}\n"
"@deffn {Operator} ^^\n"
"@ifinfo\n"
"@fnindex Noncommutative exponentiation\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"Noncommutative exponentiation operator.\n"
"@code{^^} is the exponentiation operator corresponding to noncommutative\n"
"multiplication @code{.}, just as the ordinary exponentiation operator @code{^}\n"
"corresponds to commutative multiplication @code{*}.\n"
msgstr ""

# Operators.texi
msgid ""
"Noncommutative exponentiation is displayed by @code{^^} in 1-dimensional output,\n"
"and by placing the exponent as a superscript within angle brackets @code{< >}\n"
"in 2-dimensional output.\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c a . a . b . b . b + a * a * a * b * b;\n"
"@c string (a . a . b . b . b + a * a * a * b * b);\n"
"@c ===end===\n"
"@example\n"
"(%i1) a . a . b . b . b + a * a * a * b * b;\n"
"                        3  2    <2>    <3>\n"
"(%o1)                  a  b  + a    . b\n"
"(%i2) string (a . a . b . b . b + a * a * a * b * b);\n"
"(%o2)                  a^3*b^2+a^^2 . b^^3\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{.}\n"
"@deffn {Operator} .\n"
"@ifinfo\n"
"@fnindex Noncommutative multiplication\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"The dot operator, for matrix (non-commutative) multiplication.\n"
"When @code{\".\"} is used in this way, spaces should be left on both sides of\n"
"it, e.g.  @code{A . B}  This distinguishes it plainly from a decimal point in\n"
"a floating point number.\n"
msgstr ""

# Operators.texi
msgid ""
"See also\n"
"@mrefcomma{Dot}\n"
"@mrefcomma{dot0nscsimp}\n"
"@mrefcomma{dot0simp}\n"
"@mrefcomma{dot1simp}\n"
"@mrefcomma{dotassoc}\n"
"@mrefcomma{dotconstrules}\n"
"@mrefcomma{dotdistrib}\n"
"@mrefcomma{dotexptsimp}\n"
"@mrefcomma{dotident}\n"
"and\n"
"@mrefdot{dotscrules}\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Relational operators, Logical operators, Arithmetic operators, Operators\n"
"@section Relational operators\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{<}\n"
"@anchor{<=}\n"
"@anchor{>=}\n"
"@anchor{>}\n"
"@fnindex Less than\n"
"@fnindex Less than or equal\n"
"@fnindex Greater than or equal\n"
"@fnindex Greater than\n"
msgstr ""

# Operators.texi
msgid ""
"@deffn {Operator} <\n"
"@deffnx {Operator} <=\n"
"@deffnx {Operator} >=\n"
"@deffnx {Operator} >\n"
msgstr ""

# Operators.texi
msgid ""
"The symbols @code{<} @code{<=} @code{>=} and @code{>} represent less than, less\n"
"than or equal, greater than or equal, and greater than, respectively.  The names\n"
"of these operators are @code{\"<\"} @code{\"<=\"} @code{\">=\"} and @code{\">\"}, which\n"
"may appear where the name of a function or operator is required.\n"
msgstr ""

# Operators.texi
msgid ""
"These relational operators are all binary operators; constructs such as\n"
"@code{a < b < c} are not recognized by Maxima.\n"
msgstr ""

# Operators.texi
msgid ""
"Relational expressions are evaluated to Boolean values by the functions\n"
"@mref{is} and @mrefcomma{maybe} and the programming constructs\n"
"@mrefcomma{if} @mrefcomma{while} and @mrefdot{unless}  Relational expressions\n"
"are not otherwise evaluated or simplified to Boolean values, although the\n"
"arguments of relational expressions are evaluated (when evaluation is not\n"
"otherwise prevented by quotation).\n"
msgstr ""

# Operators.texi
msgid ""
"When a relational expression cannot be evaluated to @code{true} or @code{false},\n"
"the behavior of @code{is} and @code{if} are governed by the global flag\n"
"@mrefdot{prederror}  When @code{prederror} is @code{true}, @code{is} and\n"
"@code{if} trigger an error.  When @code{prederror} is @code{false}, @code{is}\n"
"returns @code{unknown}, and @code{if} returns a partially-evaluated conditional\n"
"expression.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{maybe} always behaves as if @code{prederror} were @code{false}, and\n"
"@code{while} and @code{unless} always behave as if @code{prederror} were\n"
"@code{true}.\n"
msgstr ""

# Operators.texi
msgid ""
"Relational operators do not distribute over lists or other aggregates.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @mrefcomma{=} @mrefcomma{#} @mrefcomma{equal} and @mrefdot{notequal}\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"Relational expressions are evaluated to Boolean values by some functions and\n"
"programming constructs.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c [x, y, z] : [123, 456, 789];\n"
"@c is (x < y);\n"
"@c maybe (y > z);\n"
"@c if x >= z then 1 else 0;\n"
"@c block ([S], S : 0, for i:1 while i <= 100 do S : S + i, \n"
"@c        return (S));\n"
"@c ===end===\n"
"@example\n"
"(%i1) [x, y, z] : [123, 456, 789];\n"
"(%o1)                    [123, 456, 789]\n"
"(%i2) is (x < y);\n"
"(%o2)                         true\n"
"(%i3) maybe (y > z);\n"
"(%o3)                         false\n"
"(%i4) if x >= z then 1 else 0;\n"
"(%o4)                           0\n"
"(%i5) block ([S], S : 0, for i:1 while i <= 100 do S : S + i, \n"
"             return (S));\n"
"(%o5)                         5050\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Relational expressions are not otherwise evaluated or simplified to Boolean\n"
"values, although the arguments of relational expressions are evaluated.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c [x, y, z] : [123, 456, 789];\n"
"@c [x < y, y <= z, z >= y, y > z];\n"
"@c map (is, %);\n"
"@c ===end===\n"
"@example\n"
"(%o1)                    [123, 456, 789]\n"
"(%i2) [x < y, y <= z, z >= y, y > z];\n"
"(%o2)    [123 < 456, 456 <= 789, 789 >= 456, 456 > 789]\n"
"(%i3) map (is, %);\n"
"(%o3)               [true, true, true, false]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Logical operators, Operators for Equations, Relational operators, Operators\n"
"@section Logical operators\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Operators.texi
msgid ""
"@c NEEDS EXAMPLES\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{and}\n"
"@deffn {Operator} and\n"
"@ifinfo\n"
"@fnindex Logical conjunction\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"The logical conjunction operator.  @code{and} is an n-ary infix operator;\n"
"its operands are Boolean expressions, and its result is a Boolean value.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{and} forces evaluation (like @mref{is}) of one or more operands,\n"
"and may force evaluation of all operands.\n"
msgstr ""

# Operators.texi
msgid ""
"Operands are evaluated in the order in which they appear.  @code{and} evaluates\n"
"only as many of its operands as necessary to determine the result.  If any\n"
"operand is @code{false}, the result is @code{false} and no further operands are\n"
"evaluated.\n"
msgstr ""

# Operators.texi
msgid ""
"The global flag @mref{prederror} governs the behavior of @code{and} when an\n"
"evaluated operand cannot be determined to be @code{true} or @code{false}.\n"
"@code{and} prints an error message when @code{prederror} is @code{true}.\n"
"Otherwise, operands which do not evaluate to @code{true} or @code{false} are\n"
"accepted, and the result is a Boolean expression.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{and} is not commutative: @code{a and b} might not be equal to\n"
"@code{b and a} due to the treatment of indeterminate operands.\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c NEEDS EXAMPLES\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{not}\n"
"@deffn {Operator} not\n"
"@ifinfo\n"
"@fnindex Logical negation\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"The logical negation operator.  @code{not} is a prefix operator;\n"
"its operand is a Boolean expression, and its result is a Boolean value.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{not} forces evaluation (like @code{is}) of its operand.\n"
msgstr ""

# Operators.texi
msgid ""
"The global flag @mref{prederror} governs the behavior of @code{not} when its\n"
"operand cannot be determined to be @code{true} or @code{false}.  @code{not}\n"
"prints an error message when @code{prederror} is @code{true}.  Otherwise,\n"
"operands which do not evaluate to @code{true} or @code{false} are accepted,\n"
"and the result is a Boolean expression.\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c NEEDS EXAMPLES\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{or}\n"
"@deffn {Operator} or\n"
"@ifinfo\n"
"@fnindex Logical disjunction\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"The logical disjunction operator.  @code{or} is an n-ary infix operator;\n"
"its operands are Boolean expressions, and its result is a Boolean value.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{or} forces evaluation (like @mref{is}) of one or more operands,\n"
"and may force evaluation of all operands.\n"
msgstr ""

# Operators.texi
msgid ""
"Operands are evaluated in the order in which they appear.  @code{or} evaluates\n"
"only as many of its operands as necessary to determine the result.  If any\n"
"operand is @code{true}, the result is @code{true} and no further operands are\n"
"evaluated.\n"
msgstr ""

# Operators.texi
msgid ""
"The global flag @mref{prederror} governs the behavior of @code{or} when an\n"
"evaluated operand cannot be determined to be @code{true} or @code{false}.\n"
"@code{or} prints an error message when @code{prederror} is @code{true}.\n"
"Otherwise, operands which do not evaluate to @code{true} or @code{false} are\n"
"accepted, and the result is a Boolean expression.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{or} is not commutative: @code{a or b} might not be equal to @code{b or a}\n"
"due to the treatment of indeterminate operands.\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Operators for Equations, Assignment operators, Logical operators, Operators\n"
"@section Operators for Equations\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{#}\n"
"@deffn {Operator} #\n"
"@ifinfo\n"
"@fnindex Not equal (syntactic inequality)\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"Represents the negation of syntactic equality @mrefdot{=}\n"
msgstr ""

# Operators.texi
msgid ""
"Note that because of the rules for evaluation of predicate expressions\n"
"(in particular because @code{not @var{expr}} causes evaluation of @var{expr}),\n"
"@code{not @var{a} = @var{b}} is equivalent to @code{is(@var{a} # @var{b})},\n"
"instead of @code{@var{a} # @var{b}}.\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c a = b;\n"
"@c is (a = b);\n"
"@c a # b;\n"
"@c not a = b;\n"
"@c is (a # b);\n"
"@c is (not a = b);\n"
"@c ===end===\n"
"@example\n"
"(%i1) a = b;\n"
"(%o1)                         a = b\n"
"(%i2) is (a = b);\n"
"(%o2)                         false\n"
"(%i3) a # b;\n"
"(%o3)                         a # b\n"
"(%i4) not a = b;\n"
"(%o4)                         true\n"
"(%i5) is (a # b);\n"
"(%o5)                         true\n"
"(%i6) is (not a = b);\n"
"(%o6)                         true\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{=}\n"
"@deffn {Operator} =\n"
"@ifinfo\n"
"@fnindex Equation operator\n"
"@fnindex Equal (syntactic equality)\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"The equation operator.\n"
msgstr ""

# Operators.texi
msgid ""
"An expression @code{@var{a} = @var{b}}, by itself, represents an unevaluated\n"
"equation, which might or might not hold.  Unevaluated equations may appear as\n"
"arguments to @mref{solve} and @mref{algsys} or some other functions.\n"
msgstr ""

# Operators.texi
msgid ""
"The function @mref{is} evaluates @code{=} to a Boolean value.\n"
"@code{is(@var{a} = @var{b})} evaluates @code{@var{a} = @var{b}} to @code{true}\n"
"when @var{a} and @var{b} are identical.  That is, @var{a} and @var{b} are atoms\n"
"which are identical, or they are not atoms and their operators are identical and\n"
"their arguments are identical.  Otherwise, @code{is(@var{a} = @var{b})}\n"
"evaluates to @code{false}; it never evaluates to @code{unknown}.  When\n"
"@code{is(@var{a} = @var{b})} is @code{true}, @var{a} and @var{b} are said to be\n"
"syntactically equal, in contrast to equivalent expressions, for which\n"
"@code{is(equal(@var{a}, @var{b}))} is @code{true}.  Expressions can be\n"
"equivalent and not syntactically equal.\n"
msgstr ""

# Operators.texi
msgid ""
"The negation of @code{=} is represented by @mrefdot{#}\n"
"As with @code{=}, an expression @code{@var{a} # @var{b}}, by itself, is not\n"
"evaluated.  @code{is(@var{a} # @var{b})} evaluates @code{@var{a} # @var{b}} to\n"
"@code{true} or @code{false}.\n"
msgstr ""

# Operators.texi
msgid ""
"In addition to @code{is}, some other operators evaluate @code{=} and @code{#}\n"
"to @code{true} or @code{false}, namely @mrefcomma{if} @mrefcomma{and}@w{}\n"
"@mrefcomma{or} and @mrefdot{not}\n"
msgstr ""

# Operators.texi
msgid ""
"Note that because of the rules for evaluation of predicate expressions\n"
"(in particular because @code{not @var{expr}} causes evaluation of @var{expr}),\n"
"@code{not @var{a} = @var{b}} is equivalent to @code{is(@var{a} # @var{b})},\n"
"instead of @code{@var{a} # @var{b}}.\n"
msgstr ""

# Operators.texi
msgid ""
"@mref{rhs} and @mref{lhs} return the right-hand and left-hand sides,\n"
"respectively, of an equation or inequation.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @mref{equal} and @mrefdot{notequal}\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"An expression @code{@var{a} = @var{b}}, by itself, represents\n"
"an unevaluated equation, which might or might not hold.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c eq_1 : a * x - 5 * y = 17;\n"
"@c eq_2 : b * x + 3 * y = 29;\n"
"@c solve ([eq_1, eq_2], [x, y]);\n"
"@c subst (%, [eq_1, eq_2]);\n"
"@c ratsimp (%);\n"
"@c ===end===\n"
"@example\n"
"(%i1) eq_1 : a * x - 5 * y = 17;\n"
"(%o1)                    a x - 5 y = 17\n"
"(%i2) eq_2 : b * x + 3 * y = 29;\n"
"(%o2)                    3 y + b x = 29\n"
"(%i3) solve ([eq_1, eq_2], [x, y]);\n"
"                        196         29 a - 17 b\n"
"(%o3)          [[x = ---------, y = -----------]]\n"
"                     5 b + 3 a       5 b + 3 a\n"
"(%i4) subst (%, [eq_1, eq_2]);\n"
"@group\n"
"         196 a     5 (29 a - 17 b)\n"
"(%o4) [--------- - --------------- = 17, \n"
"       5 b + 3 a      5 b + 3 a\n"
"                                  196 b     3 (29 a - 17 b)\n"
"                                --------- + --------------- = 29]\n"
"                                5 b + 3 a      5 b + 3 a\n"
"@end group\n"
"(%i5) ratsimp (%);\n"
"(%o5)                  [17 = 17, 29 = 29]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@code{is(@var{a} = @var{b})} evaluates @code{@var{a} = @var{b}} to @code{true}\n"
"when @var{a} and @var{b} are syntactically equal (that is, identical).\n"
"Expressions can be equivalent and not syntactically equal.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c a : (x + 1) * (x - 1);\n"
"@c b : x^2 - 1;\n"
"@c [is (a = b), is (a # b)];\n"
"@c [is (equal (a, b)), is (notequal (a, b))];\n"
"@c ===end===\n"
"@example\n"
"(%i1) a : (x + 1) * (x - 1);\n"
"(%o1)                    (x - 1) (x + 1)\n"
"(%i2) b : x^2 - 1;\n"
"                              2\n"
"(%o2)                        x  - 1\n"
"(%i3) [is (a = b), is (a # b)];\n"
"(%o3)                     [false, true]\n"
"(%i4) [is (equal (a, b)), is (notequal (a, b))];\n"
"(%o4)                     [true, false]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Some operators evaluate @code{=} and @code{#} to @code{true} or @code{false}.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c if expand ((x + y)^2) = x^2 + 2 * x * y + y^2 then FOO else \n"
"@c       BAR;\n"
"@c eq_3 : 2 * x = 3 * x;\n"
"@c eq_4 : exp (2) = %e^2;\n"
"@c [eq_3 and eq_4, eq_3 or eq_4, not eq_3];\n"
"@c ===end===\n"
"@example\n"
"(%i1) if expand ((x + y)^2) = x^2 + 2 * x * y + y^2 then FOO else\n"
"      BAR;\n"
"(%o1)                          FOO\n"
"(%i2) eq_3 : 2 * x = 3 * x;\n"
"(%o2)                       2 x = 3 x\n"
"(%i3) eq_4 : exp (2) = %e^2;\n"
"                              2     2\n"
"(%o3)                       %e  = %e\n"
"(%i4) [eq_3 and eq_4, eq_3 or eq_4, not eq_3];\n"
"(%o4)                  [false, true, true]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Because @code{not @var{expr}} causes evaluation of @var{expr},\n"
"@code{not @var{a} = @var{b}} is equivalent to @code{is(@var{a} # @var{b})}.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c [2 * x # 3 * x, not (2 * x = 3 * x)];\n"
"@c is (2 * x # 3 * x);\n"
"@c ===end===\n"
"@example\n"
"(%i1) [2 * x # 3 * x, not (2 * x = 3 * x)];\n"
"(%o1)                   [2 x # 3 x, true]\n"
"(%i2) is (2 * x # 3 * x);\n"
"(%o2)                         true\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Assignment operators, User defined operators, Operators for Equations, Operators\n"
"@section Assignment operators\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{:}\n"
"@deffn {Operator} :\n"
"@ifinfo\n"
"@fnindex Assignment operator\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"Assignment operator.\n"
msgstr ""

# Operators.texi
msgid ""
"When the left-hand side is a simple variable (not subscripted), @code{:}\n"
"evaluates its right-hand side and associates that value with the left-hand side.\n"
msgstr ""

# Operators.texi
msgid ""
"When the left-hand side is a subscripted element of a list, matrix, declared\n"
"Maxima array, or Lisp array, the right-hand side is assigned to that element.\n"
"The subscript must name an existing element; such objects cannot be extended by\n"
"naming nonexistent elements.\n"
msgstr ""

# Operators.texi
msgid ""
"When the left-hand side is a subscripted element of an undeclared Maxima array,\n"
"the right-hand side is assigned to that element, if it already exists,\n"
"or a new element is allocated, if it does not already exist.\n"
msgstr ""

# Operators.texi
msgid ""
"When the left-hand side is a list of simple and/or subscripted variables, the\n"
"right-hand side must evaluate to a list, and the elements of the right-hand\n"
"side are assigned to the elements of the left-hand side, in parallel.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @mref{kill} and @mrefcomma{remvalue} which undo the association between\n"
"the left-hand side and its value.\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"Assignment to a simple variable.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c a;\n"
"@c a : 123;\n"
"@c a;\n"
"@c ===end===\n"
"@example\n"
"(%i1) a;\n"
"(%o1)                           a\n"
"(%i2) a : 123;\n"
"(%o2)                          123\n"
"(%i3) a;\n"
"(%o3)                          123\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Assignment to an element of a list.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c b : [1, 2, 3];\n"
"@c b[3] : 456;\n"
"@c b;\n"
"@c ===end===\n"
"@example\n"
"(%i1) b : [1, 2, 3];\n"
"(%o1)                       [1, 2, 3]\n"
"(%i2) b[3] : 456;\n"
"(%o2)                          456\n"
"(%i3) b;\n"
"(%o3)                      [1, 2, 456]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Assignment creates an undeclared array.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c c[99] : 789;\n"
"@c c[99];\n"
"@c c;\n"
"@c arrayinfo (c);\n"
"@c listarray (c);\n"
"@c ===end===\n"
"@example\n"
"(%i1) c[99] : 789;\n"
"(%o1)                          789\n"
"(%i2) c[99];\n"
"(%o2)                          789\n"
"(%i3) c;\n"
"(%o3)                           c\n"
"(%i4) arrayinfo (c);\n"
"(%o4)                   [hashed, 1, [99]]\n"
"(%i5) listarray (c);\n"
"(%o5)                         [789]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Multiple assignment.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c [a, b, c] : [45, 67, 89];\n"
"@c a;\n"
"@c b;\n"
"@c c;\n"
"@c ===end===\n"
"@example\n"
"(%i1) [a, b, c] : [45, 67, 89];\n"
"(%o1)                     [45, 67, 89]\n"
"(%i2) a;\n"
"(%o2)                          45\n"
"(%i3) b;\n"
"(%o3)                          67\n"
"(%i4) c;\n"
"(%o4)                          89\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Multiple assignment is carried out in parallel.\n"
"The values of @code{a} and @code{b} are exchanged in this example.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c [a, b] : [33, 55];\n"
"@c [a, b] : [b, a];\n"
"@c a;\n"
"@c b;\n"
"@c ===end===\n"
"@example\n"
"(%i1) [a, b] : [33, 55];\n"
"(%o1)                       [33, 55]\n"
"(%i2) [a, b] : [b, a];\n"
"(%o2)                       [55, 33]\n"
"(%i3) a;\n"
"(%o3)                          55\n"
"(%i4) b;\n"
"(%o4)                          33\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Evaluation} @category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@need 900\n"
"@anchor{::}\n"
"@deffn {Operator} ::\n"
"@ifinfo\n"
"@fnindex Assignment operator (evaluates left-hand side)\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"Assignment operator.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{::} is the same as @mref{:} (which see) except that @code{::} evaluates\n"
"its left-hand side as well as its right-hand side.\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c x : 'foo;\n"
"@c x :: 123;\n"
"@c foo;\n"
"@c x : '[a, b, c];\n"
"@c x :: [11, 22, 33];\n"
"@c a;\n"
"@c b;\n"
"@c c;\n"
"@c ===end===\n"
"@example\n"
"(%i1) x : 'foo;\n"
"(%o1)                          foo\n"
"(%i2) x :: 123;\n"
"(%o2)                          123\n"
"(%i3) foo;\n"
"(%o3)                          123\n"
"(%i4) x : '[a, b, c];\n"
"(%o4)                       [a, b, c]\n"
"(%i5) x :: [11, 22, 33];\n"
"(%o5)                     [11, 22, 33]\n"
"(%i6) a;\n"
"(%o6)                          11\n"
"(%i7) b;\n"
"(%o7)                          22\n"
"(%i8) c;\n"
"(%o8)                          33\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Evaluation} @category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{::=}\n"
"@deffn {Operator} ::=\n"
"@ifinfo\n"
"@fnindex Macro function definition operator\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"Macro function definition operator.\n"
"@code{::=} defines a function (called a \"macro\" for historical reasons) which\n"
"quotes its arguments, and the expression which it returns (called the \"macro\n"
"expansion\") is evaluated in the context from which the macro was called.\n"
"A macro function is otherwise the same as an ordinary function.\n"
msgstr ""

# Operators.texi
msgid ""
"@mref{macroexpand} returns a macro expansion (without evaluating it).\n"
"@code{macroexpand (foo (x))} followed by @code{''%} is equivalent to\n"
"@code{foo (x)} when @code{foo} is a macro function.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{::=} puts the name of the new macro function onto the global list\n"
"@mrefdot{macros}  @mrefcomma{kill} @mrefcomma{remove} and @mref{remfunction}@w{}\n"
"unbind macro function definitions and remove names from @code{macros}.\n"
msgstr ""

# Operators.texi
msgid ""
"@mref{fundef} or @mref{dispfun} return a macro function definition or assign it\n"
"to a label, respectively.\n"
msgstr ""

# Operators.texi
msgid ""
"Macro functions commonly contain @mref{buildq} and @mref{splice} expressions to\n"
"construct an expression, which is then evaluated.\n"
msgstr ""

# Operators.texi
msgid ""
"Examples\n"
msgstr ""

# Operators.texi
msgid ""
"A macro function quotes its arguments, so message (1) shows @code{y - z}, not\n"
"the value of @code{y - z}.  The macro expansion (the quoted expression\n"
"@code{'(print (\"(2) x is equal to\", x))}) is evaluated in the context from which\n"
"the macro was called, printing message (2).\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c x: %pi$\n"
"@c y: 1234$\n"
"@c z: 1729 * w$\n"
"@c printq1 (x) ::= block (print (\"(1) x is equal to\", x), \n"
"@c                                 '(print (\"(2) x is equal to\", x)))$\n"
"@c printq1 (y - z);\n"
"@c ===end===\n"
"@example\n"
"(%i1) x: %pi$\n"
"(%i2) y: 1234$\n"
"(%i3) z: 1729 * w$\n"
"(%i4) printq1 (x) ::= block (print (\"(1) x is equal to\", x),\n"
"      '(print (\"(2) x is equal to\", x)))$\n"
"(%i5) printq1 (y - z);\n"
"(1) x is equal to y - z\n"
"(2) x is equal to %pi\n"
"(%o5)                                 %pi\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"An ordinary function evaluates its arguments, so message (1) shows the value of\n"
"@code{y - z}.  The return value is not evaluated, so message (2) is not printed\n"
"until the explicit evaluation @code{''%}.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c x: %pi$\n"
"@c y: 1234$\n"
"@c z: 1729 * w$\n"
"@c printe1 (x) := block (print (\"(1) x is equal to\", x), \n"
"@c       '(print (\"(2) x is equal to\", x)))$\n"
"@c printe1 (y - z);\n"
"@c ''%;\n"
"@c ===end===\n"
"@example\n"
"(%i1) x: %pi$\n"
"(%i2) y: 1234$\n"
"(%i3) z: 1729 * w$\n"
"(%i4) printe1 (x) := block (print (\"(1) x is equal to\", x),\n"
"      '(print (\"(2) x is equal to\", x)))$\n"
"(%i5) printe1 (y - z);\n"
"(1) x is equal to 1234 - 1729 w\n"
"(%o5)                     print((2) x is equal to, x)\n"
"(%i6) ''%;\n"
"(2) x is equal to %pi\n"
"(%o6)                                 %pi\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@code{macroexpand} returns a macro expansion.\n"
"@code{macroexpand (foo (x))} followed by @code{''%} is equivalent to\n"
"@code{foo (x)} when @code{foo} is a macro function.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c x: %pi$\n"
"@c y: 1234$\n"
"@c z: 1729 * w$\n"
"@c g (x) ::= buildq ([x], print (\"x is equal to\", x))$\n"
"@c macroexpand (g (y - z));\n"
"@c ''%;\n"
"@c g (y - z);\n"
"@c ===end===\n"
"@example\n"
"(%i1) x: %pi$\n"
"(%i2) y: 1234$\n"
"(%i3) z: 1729 * w$\n"
"(%i4) g (x) ::= buildq ([x], print (\"x is equal to\", x))$\n"
"(%i5) macroexpand (g (y - z));\n"
"(%o5)                     print(x is equal to, y - z)\n"
"(%i6) ''%;\n"
"x is equal to 1234 - 1729 w\n"
"(%o6)                            1234 - 1729 w\n"
"(%i7) g (y - z);\n"
"x is equal to 1234 - 1729 w\n"
"(%o7)                            1234 - 1729 w\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Function definition} @category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{:=}\n"
"@deffn {Operator} :=\n"
"@ifinfo\n"
"@fnindex Function definition operator\n"
"@end ifinfo\n"
msgstr ""

# Operators.texi
msgid ""
"The function definition operator.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{@var{f}(@var{x_1}, ..., @var{x_n}) := @var{expr}} defines a function named\n"
"@var{f} with arguments @var{x_1}, @dots{}, @var{x_n} and function body\n"
"@var{expr}.  @code{:=} never evaluates the function body (unless explicitly\n"
"evaluated by quote-quote @code{'@w{}'}).\n"
"The function body is evaluated every time the function is called.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{@var{f}[@var{x_1}, ..., @var{x_n}] := @var{expr}} defines a so-called array function.\n"
"Its function body is evaluated just once for each distinct value of its arguments,\n"
"and that value is returned, without evaluating the function body,\n"
"whenever the arguments have those values again.\n"
"(A function of this kind is commonly known as a ``memoizing function''.)\n"
msgstr ""

# Operators.texi
msgid ""
"@code{@var{f}[@var{x_1}, ..., @var{x_n}](@var{y_1}, ..., @var{y_m}) := @var{expr}}\n"
"is a special case of an array function.\n"
"@code{@var{f}[@var{x_1}, ..., @var{x_n}]} is an array function which returns a lambda expression\n"
"with arguments @code{@var{y_1}, ..., @var{y_m}}.\n"
"The function body is evaluated once for each distinct value of @code{@var{x_1}, ..., @var{x_n}},\n"
"and the body of the lambda expression is that value.\n"
msgstr ""

# Operators.texi
msgid ""
"When the last or only function argument @var{x_n} is a list of one element, the\n"
"function defined by @code{:=} accepts a variable number of arguments.  Actual\n"
"arguments are assigned one-to-one to formal arguments @var{x_1}, @dots{},\n"
"@var{x_(n - 1)}, and any further actual arguments, if present, are assigned to\n"
"@var{x_n} as a list.\n"
msgstr ""

# Operators.texi
msgid ""
"All function definitions appear in the same namespace; defining a function\n"
"@code{f} within another function @code{g} does not automatically limit the scope\n"
"of @code{f} to @code{g}.  However, @code{local(f)} makes the definition of\n"
"function @code{f} effective only within the block or other compound expression\n"
"in which @mref{local} appears.\n"
msgstr ""

# Operators.texi
msgid ""
"If some formal argument @var{x_k} is a quoted symbol, the function defined by\n"
"@code{:=} does not evaluate the corresponding actual argument.  Otherwise all\n"
"actual arguments are evaluated.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @mref{define} and @mrefdot{::=}\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"@code{:=} never evaluates the function body (unless explicitly evaluated by\n"
"quote-quote).\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c expr : cos(y) - sin(x);\n"
"@c F1 (x, y) := expr;\n"
"@c F1 (a, b);\n"
"@c F2 (x, y) := ''expr;\n"
"@c F2 (a, b);\n"
"@c ===end===\n"
"@example\n"
"(%i1) expr : cos(y) - sin(x);\n"
"(%o1)                    cos(y) - sin(x)\n"
"(%i2) F1 (x, y) := expr;\n"
"(%o2)                   F1(x, y) := expr\n"
"(%i3) F1 (a, b);\n"
"(%o3)                    cos(y) - sin(x)\n"
"(%i4) F2 (x, y) := ''expr;\n"
"(%o4)              F2(x, y) := cos(y) - sin(x)\n"
"(%i5) F2 (a, b);\n"
"(%o5)                    cos(b) - sin(a)\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@code{f(@var{x_1}, ..., @var{x_n}) := ...} defines an ordinary function.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c G1(x, y) := (print (\"Evaluating G1 for x=\", x, \"and y=\", y), x.y - y.x);\n"
"@c G1([1, a], [2, b]);\n"
"@c G1([1, a], [2, b]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) G1(x, y) := (print (\"Evaluating G1 for x=\", x, \"and y=\", y), x.y - y.x);\n"
"(%o1) G1(x, y) := (print(\"Evaluating G1 for x=\", x, \"and y=\", \n"
"                                               y), x . y - y . x)\n"
"(%i2) G1([1, a], [2, b]);\n"
"Evaluating G1 for x= [1, a] and y= [2, b] \n"
"(%o2)                           0\n"
"(%i3) G1([1, a], [2, b]);\n"
"Evaluating G1 for x= [1, a] and y= [2, b] \n"
"(%o3)                           0\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@code{f[@var{x_1}, ..., @var{x_n}] := ...} defines an array function.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c G2[a] := (print (\"Evaluating G2 for a=\", a), a^2);\n"
"@c G2[1234];\n"
"@c G2[1234];\n"
"@c G2[2345];\n"
"@c arrayinfo (G2);\n"
"@c listarray (G2);\n"
"@c ===end===\n"
"@example\n"
"(%i1) G2[a] := (print (\"Evaluating G2 for a=\", a), a^2);\n"
"                                                     2\n"
"(%o1)     G2  := (print(\"Evaluating G2 for a=\", a), a )\n"
"            a\n"
"(%i2) G2[1234];\n"
"Evaluating G2 for a= 1234 \n"
"(%o2)                        1522756\n"
"(%i3) G2[1234];\n"
"(%o3)                        1522756\n"
"(%i4) G2[2345];\n"
"Evaluating G2 for a= 2345 \n"
"(%o4)                        5499025\n"
"(%i5) arrayinfo (G2);\n"
"(%o5)              [hashed, 1, [1234], [2345]]\n"
"(%i6) listarray (G2);\n"
"(%o6)                  [1522756, 5499025]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@code{@var{f}[@var{x_1}, ..., @var{x_n}](@var{y_1}, ..., @var{y_m}) := @var{expr}}\n"
"is a special case of an array function.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c G3[n](x) := (print (\"Evaluating G3 for n=\", n), diff (sin(x)^2, x, n));\n"
"@c G3[2];\n"
"@c G3[2];\n"
"@c G3[2](1);\n"
"@c arrayinfo (G3);\n"
"@c listarray (G3);\n"
"@c ===end===\n"
"@example\n"
"(%i1) G3[n](x) := (print (\"Evaluating G3 for n=\", n), diff (sin(x)^2, x, n));\n"
"(%o1) G3 (x) := (print(\"Evaluating G3 for n=\", n), \n"
"        n\n"
"                                                     2\n"
"                                             diff(sin (x), x, n))\n"
"(%i2) G3[2];\n"
"Evaluating G3 for n= 2 \n"
"                                2           2\n"
"(%o2)          lambda([x], 2 cos (x) - 2 sin (x))\n"
"(%i3) G3[2];\n"
"                                2           2\n"
"(%o3)          lambda([x], 2 cos (x) - 2 sin (x))\n"
"(%i4) G3[2](1);\n"
"                           2           2\n"
"(%o4)                 2 cos (1) - 2 sin (1)\n"
"(%i5) arrayinfo (G3);\n"
"(%o5)                   [hashed, 1, [2]]\n"
"(%i6) listarray (G3);\n"
"                                2           2\n"
"(%o6)         [lambda([x], 2 cos (x) - 2 sin (x))]\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"When the last or only function argument @var{x_n} is a list of one element,\n"
"the function defined by @code{:=} accepts a variable number of arguments.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c H ([L]) := apply (\"+\", L);\n"
"@c H (a, b, c);\n"
"@c ===end===\n"
"@example\n"
"(%i1) H ([L]) := apply (\"+\", L);\n"
"(%o1)                H([L]) := apply(\"+\", L)\n"
"(%i2) H (a, b, c);\n"
"(%o2)                       c + b + a\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@code{local} makes a local function definition.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c foo (x) := 1 - x;\n"
"@c foo (100);\n"
"@c block (local (foo), foo (x) := 2 * x, foo (100));\n"
"@c foo (100);\n"
"@c ===end===\n"
"@example\n"
"(%i1) foo (x) := 1 - x;\n"
"(%o1)                    foo(x) := 1 - x\n"
"(%i2) foo (100);\n"
"(%o2)                         - 99\n"
"(%i3) block (local (foo), foo (x) := 2 * x, foo (100));\n"
"(%o3)                          200\n"
"(%i4) foo (100);\n"
"(%o4)                         - 99\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Function definition} @category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node User defined operators, , Assignment operators, Operators\n"
"@section User defined operators\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{infix}\n"
"@deffn  {Function} infix @\n"
"@fname{infix} (@var{op}) @\n"
"@fname{infix} (@var{op}, @var{lbp}, @var{rbp}) @\n"
"@fname{infix} (@var{op}, @var{lbp}, @var{rbp}, @var{lpos}, @var{rpos}, @var{pos})\n"
msgstr ""

# Operators.texi
msgid ""
"Declares @var{op} to be an infix operator.  An infix operator is a function of\n"
"two arguments, with the name of the function written between the arguments.\n"
"For example, the subtraction operator @code{-} is an infix operator.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{infix (@var{op})} declares @var{op} to be an infix operator with default\n"
"binding powers (left and right both equal to 180) and parts of speech (left and\n"
"right both equal to @code{any}).\n"
"@c HOW IS pos DIFFERENT FROM lpos AND rpos ??\n"
msgstr ""

# Operators.texi
msgid ""
"@code{infix (@var{op}, @var{lbp}, @var{rbp})} declares @var{op} to be an infix\n"
"operator with stated left and right binding powers and default parts of speech\n"
"(left and right both equal to @code{any}).\n"
msgstr ""

# Operators.texi
msgid ""
"@code{infix (@var{op}, @var{lbp}, @var{rbp}, @var{lpos}, @var{rpos}, @var{pos})}\n"
"declares @var{op} to be an infix operator with stated left and right binding\n"
"powers and parts of speech @var{lpos}, @var{rpos}, and @var{pos} for the left\n"
"operand, the right operand, and the operator result, respectively.\n"
msgstr ""

# Operators.texi
msgid ""
"\"Part of speech\", in reference to operator declarations, means expression type.\n"
"Three types are recognized: @code{expr}, @code{clause}, and @code{any},\n"
"indicating an algebraic expression, a Boolean expression, or any kind of\n"
"expression, respectively.  Maxima can detect some syntax errors by comparing the\n"
"declared part of speech to an actual expression.\n"
msgstr ""

# Operators.texi
msgid ""
"The precedence of @var{op} with respect to other operators derives from the left\n"
"and right binding powers of the operators in question.  If the left and right\n"
"binding powers of @var{op} are both greater the left and right binding powers of\n"
"some other operator, then @var{op} takes precedence over the other operator.\n"
"If the binding powers are not both greater or less, some more complicated\n"
"relation holds.\n"
msgstr ""

# Operators.texi
msgid ""
"The associativity of @var{op} depends on its binding powers.  Greater left\n"
"binding power (@var{lbp}) implies an instance of @var{op} is evaluated before\n"
"other operators to its left in an expression, while greater right binding power\n"
"(@var{rbp}) implies  an instance of @var{op} is evaluated before other operators\n"
"to its right in an expression.  Thus greater @var{lbp} makes @var{op}\n"
"right-associative, while greater @var{rbp} makes @var{op} left-associative.\n"
"If @var{lbp} is equal to @var{rbp}, @var{op} is left-associative.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @ref{Introduction to operators}.\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"If the left and right binding powers of @var{op} are both greater\n"
"the left and right binding powers of some other operator,\n"
"then @var{op} takes precedence over the other operator.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c :lisp (get '$+ 'lbp)\n"
"@c :lisp (get '$+ 'rbp)\n"
"@c infix (\"##\", 101, 101);\n"
"@c \"##\"(a, b) := sconcat(\"(\", a, \",\", b, \")\");\n"
"@c 1 + a ## b + 2;\n"
"@c infix (\"##\", 99, 99);\n"
"@c 1 + a ## b + 2;\n"
"@c ===end===\n"
"@example\n"
"(%i1) :lisp (get '$+ 'lbp)\n"
"100\n"
"(%i1) :lisp (get '$+ 'rbp)\n"
"100\n"
"(%i1) infix (\"##\", 101, 101);\n"
"(%o1)                          ##\n"
"(%i2) \"##\"(a, b) := sconcat(\"(\", a, \",\", b, \")\");\n"
"(%o2)       (a ## b) := sconcat(\"(\", a, \",\", b, \")\")\n"
"(%i3) 1 + a ## b + 2;\n"
"(%o3)                       (a,b) + 3\n"
"(%i4) infix (\"##\", 99, 99);\n"
"(%o4)                          ##\n"
"(%i5) 1 + a ## b + 2;\n"
"(%o5)                       (a+1,b+2)\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Greater @var{lbp} makes @var{op} right-associative,\n"
"while greater @var{rbp} makes @var{op} left-associative.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c infix (\"##\", 100, 99);\n"
"@c \"##\"(a, b) := sconcat(\"(\", a, \",\", b, \")\")$\n"
"@c foo ## bar ## baz;\n"
"@c infix (\"##\", 100, 101);\n"
"@c foo ## bar ## baz;\n"
"@c ===end===\n"
"@example\n"
"(%i1) infix (\"##\", 100, 99);\n"
"(%o1)                          ##\n"
"(%i2) \"##\"(a, b) := sconcat(\"(\", a, \",\", b, \")\")$\n"
"(%i3) foo ## bar ## baz;\n"
"(%o3)                    (foo,(bar,baz))\n"
"(%i4) infix (\"##\", 100, 101);\n"
"(%o4)                          ##\n"
"(%i5) foo ## bar ## baz;\n"
"(%o5)                    ((foo,bar),baz)\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Maxima can detect some syntax errors by comparing the\n"
"declared part of speech to an actual expression.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c infix (\"##\", 100, 99, expr, expr, expr);\n"
"@c if x ## y then 1 else 0;\n"
"@c infix (\"##\", 100, 99, expr, expr, clause);\n"
"@c if x ## y then 1 else 0;\n"
"@c ===end===\n"
"@example\n"
"(%i1) infix (\"##\", 100, 99, expr, expr, expr);\n"
"(%o1)                          ##\n"
"(%i2) if x ## y then 1 else 0;\n"
"Incorrect syntax: Found algebraic expression where logical\n"
"expression expected\n"
"if x ## y then \n"
"             ^\n"
"(%i2) infix (\"##\", 100, 99, expr, expr, clause);\n"
"(%o2)                          ##\n"
"(%i3) if x ## y then 1 else 0;\n"
"(%o3)                if x ## y then 1 else 0\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators} @category{Declarations and inferences} @category{Syntax}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{matchfix}\n"
"@deffn  {Function} matchfix @\n"
"@fname{matchfix} (@var{ldelimiter}, @var{rdelimiter}) @\n"
"@fname{matchfix} (@var{ldelimiter}, @var{rdelimiter}, @var{arg_pos}, @var{pos})\n"
msgstr ""

# Operators.texi
msgid ""
"Declares a matchfix operator with left and right delimiters @var{ldelimiter}\n"
"and @var{rdelimiter}.  The delimiters are specified as strings.\n"
msgstr ""

# Operators.texi
msgid ""
"A \"matchfix\" operator is a function of any number of arguments,\n"
"such that the arguments occur between matching left and right delimiters.\n"
"The delimiters may be any strings, so long as the parser can\n"
"distinguish the delimiters from the operands \n"
"and other expressions and operators.\n"
"In practice this rules out unparseable delimiters such as\n"
"@code{%}, @code{,}, @code{$} and @code{;}, \n"
"and may require isolating the delimiters with white space.\n"
"The right delimiter can be the same or different from the left delimiter.\n"
msgstr ""

# Operators.texi
msgid ""
"A left delimiter can be associated with only one right delimiter;\n"
"two different matchfix operators cannot have the same left delimiter.\n"
msgstr ""

# Operators.texi
msgid ""
"An existing operator may be redeclared as a matchfix operator\n"
"without changing its other properties.\n"
"In particular, built-in operators such as addition @code{+} can\n"
"be declared matchfix,\n"
"but operator functions cannot be defined for built-in operators.\n"
msgstr ""

# Operators.texi
msgid ""
"The command @code{matchfix (@var{ldelimiter}, @var{rdelimiter}, @var{arg_pos},\n"
"@var{pos})} declares the argument part-of-speech @var{arg_pos} and result\n"
"part-of-speech @var{pos}, and the delimiters @var{ldelimiter} and\n"
"@var{rdelimiter}.\n"
msgstr ""

# Operators.texi
msgid ""
"\"Part of speech\", in reference to operator declarations, means expression type.\n"
"Three types are recognized: @code{expr}, @code{clause}, and @code{any},\n"
"indicating an algebraic expression, a Boolean expression, or any kind of\n"
"expression, respectively.\n"
"Maxima can detect some syntax errors by comparing the\n"
"declared part of speech to an actual expression.\n"
msgstr ""

# Operators.texi
msgid ""
"@c DUNNO IF WE REALLY NEED TO MENTION BINDING POWER HERE -- AS NOTED IT'S IRRELEVANT\n"
"@c An operator declared by @code{matchfix} is assigned a low binding power.\n"
"@c Since a matchfix operator must be evaluated before any expression\n"
"@c which contains it,\n"
"@c binding power is effectively irrelevant\n"
"@c to the declaration of a matchfix operator.\n"
msgstr ""

# Operators.texi
msgid ""
"The function to carry out a matchfix operation is an ordinary\n"
"user-defined function.\n"
"The operator function is defined\n"
"in the usual way\n"
"with the function definition operator @code{:=} or @code{define}.\n"
"The arguments may be written between the delimiters,\n"
"or with the left delimiter as a quoted string and the arguments\n"
"following in parentheses.\n"
"@code{dispfun (@var{ldelimiter})} displays the function definition.\n"
msgstr ""

# Operators.texi
msgid ""
"The only built-in matchfix operator is the list constructor @code{[ ]}.\n"
"Parentheses @code{( )} and double-quotes @code{\" \"} \n"
"act like matchfix operators,\n"
"but are not treated as such by the Maxima parser.\n"
msgstr ""

# Operators.texi
msgid ""
"@code{matchfix} evaluates its arguments.\n"
"@code{matchfix} returns its first argument, @var{ldelimiter}.\n"
"@c HOW TO TAKE AWAY THE MATCHFIX PROPERTY ??\n"
msgstr ""

# Operators.texi
msgid ""
"Examples:\n"
msgstr ""

# Operators.texi
msgid ""
"Delimiters may be almost any strings.\n"
msgstr ""

# Operators.texi
msgid ""
"@c ===beg===\n"
"@c matchfix (\"@@\", \"~\");\n"
"@c @@ a, b, c ~;\n"
"@c matchfix (\">>\", \"<<\");\n"
"@c >> a, b, c <<;\n"
"@c matchfix (\"foo\", \"oof\");\n"
"@c foo a, b, c oof;\n"
"@c >> w + foo x, y oof + z << / @@ p, q ~;\n"
"@c ===end===\n"
"@example\n"
"(%i1) matchfix (\"@@@@\", \"~\");\n"
"(%o1)                          @@@@\n"
"(%i2) @@@@ a, b, c ~;\n"
"(%o2)                      @@@@a, b, c~\n"
"(%i3) matchfix (\">>\", \"<<\");\n"
"(%o3)                          >>\n"
"(%i4) >> a, b, c <<;\n"
"(%o4)                      >>a, b, c<<\n"
"(%i5) matchfix (\"foo\", \"oof\");\n"
"(%o5)                          foo\n"
"(%i6) foo a, b, c oof;\n"
"(%o6)                     fooa, b, coof\n"
"(%i7) >> w + foo x, y oof + z << / @@@@ p, q ~;\n"
"                     >>z + foox, yoof + w<<\n"
"(%o7)                ----------------------\n"
"                            @@@@p, q~\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"Matchfix operators are ordinary user-defined functions.\n"
msgstr ""

# Operators.texi
msgid ""
"@example\n"
"(%i1) matchfix (\"!-\", \"-!\");\n"
"(%o1)                         \"!-\"\n"
"(%i2) !- x, y -! := x/y - y/x;\n"
"                                    x   y\n"
"(%o2)                   !-x, y-! := - - -\n"
"                                    y   x\n"
"(%i3) define (!-x, y-!, x/y - y/x);\n"
"                                    x   y\n"
"(%o3)                   !-x, y-! := - - -\n"
"                                    y   x\n"
"(%i4) define (\"!-\" (x, y), x/y - y/x);\n"
"                                    x   y\n"
"(%o4)                   !-x, y-! := - - -\n"
"                                    y   x\n"
"(%i5) dispfun (\"!-\");\n"
"                                    x   y\n"
"(%t5)                   !-x, y-! := - - -\n"
"                                    y   x\n"
msgstr ""

# Operators.texi
msgid ""
"(%o5)                         done\n"
"(%i6) !-3, 5-!;\n"
"                                16\n"
"(%o6)                         - --\n"
"                                15\n"
"(%i7) \"!-\" (3, 5);\n"
"                                16\n"
"(%o7)                         - --\n"
"                                15\n"
"@end example\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Syntax} @category{Operators}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{function_nary}\n"
"@deffn  {Function} nary @\n"
"@fname{nary} (@var{op}) @\n"
"@fname{nary} (@var{op}, @var{bp}, @var{arg_pos}, @var{pos})\n"
msgstr ""

# Operators.texi
msgid ""
"An @code{nary} operator is used to denote a function of any number of arguments,\n"
"each of which is separated by an occurrence of the operator, e.g.  A+B or A+B+C.\n"
"The @code{nary(\"x\")} function is a syntax extension function to declare @code{x}\n"
"to be an @code{nary} operator.  Functions may be declared to be @code{nary}.  If\n"
"@code{declare(j,nary);} is done, this tells the simplifier to simplify, e.g.\n"
"@code{j(j(a,b),j(c,d))} to @code{j(a, b, c, d)}.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @ref{Introduction to operators}.\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators} @category{Syntax}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{nofix}\n"
"@deffn  {Function} nofix @\n"
"@fname{nofix} (@var{op}) @\n"
"@fname{nofix} (@var{op}, @var{pos})\n"
msgstr ""

# Operators.texi
msgid ""
"@code{nofix} operators are used to denote functions of no arguments.\n"
"The mere presence of such an operator in a command will cause the\n"
"corresponding function to be evaluated.  For example, when one types\n"
"\"exit;\" to exit from a Maxima break, \"exit\" is behaving similar to a\n"
"@code{nofix} operator.  The function @code{nofix(\"x\")} is a syntax extension\n"
"function which declares @code{x} to be a @code{nofix} operator.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @ref{Introduction to operators}.\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators} @category{Syntax}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{postfix}\n"
"@deffn  {Function} postfix @\n"
"@fname{postfix} (@var{op}) @\n"
"@fname{postfix} (@var{op}, @var{lbp}, @var{lpos}, @var{pos})\n"
msgstr ""

# Operators.texi
msgid ""
"@code{postfix} operators like the @code{prefix} variety denote functions of a\n"
"single argument, but in this case the argument immediately precedes an\n"
"occurrence of the operator in the input string, e.g. 3!.  The\n"
"@code{postfix(\"x\")} function is a syntax extension function to declare @code{x}\n"
"to be a @code{postfix} operator.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @ref{Introduction to operators}.\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators} @category{Syntax}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{prefix}\n"
"@deffn  {Function} prefix @\n"
"@fname{prefix} (@var{op}) @\n"
"@fname{prefix} (@var{op}, @var{rbp}, @var{rpos}, @var{pos})\n"
msgstr ""

# Operators.texi
msgid ""
"A @code{prefix} operator is one which signifies a function of one argument,\n"
"which argument immediately follows an occurrence of the operator.\n"
"@code{prefix(\"x\")} is a syntax extension function to declare @code{x} to be a\n"
"@code{prefix} operator.\n"
msgstr ""

# Operators.texi
msgid ""
"See also @ref{Introduction to operators}.\n"
msgstr ""

# Operators.texi
msgid ""
"@opencatbox\n"
"@category{Operators} @category{Syntax}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Operators.texi
msgid ""
msgstr ""
