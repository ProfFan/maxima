# SOME DESCRIPTIVE TITLE.">
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"
msgstr ""
 
# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@page\n"
"@node Arrays, Structures, Lists, Data Types and Structures\n"
"@section Arrays\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Arrays.texi
msgid ""
"@menu\n"
"* Functions and Variables for Arrays::  \n"
"@end menu\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@node Functions and Variables for Arrays,  , Arrays, Arrays\n"
"@subsection Functions and Variables for Arrays\n"
"@c -----------------------------------------------------------------------------\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{array}\n"
"@deffn  {Function} array @\n"
"@fname{array} (@var{name}, @var{dim_1}, @dots{}, @var{dim_n}) @\n"
"@fname{array} (@var{name}, @var{type}, @var{dim_1}, @dots{}, @var{dim_n}) @\n"
"@fname{array} ([@var{name_1}, @dots{}, @var{name_m}], @var{dim_1}, @dots{}, @var{dim_n})\n"
msgstr ""

# Arrays.texi
msgid ""
"Creates an @math{n}-dimensional array.  @math{n} may be less than or equal to 5.\n"
"The subscripts for the @math{i}'th dimension are the integers running from 0 to\n"
"@var{dim_i}.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{array (@var{name}, @var{dim_1}, ..., @var{dim_n})} creates a general\n"
"array.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{array (@var{name}, @var{type}, @var{dim_1}, ..., @var{dim_n})} creates\n"
"an array, with elements of a specified type.  @var{type} can be @code{fixnum}\n"
"for integers of limited size or @code{flonum} for floating-point numbers.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{array ([@var{name_1}, ..., @var{name_m}], @var{dim_1}, ..., @var{dim_n})}\n"
"creates @math{m} arrays, all of the same dimensions.\n"
"@c SAME TYPE AS WELL ??\n"
msgstr ""

# Arrays.texi
msgid ""
"@c THIS DISCUSSION OF UNDECLARED ARRAYS REALLY WANTS TO BE SOMEWHERE ELSE\n"
"If the user assigns to a subscripted variable before declaring the\n"
"corresponding array, an undeclared array is created.\n"
"Undeclared arrays, otherwise known as hashed arrays (because hash\n"
"coding is done on the subscripts), are more general than declared\n"
"arrays.  The user does not declare their maximum size, and they grow\n"
"dynamically by hashing as more elements are assigned values.  The\n"
"subscripts of undeclared arrays need not even be numbers.  However,\n"
"unless an array is rather sparse, it is probably more efficient to\n"
"declare it when possible than to leave it undeclared.  The @code{array}\n"
"function can be used to transform an undeclared array into a declared\n"
"array.\n"
"@c HOW DOES ONE CHANGE AN UNDECLARED ARRAY INTO A DECLARED ARRAY EXACTLY ??\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{arrayapply}\n"
"@deffn {Function} arrayapply (@var{A}, [@var{i_1}, @dots{}, @var{i_n}])\n"
msgstr ""

# Arrays.texi
msgid ""
"Evaluates @code{@var{A} [@var{i_1}, ..., @var{i_n}]},\n"
"where @var{A} is an array and @var{i_1}, @dots{}, @var{i_n} are integers.\n"
msgstr ""

# Arrays.texi
msgid ""
"This is reminiscent of @mrefcomma{apply} except the first argument is an array\n"
"instead of a function.\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Expressions} @category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{arrayinfo}\n"
"@deffn {Function} arrayinfo (@var{A})\n"
msgstr ""

# Arrays.texi
msgid ""
"Returns information about the array @var{A}.\n"
"The argument @var{A} may be a declared array, an undeclared (hashed) array,\n"
"an array function, or a subscripted function.\n"
msgstr ""

# Arrays.texi
msgid ""
"For declared arrays, @code{arrayinfo} returns a list comprising the atom\n"
"@code{declared}, the number of dimensions, and the size of each dimension.\n"
"The elements of the array, both bound and unbound, are returned by\n"
"@code{listarray}.\n"
msgstr ""

# Arrays.texi
msgid ""
"For undeclared arrays (hashed arrays), @code{arrayinfo} returns a list\n"
"comprising the atom @code{hashed}, the number of subscripts,\n"
"and the subscripts of every element which has a value.\n"
"The values are returned by @code{listarray}.\n"
msgstr ""

# Arrays.texi
msgid ""
"For array functions, @code{arrayinfo} returns a list comprising the atom\n"
"@code{hashed}, the number of subscripts,\n"
"and any subscript values for which there are stored function values.\n"
"The stored function values are returned by @code{listarray}.\n"
msgstr ""

# Arrays.texi
msgid ""
"For subscripted functions, @code{arrayinfo} returns a list comprising the atom\n"
"@code{hashed}, the number of subscripts,\n"
"and any subscript values for which there are lambda expressions.\n"
"The lambda expressions are returned by @code{listarray}.\n"
msgstr ""

# Arrays.texi
msgid ""
"See also @mrefdot{listarray}\n"
msgstr ""

# Arrays.texi
msgid ""
"Examples:\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{arrayinfo} and @code{listarray} applied to a declared array.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c array (aa, 2, 3);\n"
"@c aa [2, 3] : %pi;\n"
"@c aa [1, 2] : %e;\n"
"@c arrayinfo (aa);\n"
"@c listarray (aa);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) array (aa, 2, 3);\n"
"(%o1)                          aa\n"
"@end group\n"
"@group\n"
"(%i2) aa [2, 3] : %pi;\n"
"(%o2)                          %pi\n"
"@end group\n"
"@group\n"
"(%i3) aa [1, 2] : %e;\n"
"(%o3)                          %e\n"
"@end group\n"
"@group\n"
"(%i4) arrayinfo (aa);\n"
"(%o4)                 [declared, 2, [2, 3]]\n"
"@end group\n"
"@group\n"
"(%i5) listarray (aa);\n"
"(%o5) [#####, #####, #####, #####, #####, #####, %e, #####, \n"
"                                        #####, #####, #####, %pi]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{arrayinfo} and @code{listarray} applied to an undeclared (hashed) array.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c bb [FOO] : (a + b)^2;\n"
"@c bb [BAR] : (c - d)^3;\n"
"@c arrayinfo (bb);\n"
"@c listarray (bb);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) bb [FOO] : (a + b)^2;\n"
"                                   2\n"
"(%o1)                       (b + a)\n"
"@end group\n"
"@group\n"
"(%i2) bb [BAR] : (c - d)^3;\n"
"                                   3\n"
"(%o2)                       (c - d)\n"
"@end group\n"
"@group\n"
"(%i3) arrayinfo (bb);\n"
"(%o3)               [hashed, 1, [BAR], [FOO]]\n"
"@end group\n"
"@group\n"
"(%i4) listarray (bb);\n"
"                              3         2\n"
"(%o4)                 [(c - d) , (b + a) ]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{arrayinfo} and @code{listarray} applied to an array function.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c cc [x, y] := y / x;\n"
"@c cc [u, v];\n"
"@c cc [4, z];\n"
"@c arrayinfo (cc);\n"
"@c listarray (cc);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) cc [x, y] := y / x;\n"
"                                     y\n"
"(%o1)                      cc     := -\n"
"                             x, y    x\n"
"@end group\n"
"@group\n"
"(%i2) cc [u, v];\n"
"                                v\n"
"(%o2)                           -\n"
"                                u\n"
"@end group\n"
"@group\n"
"(%i3) cc [4, z];\n"
"                                z\n"
"(%o3)                           -\n"
"                                4\n"
"@end group\n"
"@group\n"
"(%i4) arrayinfo (cc);\n"
"(%o4)              [hashed, 2, [4, z], [u, v]]\n"
"@end group\n"
"@group\n"
"(%i5) listarray (cc);\n"
"                              z  v\n"
"(%o5)                        [-, -]\n"
"                              4  u\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{arrayinfo} and @code{listarray} applied to a subscripted function.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c dd [x] (y) := y ^ x;\n"
"@c dd [a + b];\n"
"@c dd [v - u];\n"
"@c arrayinfo (dd);\n"
"@c listarray (dd);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) dd [x] (y) := y ^ x;\n"
"                                     x\n"
"(%o1)                     dd (y) := y\n"
"                            x\n"
"@end group\n"
"@group\n"
"(%i2) dd [a + b];\n"
"                                    b + a\n"
"(%o2)                  lambda([y], y     )\n"
"@end group\n"
"@group\n"
"(%i3) dd [v - u];\n"
"                                    v - u\n"
"(%o3)                  lambda([y], y     )\n"
"@end group\n"
"@group\n"
"(%i4) arrayinfo (dd);\n"
"(%o4)             [hashed, 1, [b + a], [v - u]]\n"
"@end group\n"
"@group\n"
"(%i5) listarray (dd);\n"
"                         b + a                v - u\n"
"(%o5)      [lambda([y], y     ), lambda([y], y     )]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{arraymake}\n"
"@deffn {Function} arraymake (@var{A}, [@var{i_1}, @dots{}, @var{i_n}])\n"
msgstr ""

# Arrays.texi
msgid ""
"Returns the expression @code{@var{A}[@var{i_1}, ..., @var{i_n}]}.\n"
"The result is an unevaluated array reference.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{arraymake} is reminiscent of @mrefcomma{funmake} except the return value\n"
"is an unevaluated array reference instead of an unevaluated function call.\n"
msgstr ""

# Arrays.texi
msgid ""
"Examples:\n"
"@c ===beg===\n"
"@c arraymake (A, [1]);\n"
"@c arraymake (A, [k]);\n"
"@c arraymake (A, [i, j, 3]);\n"
"@c array (A, fixnum, 10);\n"
"@c fillarray (A, makelist (i^2, i, 1, 11));\n"
"@c arraymake (A, [5]);\n"
"@c ''%;\n"
"@c L : [a, b, c, d, e];\n"
"@c arraymake ('L, [n]);\n"
"@c ''%, n = 3;\n"
"@c A2 : make_array (fixnum, 10);\n"
"@c fillarray (A2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"@c arraymake ('A2, [8]);\n"
"@c ''%;\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) arraymake (A, [1]);\n"
"(%o1)                          A\n"
"                                1\n"
"@end group\n"
"@group\n"
"(%i2) arraymake (A, [k]);\n"
"(%o2)                          A\n"
"                                k\n"
"@end group\n"
"@group\n"
"(%i3) arraymake (A, [i, j, 3]);\n"
"(%o3)                       A\n"
"                             i, j, 3\n"
"@end group\n"
"@group\n"
"(%i4) array (A, fixnum, 10);\n"
"(%o4)                           A\n"
"@end group\n"
"@group\n"
"(%i5) fillarray (A, makelist (i^2, i, 1, 11));\n"
"(%o5)                           A\n"
"@end group\n"
"@group\n"
"(%i6) arraymake (A, [5]);\n"
"(%o6)                          A\n"
"                                5\n"
"@end group\n"
"@group\n"
"(%i7) ''%;\n"
"(%o7)                          36\n"
"@end group\n"
"@group\n"
"(%i8) L : [a, b, c, d, e];\n"
"(%o8)                    [a, b, c, d, e]\n"
"@end group\n"
"@group\n"
"(%i9) arraymake ('L, [n]);\n"
"(%o9)                          L\n"
"                                n\n"
"@end group\n"
"@group\n"
"(%i10) ''%, n = 3;\n"
"(%o10)                          c\n"
"@end group\n"
"@group\n"
"(%i11) A2 : make_array (fixnum, 10);\n"
"(%o11)          @{Array:  #(0 0 0 0 0 0 0 0 0 0)@}\n"
"@end group\n"
"@group\n"
"(%i12) fillarray (A2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"(%o12)          @{Array:  #(1 2 3 4 5 6 7 8 9 10)@}\n"
"@end group\n"
"@group\n"
"(%i13) arraymake ('A2, [8]);\n"
"(%o13)                         A2\n"
"                                 8\n"
"@end group\n"
"@group\n"
"(%i14) ''%;\n"
"(%o14)                          9\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Expressions} @category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{arrays}\n"
"@defvr {System variable} arrays\n"
"Default value: @code{[]}\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{arrays} is a list of arrays that have been allocated.\n"
"These comprise arrays declared by @code{array}, hashed arrays constructed by\n"
"implicit definition (assigning something to an array element),\n"
"and array functions defined by @code{:=} and @code{define}.\n"
"Arrays defined by @mref{make_array} are not included.\n"
msgstr ""

# Arrays.texi
msgid ""
"See also\n"
"@mrefcomma{array} @mrefcomma{arrayapply} @mrefcomma{arrayinfo}@w{}\n"
"@mrefcomma{arraymake} @mrefcomma{fillarray} @mrefcomma{listarray} and\n"
"@mrefdot{rearray}\n"
"@c IS THIS AN EXHAUSTIVE LIST ??\n"
msgstr ""

# Arrays.texi
msgid ""
"Examples:\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c array (aa, 5, 7);\n"
"@c bb [FOO] : (a + b)^2;\n"
"@c cc [x] := x/100;\n"
"@c dd : make_array ('any, 7);\n"
"@c arrays;\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) array (aa, 5, 7);\n"
"(%o1)                          aa\n"
"@end group\n"
"@group\n"
"(%i2) bb [FOO] : (a + b)^2;\n"
"                                   2\n"
"(%o2)                       (b + a)\n"
"@end group\n"
"@group\n"
"(%i3) cc [x] := x/100;\n"
"                                   x\n"
"(%o3)                      cc  := ---\n"
"                             x    100\n"
"@end group\n"
"@group\n"
"(%i4) dd : make_array ('any, 7);\n"
"(%o4)       @{Array:  #(NIL NIL NIL NIL NIL NIL NIL)@}\n"
"@end group\n"
"@group\n"
"(%i5) arrays;\n"
"(%o5)                     [aa, bb, cc]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays} @category{Global variables}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{arraysetapply}\n"
"@deffn {Function} arraysetapply (@var{A}, [@var{i_1}, @dots{}, @var{i_n}], @var{x})\n"
msgstr ""

# Arrays.texi
msgid ""
"Assigns @var{x} to @code{@var{A}[@var{i_1}, ..., @var{i_n}]},\n"
"where @var{A} is an array and @var{i_1}, @dots{}, @var{i_n} are integers.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{arraysetapply} evaluates its arguments.\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Expressions} @category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{fillarray}\n"
"@deffn {Function} fillarray (@var{A}, @var{B})\n"
msgstr ""

# Arrays.texi
msgid ""
"Fills array @var{A} from @var{B}, which is a list or an array.\n"
msgstr ""

# Arrays.texi
msgid ""
"If a specific type was declared for @var{A} when it was created,\n"
"it can only be filled with elements of that same type;\n"
"it is an error if an attempt is made to copy an element of a different type.\n"
msgstr ""

# Arrays.texi
msgid ""
"If the dimensions of the arrays @var{A} and @var{B} are\n"
"different, @var{A} is filled in row-major order.  If there are not enough\n"
"elements in @var{B} the last element is used to fill out the\n"
"rest of @var{A}.  If there are too many, the remaining ones are ignored.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{fillarray} returns its first argument.\n"
msgstr ""

# Arrays.texi
msgid ""
"Examples:\n"
msgstr ""

# Arrays.texi
msgid ""
"Create an array of 9 elements and fill it from a list.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c array (a1, fixnum, 8);\n"
"@c listarray (a1);\n"
"@c fillarray (a1, [1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
"@c listarray (a1);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) array (a1, fixnum, 8);\n"
"(%o1)                          a1\n"
"@end group\n"
"@group\n"
"(%i2) listarray (a1);\n"
"(%o2)              [0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
"@end group\n"
"@group\n"
"(%i3) fillarray (a1, [1, 2, 3, 4, 5, 6, 7, 8, 9]);\n"
"(%o3)                          a1\n"
"@end group\n"
"@group\n"
"(%i4) listarray (a1);\n"
"(%o4)              [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"When there are too few elements to fill the array,\n"
"the last element is repeated.\n"
"When there are too many elements,\n"
"the extra elements are ignored.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c a2 : make_array (fixnum, 8);\n"
"@c fillarray (a2, [1, 2, 3, 4, 5]);\n"
"@c fillarray (a2, [4]);\n"
"@c fillarray (a2, makelist (i, i, 1, 100));\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) a2 : make_array (fixnum, 8);\n"
"(%o1)             @{Array:  #(0 0 0 0 0 0 0 0)@}\n"
"@end group\n"
"@group\n"
"(%i2) fillarray (a2, [1, 2, 3, 4, 5]);\n"
"(%o2)             @{Array:  #(1 2 3 4 5 5 5 5)@}\n"
"@end group\n"
"@group\n"
"(%i3) fillarray (a2, [4]);\n"
"(%o3)             @{Array:  #(4 4 4 4 4 4 4 4)@}\n"
"@end group\n"
"@group\n"
"(%i4) fillarray (a2, makelist (i, i, 1, 100));\n"
"(%o4)             @{Array:  #(1 2 3 4 5 6 7 8)@}\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"Multple-dimension arrays are filled in row-major order.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c a3 : make_array (fixnum, 2, 5);\n"
"@c fillarray (a3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"@c a4 : make_array (fixnum, 5, 2);\n"
"@c fillarray (a4, a3);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) a3 : make_array (fixnum, 2, 5);\n"
"(%o1)        @{Array:  #2A((0 0 0 0 0) (0 0 0 0 0))@}\n"
"@end group\n"
"@group\n"
"(%i2) fillarray (a3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n"
"(%o2)        @{Array:  #2A((1 2 3 4 5) (6 7 8 9 10))@}\n"
"@end group\n"
"@group\n"
"(%i3) a4 : make_array (fixnum, 5, 2);\n"
"(%o3)     @{Array:  #2A((0 0) (0 0) (0 0) (0 0) (0 0))@}\n"
"@end group\n"
"@group\n"
"(%i4) fillarray (a4, a3);\n"
"(%o4)     @{Array:  #2A((1 2) (3 4) (5 6) (7 8) (9 10))@}\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{listarray}\n"
"@deffn {Function} listarray (@var{A})\n"
msgstr ""

# Arrays.texi
msgid ""
"Returns a list of the elements of the array @var{A}.\n"
"The argument @var{A} may be a declared array, an undeclared (hashed) array,\n"
"an array function, or a subscripted function.\n"
msgstr ""

# Arrays.texi
msgid ""
"Elements are listed in row-major order.\n"
"That is, elements are sorted according to the first index, then according to\n"
"the second index, and so on.  The sorting order of index values is the same as\n"
"the order established by @mrefdot{orderless}\n"
msgstr ""

# Arrays.texi
msgid ""
"For undeclared arrays, array functions, and subscripted functions,\n"
"the elements correspond to the index values returned by @mrefdot{arrayinfo}\n"
msgstr ""

# Arrays.texi
msgid ""
"Unbound elements of declared general arrays (that is, not @code{fixnum} and not\n"
"@code{flonum}) are returned as @code{#####}.\n"
"Unbound elements of declared @code{fixnum} or @code{flonum} arrays\n"
"are returned as 0 or 0.0, respectively.\n"
"Unbound elements of undeclared arrays, array functions,\n"
"and subscripted functions are not returned.\n"
msgstr ""

# Arrays.texi
msgid ""
"Examples:\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{listarray} and @code{arrayinfo} applied to a declared array.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c array (aa, 2, 3);\n"
"@c aa [2, 3] : %pi;\n"
"@c aa [1, 2] : %e;\n"
"@c listarray (aa);\n"
"@c arrayinfo (aa);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) array (aa, 2, 3);\n"
"(%o1)                          aa\n"
"@end group\n"
"@group\n"
"(%i2) aa [2, 3] : %pi;\n"
"(%o2)                          %pi\n"
"@end group\n"
"@group\n"
"(%i3) aa [1, 2] : %e;\n"
"(%o3)                          %e\n"
"@end group\n"
"@group\n"
"(%i4) listarray (aa);\n"
"(%o4) [#####, #####, #####, #####, #####, #####, %e, #####, \n"
"                                        #####, #####, #####, %pi]\n"
"@end group\n"
"@group\n"
"(%i5) arrayinfo (aa);\n"
"(%o5)                 [declared, 2, [2, 3]]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{listarray} and @code{arrayinfo} applied to an undeclared (hashed) array.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c bb [FOO] : (a + b)^2;\n"
"@c bb [BAR] : (c - d)^3;\n"
"@c listarray (bb);\n"
"@c arrayinfo (bb);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) bb [FOO] : (a + b)^2;\n"
"                                   2\n"
"(%o1)                       (b + a)\n"
"@end group\n"
"@group\n"
"(%i2) bb [BAR] : (c - d)^3;\n"
"                                   3\n"
"(%o2)                       (c - d)\n"
"@end group\n"
"@group\n"
"(%i3) listarray (bb);\n"
"                              3         2\n"
"(%o3)                 [(c - d) , (b + a) ]\n"
"@end group\n"
"@group\n"
"(%i4) arrayinfo (bb);\n"
"(%o4)               [hashed, 1, [BAR], [FOO]]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{listarray} and @code{arrayinfo} applied to an array function.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c cc [x, y] := y / x;\n"
"@c cc [u, v];\n"
"@c cc [4, z];\n"
"@c listarray (cc);\n"
"@c arrayinfo (cc);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) cc [x, y] := y / x;\n"
"                                     y\n"
"(%o1)                      cc     := -\n"
"                             x, y    x\n"
"@end group\n"
"@group\n"
"(%i2) cc [u, v];\n"
"                                v\n"
"(%o2)                           -\n"
"                                u\n"
"@end group\n"
"@group\n"
"(%i3) cc [4, z];\n"
"                                z\n"
"(%o3)                           -\n"
"                                4\n"
"@end group\n"
"@group\n"
"(%i4) listarray (cc);\n"
"                              z  v\n"
"(%o4)                        [-, -]\n"
"                              4  u\n"
"@end group\n"
"@group\n"
"(%i5) arrayinfo (cc);\n"
"(%o5)              [hashed, 2, [4, z], [u, v]]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{listarray} and @code{arrayinfo} applied to a subscripted function.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c dd [x] (y) := y ^ x;\n"
"@c dd [a + b];\n"
"@c dd [v - u];\n"
"@c listarray (dd);\n"
"@c arrayinfo (dd);\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) dd [x] (y) := y ^ x;\n"
"                                     x\n"
"(%o1)                     dd (y) := y\n"
"                            x\n"
"@end group\n"
"@group\n"
"(%i2) dd [a + b];\n"
"                                    b + a\n"
"(%o2)                  lambda([y], y     )\n"
"@end group\n"
"@group\n"
"(%i3) dd [v - u];\n"
"                                    v - u\n"
"(%o3)                  lambda([y], y     )\n"
"@end group\n"
"@group\n"
"(%i4) listarray (dd);\n"
"                         b + a                v - u\n"
"(%o4)      [lambda([y], y     ), lambda([y], y     )]\n"
"@end group\n"
"@group\n"
"(%i5) arrayinfo (dd);\n"
"(%o5)             [hashed, 1, [b + a], [v - u]]\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c NEEDS CLARIFICATION\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{make_array}\n"
"@deffn {Function} make_array (@var{type}, @var{dim_1}, @dots{}, @var{dim_n})\n"
msgstr ""

# Arrays.texi
msgid ""
"Creates and returns a Lisp array.  @var{type} may\n"
"be @code{any}, @code{flonum}, @code{fixnum}, @code{hashed} or \n"
"@code{functional}.\n"
"There are @math{n} indices,\n"
"and the @math{i}'th index runs from 0 to @math{@var{dim_i} - 1}.\n"
msgstr ""

# Arrays.texi
msgid ""
"The advantage of @code{make_array} over @mref{array} is that the return value\n"
"doesn't have a name, and once a pointer to it goes away, it will also go away.\n"
"For example, if @code{y: make_array (...)} then @code{y} points to an object \n"
"which takes up space, but after @code{y: false}, @code{y} no longer\n"
"points to that object, so the object can be garbage collected.\n"
msgstr ""

# Arrays.texi
msgid ""
"@c 'FUNCTIONAL ARGUMENT IN MAKE_ARRAY APPEARS TO BE BROKEN\n"
"@c EVEN AFTER READING THE CODE (SRC/AR.LISP) I CAN'T TELL HOW THIS IS SUPPOSED TO WORK\n"
"@c COMMENTING OUT THIS STUFF TO PREVENT CONFUSION AND HEARTBREAK\n"
"@c RESTORE IT WHEN MAKE_ARRAY ('FUNCTIONAL, ...) IS FIXED\n"
"@c @code{y: make_array ('functional, 'f, 'hashed, 1)} - the second argument to\n"
"@c @code{make_array} in this case is the function to call to calculate array\n"
"@c elements, and the rest of the arguments are passed recursively to\n"
"@c @code{make_array} to generate the \"memory\" for the array function object.\n"
msgstr ""

# Arrays.texi
msgid ""
"Examples:\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c A1 : make_array (fixnum, 10);\n"
"@c A1 [8] : 1729;\n"
"@c A1;\n"
"@c A2 : make_array (flonum, 10);\n"
"@c A2 [2] : 2.718281828;\n"
"@c A2;\n"
"@c A3 : make_array (any, 10);\n"
"@c A3 [4] : x - y - z;\n"
"@c A3;\n"
"@c A4 : make_array (fixnum, 2, 3, 5);\n"
"@c fillarray (A4, makelist (i, i, 1, 2*3*5));\n"
"@c A4 [0, 2, 1];\n"
"@c ===end===\n"
"@example\n"
"@group\n"
"(%i1) A1 : make_array (fixnum, 10);\n"
"(%o1)           @{Array:  #(0 0 0 0 0 0 0 0 0 0)@}\n"
"@end group\n"
"@group\n"
"(%i2) A1 [8] : 1729;\n"
"(%o2)                         1729\n"
"@end group\n"
"@group\n"
"(%i3) A1;\n"
"(%o3)          @{Array:  #(0 0 0 0 0 0 0 0 1729 0)@}\n"
"@end group\n"
"@group\n"
"(%i4) A2 : make_array (flonum, 10);\n"
"(%o4) @{Array:  #(0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)@}\n"
"@end group\n"
"@group\n"
"(%i5) A2 [2] : 2.718281828;\n"
"(%o5)                      2.718281828\n"
"@end group\n"
"@group\n"
"(%i6) A2;\n"
"(%o6) \n"
"     @{Array:  #(0.0 0.0 2.718281828 0.0 0.0 0.0 0.0 0.0 0.0 0.0)@}\n"
"@end group\n"
"@group\n"
"(%i7) A3 : make_array (any, 10);\n"
"(%o7) @{Array:  #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)@}\n"
"@end group\n"
"@group\n"
"(%i8) A3 [4] : x - y - z;\n"
"(%o8)                      - z - y + x\n"
"@end group\n"
"@group\n"
"(%i9) A3;\n"
"(%o9) @{Array:  #(NIL NIL NIL NIL ((MPLUS SIMP) $X ((MTIMES SIMP)\\n"
" -1 $Y) ((MTIMES SIMP) -1 $Z))\n"
"  NIL NIL NIL NIL NIL)@}\n"
"@end group\n"
"@group\n"
"(%i10) A4 : make_array (fixnum, 2, 3, 5);\n"
"(%o10) @{Array:  #3A(((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)) ((0 0 \\n"
"0 0 0) (0 0 0 0 0) (0 0 0 0 0)))@}\n"
"@end group\n"
"@group\n"
"(%i11) fillarray (A4, makelist (i, i, 1, 2*3*5));\n"
"(%o11) @{Array:  #3A(((1 2 3 4 5) (6 7 8 9 10) (11 12 13 14 15))\n"
"    ((16 17 18 19 20) (21 22 23 24 25) (26 27 28 29 30)))@}\n"
"@end group\n"
"@group\n"
"(%i12) A4 [0, 2, 1];\n"
"(%o12)                         12\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c DOES THIS MODIFY A OR DOES IT CREATE A NEW ARRAY ??\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{rearray}\n"
"@deffn {Function} rearray (@var{A}, @var{dim_1}, @dots{}, @var{dim_n})\n"
msgstr ""

# Arrays.texi
msgid ""
"Changes the dimensions of an array.\n"
"The new array will be filled with the elements of the old one in\n"
"row-major order.  If the old array was too small, \n"
"the remaining elements are filled with\n"
"@code{false}, @code{0.0} or @code{0},\n"
"depending on the type of the array.  The type of the array cannot be\n"
"changed.\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{remarray}\n"
"@deffn  {Function} remarray @\n"
"@fname{remarray} (@var{A_1}, @dots{}, @var{A_n}) @\n"
"@fname{remarray} (all)\n"
msgstr ""

# Arrays.texi
msgid ""
"Removes arrays and array associated functions and frees the storage occupied.\n"
"The arguments may be declared arrays, undeclared (hashed) arrays, array\n"
"functions, and subscripted functions.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{remarray (all)} removes all items in the global list @mrefdot{arrays}\n"
msgstr ""

# Arrays.texi
msgid ""
"@c WHAT DOES THIS MEAN EXACTLY ??\n"
"It may be necessary to use this function if it is\n"
"desired to redefine the values in a hashed array.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{remarray} returns the list of arrays removed.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{remarray} quotes its arguments.\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{subvar}\n"
"@deffn {Function} subvar (@var{x}, @var{i})\n"
msgstr ""

# Arrays.texi
msgid ""
"Evaluates the subscripted expression @code{@var{x}[@var{i}]}.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{subvar} evaluates its arguments.\n"
msgstr ""

# Arrays.texi
msgid ""
"@code{arraymake (@var{x}, [@var{i}])} constructs the expression\n"
"@code{@var{x}[@var{i}]}, but does not evaluate it.\n"
msgstr ""

# Arrays.texi
msgid ""
"Examples:\n"
msgstr ""

# Arrays.texi
msgid ""
"@c ===beg===\n"
"@c x : foo $\n"
"@c i : 3 $\n"
"@c subvar (x, i);\n"
"@c foo : [aa, bb, cc, dd, ee]$\n"
"@c subvar (x, i);\n"
"@c arraymake (x, [i]);\n"
"@c ''%;\n"
"@c ===end===\n"
"@example\n"
"(%i1) x : foo $\n"
"(%i2) i : 3 $\n"
"@group\n"
"(%i3) subvar (x, i);\n"
"(%o3)                         foo\n"
"                                 3\n"
"@end group\n"
"(%i4) foo : [aa, bb, cc, dd, ee]$\n"
"@group\n"
"(%i5) subvar (x, i);\n"
"(%o5)                          cc\n"
"@end group\n"
"@group\n"
"(%i6) arraymake (x, [i]);\n"
"(%o6)                         foo\n"
"                                 3\n"
"@end group\n"
"@group\n"
"(%i7) ''%;\n"
"(%o7)                          cc\n"
"@end group\n"
"@end example\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Expressions} @category{Arrays}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c NEEDS EXPANSION AND EXAMPLES\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{subvarp}\n"
"@deffn {Function} subvarp (@var{expr})\n"
msgstr ""

# Arrays.texi
msgid ""
"Returns @code{true} if @var{expr} is a subscripted variable, for example\n"
"@code{a[i]}.\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Predicate functions}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{use_fast_arrays}\n"
"@defvr {Option variable} use_fast_arrays\n"
"Default value: @code{false}\n"
msgstr ""

# Arrays.texi
msgid ""
"When @code{use_fast_arrays} is @code{true},\n"
"undeclared arrays and arrays declared by @code{array} are values instead of properties,\n"
"and undeclared arrays are implemented as Lisp hash tables.\n"
msgstr ""

# Arrays.texi
msgid ""
"When @code{use_fast_arrays} is @code{false},\n"
"undeclared arrays and arrays declared by @code{array} are properties,\n"
"and undeclared arrays are implemented with Maxima's own hash table implementation.\n"
msgstr ""

# Arrays.texi
msgid ""
"Arrays created by @code{make_array} are not affected by @code{use_fast_arrays}.\n"
msgstr ""

# Arrays.texi
msgid ""
"See also @mrefdot{translate_fast_arrays}\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays} @category{Global flags}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""

# Arrays.texi
msgid ""
"@c -----------------------------------------------------------------------------\n"
"@anchor{translate_fast_arrays}\n"
"@defvr {Option variable} translate_fast_arrays\n"
"Default value: @code{false}\n"
msgstr ""

# Arrays.texi
msgid ""
"When @code{translate_fast_arrays} is @code{true},\n"
"the Maxima-to-Lisp translator generates code that assumes arrays are values instead of properties,\n"
"as if @code{use_fast_arrays} were @code{true}.\n"
msgstr ""

# Arrays.texi
msgid ""
"When @code{translate_fast_arrays} is @code{false},\n"
"the Maxima-to-Lisp translator generates code that assumes arrays are properties,\n"
"as if @code{use_fast_arrays} were @code{false}.\n"
msgstr ""

# Arrays.texi
msgid ""
"@opencatbox\n"
"@category{Arrays} @category{Translation flags and variables}\n"
"@closecatbox\n"
"@end defvr\n"
msgstr ""
