# This file contains all translatable strings from a .texi file.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL>, YEAR.
#
#, fuzzy
msgid ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL>\n"
"Language-Team: LANGUAGE <LL.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
msgstr ""

#: nset.texi:5
msgid ""
"@menu\n"
"* Introduction to Sets::       \n"
"* Functions and Variables for Sets::       \n"
"@end menu\n"
msgstr ""

#: nset.texi:8
msgid ""
"@node Introduction to Sets, Functions and Variables for Sets, Sets, Sets\n"
"@section Introduction to Sets\n"
msgstr ""

#: nset.texi:14
msgid ""
"Maxima provides set functions, such as intersection and \n"
"union, for finite sets that are defined by explicit enumeration.\n"
"Maxima treats \n"
"lists and sets as distinct objects. This feature makes it possible to\n"
"work with sets that have members that are either lists or sets.\n"
msgstr ""

#: nset.texi:20
msgid ""
"In addition to functions for finite sets, Maxima provides some\n"
"functions related to combinatorics; these include the Stirling\n"
"numbers of the first and second kind, the Bell numbers, multinomial\n"
"coefficients, partitions of nonnegative integers, and a few others. \n"
"Maxima also defines a Kronecker delta function.\n"
msgstr ""

#: nset.texi:22
msgid ""
"@subsection Usage\n"
msgstr ""

#: nset.texi:28
msgid ""
"To construct a set with members @code{a_1, ..., a_n}, write\n"
"@code{set(a_1, ..., a_n)} or @code{@{a_1, ..., a_n@}};\n"
"to construct the empty set, write @code{set()} or @code{@{@}}.\n"
"In input, @code{set(...)} and @code{@{ ... @}} are equivalent.\n"
"Sets are always displayed with curly braces.\n"
msgstr ""

#: nset.texi:31
msgid ""
"If a member is listed more than\n"
"once, simplification eliminates the redundant member.\n"
msgstr ""

#: nset.texi:60
msgid ""
"@c ===beg===\n"
"@c set();\n"
"@c set(a, b, a);\n"
"@c set(a, set(b));\n"
"@c set(a, [b]);\n"
"@c {};\n"
"@c {a, b, a};\n"
"@c {a, {b}};\n"
"@c {a, [b]};\n"
"@c ===end===\n"
"@example\n"
"(%i1) set();\n"
"(%o1)                          @{@}\n"
"(%i2) set(a, b, a);\n"
"(%o2)                        @{a, b@}\n"
"(%i3) set(a, set(b));\n"
"(%o3)                       @{a, @{b@}@}\n"
"(%i4) set(a, [b]);\n"
"(%o4)                       @{a, [b]@}\n"
"(%i5) @{@};\n"
"(%o5)                          @{@}\n"
"(%i6) @{a, b, a@};\n"
"(%o6)                        @{a, b@}\n"
"(%i7) @{a, @{b@}@};\n"
"(%o7)                       @{a, @{b@}@}\n"
"(%i8) @{a, [b]@};\n"
"(%o8)                       @{a, [b]@}\n"
"@end example\n"
msgstr ""

#: nset.texi:69
msgid ""
"Two would-be elements @var{x} and @var{y} are redundant\n"
"(i.e., considered the same for the purpose of set construction)\n"
"if and only if @code{is(@var{x} = @var{y})} yields @code{true}.\n"
"@c THAT IS BECAUSE THE SET SIMPLIFICATION CODE CALLS THE LISP FUNCTION LIKE,\n"
"@c AND SO DOES THE CODE TO EVALUATE IS (X = Y).\n"
"Note that @code{is(equal(@var{x}, @var{y}))} can yield @code{true}\n"
"while @code{is(@var{x} = @var{y})} yields @code{false};\n"
"in that case the elements @var{x} and @var{y} are considered distinct.\n"
msgstr ""

#: nset.texi:111
msgid ""
"@c ===beg===\n"
"@c x: a/c + b/c;\n"
"@c y: a/c + b/c;\n"
"@c z: (a + b)/c;\n"
"@c is (x = y);\n"
"@c is (y = z);\n"
"@c is (equal (y, z));\n"
"@c y - z;\n"
"@c ratsimp (%);\n"
"@c {x, y, z};\n"
"@c ===end===\n"
"@example\n"
"(%i1) x: a/c + b/c;\n"
"                              b   a\n"
"(%o1)                         - + -\n"
"                              c   c\n"
"(%i2) y: a/c + b/c;\n"
"                              b   a\n"
"(%o2)                         - + -\n"
"                              c   c\n"
"(%i3) z: (a + b)/c;\n"
"                              b + a\n"
"(%o3)                         -----\n"
"                                c\n"
"(%i4) is (x = y);\n"
"(%o4)                         true\n"
"(%i5) is (y = z);\n"
"(%o5)                         false\n"
"(%i6) is (equal (y, z));\n"
"(%o6)                         true\n"
"(%i7) y - z;\n"
"                           b + a   b   a\n"
"(%o7)                    - ----- + - + -\n"
"                             c     c   c\n"
"(%i8) ratsimp (%);\n"
"(%o8)                           0\n"
"(%i9) @{x, y, z@};\n"
"                          b + a  b   a\n"
"(%o9)                    @{-----, - + -@}\n"
"                            c    c   c\n"
"@end example\n"
msgstr ""

#: nset.texi:113
msgid ""
"To construct a set from the elements of a list, use @code{setify}.\n"
msgstr ""

#: nset.texi:121
msgid ""
"@c ===beg===\n"
"@c setify ([b, a]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) setify ([b, a]);\n"
"(%o1)                        @{a, b@}\n"
"@end example\n"
msgstr ""

#: nset.texi:125
msgid ""
"Set members @code{x} and @code{y} are equal provided @code{is(x = y)} \n"
"evaluates to @code{true}. Thus @code{rat(x)} and @code{x} are equal as set\n"
"members; consequently, \n"
msgstr ""

#: nset.texi:133
msgid ""
"@c ===beg===\n"
"@c {x, rat(x)};\n"
"@c ===end===\n"
"@example\n"
"(%i1) @{x, rat(x)@};\n"
"(%o1)                          @{x@}\n"
"@end example\n"
msgstr ""

#: nset.texi:136
msgid ""
"Further, since @code{is((x - 1)*(x + 1) = x^2 - 1)} evaluates to @code{false}, \n"
"@code{(x - 1)*(x + 1)} and @code{x^2 - 1} are distinct set members; thus \n"
msgstr ""

#: nset.texi:145
msgid ""
"@c ===beg===\n"
"@c {(x - 1)*(x + 1), x^2 - 1};\n"
"@c ===end===\n"
"@example\n"
"(%i1) @{(x - 1)*(x + 1), x^2 - 1@};\n"
"                                       2\n"
"(%o1)               @{(x - 1) (x + 1), x  - 1@}\n"
"@end example\n"
msgstr ""

#: nset.texi:147
msgid ""
"To reduce this set to a singleton set, apply @code{rat} to each set member:\n"
msgstr ""

#: nset.texi:160
msgid ""
"@c ===beg===\n"
"@c {(x - 1)*(x + 1), x^2 - 1};\n"
"@c map (rat, %);\n"
"@c ===end===\n"
"@example\n"
"(%i1) @{(x - 1)*(x + 1), x^2 - 1@};\n"
"                                       2\n"
"(%o1)               @{(x - 1) (x + 1), x  - 1@}\n"
"(%i2) map (rat, %);\n"
"                              2\n"
"(%o2)/R/                    @{x  - 1@}\n"
"@end example\n"
msgstr ""

#: nset.texi:163
msgid ""
"To remove redundancies from other sets, you may need to use other\n"
"simplification functions. Here is an example that uses @code{trigsimp}:\n"
msgstr ""

#: nset.texi:175
msgid ""
"@c ===beg===\n"
"@c {1, cos(x)^2 + sin(x)^2};\n"
"@c map (trigsimp, %);\n"
"@c ===end===\n"
"@example\n"
"(%i1) @{1, cos(x)^2 + sin(x)^2@};\n"
"                            2         2\n"
"(%o1)                @{1, sin (x) + cos (x)@}\n"
"(%i2) map (trigsimp, %);\n"
"(%o2)                          @{1@}\n"
"@end example\n"
msgstr ""

#: nset.texi:180
msgid ""
"A set is simplified when its members are non-redundant and\n"
"sorted. The current version of the set functions uses the Maxima function\n"
"@code{orderlessp} to order sets; however, @i{future versions of \n"
"the set functions might use a different ordering function}.\n"
msgstr ""

#: nset.texi:183
msgid ""
"Some operations on sets, such as substitution, automatically force a \n"
"re-simplification; for example,\n"
msgstr ""

#: nset.texi:199
msgid ""
"@c ===beg===\n"
"@c s: {a, b, c}$\n"
"@c subst (c=a, s);\n"
"@c subst ([a=x, b=x, c=x], s);\n"
"@c map (lambda ([x], x^2), set (-1, 0, 1));\n"
"@c ===end===\n"
"@example\n"
"(%i1) s: @{a, b, c@}$\n"
"(%i2) subst (c=a, s);\n"
"(%o2)                        @{a, b@}\n"
"(%i3) subst ([a=x, b=x, c=x], s);\n"
"(%o3)                          @{x@}\n"
"(%i4) map (lambda ([x], x^2), set (-1, 0, 1));\n"
"(%o4)                        @{0, 1@}\n"
"@end example\n"
msgstr ""

#: nset.texi:205
msgid ""
"Maxima treats lists and sets as distinct objects;\n"
"functions such as @code{union} and @code{intersection} complain\n"
"if any argument is not a set. If you need to apply a set\n"
"function to a list, use the @code{setify} function to convert it\n"
"to a set. Thus\n"
msgstr ""

#: nset.texi:217
msgid ""
"@c ===beg===\n"
"@c union ([1, 2], {a, b});\n"
"@c union (setify ([1, 2]), {a, b});\n"
"@c ===end===\n"
"@example\n"
"(%i1) union ([1, 2], @{a, b@});\n"
"Function union expects a set, instead found [1,2]\n"
" -- an error.  Quitting.  To debug this try debugmode(true);\n"
"(%i2) union (setify ([1, 2]), @{a, b@});\n"
"(%o2)                     @{1, 2, a, b@}\n"
"@end example\n"
msgstr ""

#: nset.texi:222
msgid ""
"To extract all set elements of a set @code{s} that satisfy a predicate\n"
"@code{f}, use @code{subset(s, f)}. (A @i{predicate} is a \n"
"boolean-valued function.) For example, to find the equations \n"
"in a given set that do not depend on a variable @code{z}, use\n"
msgstr ""

#: nset.texi:232
msgid ""
"@c ===beg===\n"
"@c subset ({x + y + z, x - y + 4, x + y - 5}, \n"
"@c                                     lambda ([e], freeof (z, e)));\n"
"@c ===end===\n"
"@example\n"
"(%i1) subset (@{x + y + z, x - y + 4, x + y - 5@},\n"
"                                    lambda ([e], freeof (z, e)));\n"
"(%o1)               @{- y + x + 4, y + x - 5@}\n"
"@end example\n"
msgstr ""

#: nset.texi:235
msgid ""
"The section @ref{Functions and Variables for Sets} has a complete list of\n"
"the set functions in Maxima.\n"
msgstr ""

#: nset.texi:239
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:241
msgid ""
"@subsection Set Member Iteration\n"
msgstr ""

#: nset.texi:244
msgid ""
"There two ways to to iterate over set members. One way is the use\n"
"@code{map}; for example:\n"
msgstr ""

#: nset.texi:252
msgid ""
"@c ===beg===\n"
"@c map (f, {a, b, c});\n"
"@c ===end===\n"
"@example\n"
"(%i1) map (f, @{a, b, c@});\n"
"(%o1)                  @{f(a), f(b), f(c)@}\n"
"@end example\n"
msgstr ""

#: nset.texi:254
msgid ""
"The other way is to use @code{for @var{x} in @var{s} do}\n"
msgstr ""

#: nset.texi:268
msgid ""
"@c ===beg===\n"
"@c s: {a, b, c};\n"
"@c for si in s do print (concat (si, 1));\n"
"@c ===end===\n"
"@example\n"
"(%i1) s: @{a, b, c@};\n"
"(%o1)                       @{a, b, c@}\n"
"(%i2) for si in s do print (concat (si, 1));\n"
"a1 \n"
"b1 \n"
"c1 \n"
"(%o2)                         done\n"
"@end example\n"
msgstr ""

#: nset.texi:278
msgid ""
"The Maxima functions @code{first} and @code{rest} work\n"
"correctly on sets. Applied to a set, @code{first} returns the first\n"
"displayed element of a set; which element that is may be\n"
"implementation-dependent. If @code{s} is a set, then \n"
"@code{rest(s)} is equivalent to @code{disjoin(first(s), s)}.\n"
"Currently, there are other Maxima functions that work correctly\n"
"on sets.\n"
"In future versions of the set functions,\n"
"@code{first} and @code{rest} may function differently or not at all.\n"
msgstr ""

#: nset.texi:284
msgid ""
"@c WHAT EXACTLY IS THE EFFECT OF ordergreat AND orderless ON THE SET FUNCTIONS ??\n"
"Maxima's @code{orderless} and @code{ordergreat} mechanisms are \n"
"incompatible with the set functions. If you need to use either @code{orderless}\n"
"or @code{ordergreat}, call those functions before constructing any sets,\n"
"and do not call @code{unorder}. \n"
msgstr ""

#: nset.texi:286
msgid ""
"@subsection Authors\n"
msgstr ""

#: nset.texi:290
msgid ""
"Stavros Macrakis of Cambridge, Massachusetts and Barton Willis of the\n"
"University of Nebraska at Kearney (UNK) wrote the Maxima set functions and their\n"
"documentation. \n"
msgstr ""

#: nset.texi:293
msgid ""
"@node Functions and Variables for Sets,  , Introduction to Sets, Sets\n"
"@section Functions and Variables for Sets\n"
msgstr ""

#: nset.texi:296
msgid ""
"@anchor{adjoin}\n"
"@deffn {Function} adjoin (@var{x}, @var{a}) \n"
msgstr ""

#: nset.texi:298
msgid ""
"Returns the union of the set @var{a} with @code{@{@var{x}@}}.\n"
msgstr ""

#: nset.texi:300
msgid ""
"@code{adjoin} complains if @var{a} is not a literal set.\n"
msgstr ""

#: nset.texi:304
msgid ""
"@code{adjoin(@var{x}, @var{a})} and @code{union(set(@var{x}), @var{a})}\n"
"are equivalent;\n"
"however, @code{adjoin} may be somewhat faster than @code{union}.\n"
msgstr ""

#: nset.texi:306
msgid ""
"See also @mref{disjoin}.\n"
msgstr ""

#: nset.texi:308
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:319
msgid ""
"@c ===beg===\n"
"@c adjoin (c, {a, b});\n"
"@c adjoin (a, {a, b});\n"
"@c ===end===\n"
"@example\n"
"(%i1) adjoin (c, @{a, b@});\n"
"(%o1)                       @{a, b, c@}\n"
"(%i2) adjoin (a, @{a, b@});\n"
"(%o2)                        @{a, b@}\n"
"@end example\n"
msgstr ""

#: nset.texi:323
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:325
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:328
msgid ""
"@anchor{belln}\n"
"@deffn {Function} belln (@var{n})\n"
msgstr ""

#: nset.texi:331
msgid ""
"Represents the @math{n}-th Bell number.\n"
"@code{belln(n)} is the number of partitions of a set with @var{n} members.\n"
msgstr ""

#: nset.texi:335
msgid ""
"For nonnegative integers @var{n},\n"
"@code{belln(@var{n})} simplifies to the @math{n}-th Bell number.\n"
"@code{belln} does not simplify for any other arguments.\n"
msgstr ""

#: nset.texi:337
msgid ""
"@code{belln} distributes over equations, lists, matrices, and sets.\n"
msgstr ""

#: nset.texi:339
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:341
msgid ""
"@code{belln} applied to nonnegative integers.\n"
msgstr ""

#: nset.texi:357
msgid ""
"@c ===beg===\n"
"@c makelist (belln (i), i, 0, 6);\n"
"@c is (cardinality (set_partitions ({})) = belln (0));\n"
"@c is (cardinality (set_partitions ({1, 2, 3, 4, 5, 6})) = \n"
"@c                        belln (6));\n"
"@c ===end===\n"
"@example\n"
"(%i1) makelist (belln (i), i, 0, 6);\n"
"(%o1)               [1, 1, 2, 5, 15, 52, 203]\n"
"(%i2) is (cardinality (set_partitions (@{@})) = belln (0));\n"
"(%o2)                         true\n"
"(%i3) is (cardinality (set_partitions (@{1, 2, 3, 4, 5, 6@})) =\n"
"                       belln (6));\n"
"(%o3)                         true\n"
"@end example\n"
msgstr ""

#: nset.texi:359
msgid ""
"@code{belln} applied to arguments which are not nonnegative integers.\n"
msgstr ""

#: nset.texi:367
msgid ""
"@c ===beg===\n"
"@c [belln (x), belln (sqrt(3)), belln (-9)];\n"
"@c ===end===\n"
"@example\n"
"(%i1) [belln (x), belln (sqrt(3)), belln (-9)];\n"
"(%o1)        [belln(x), belln(sqrt(3)), belln(- 9)]\n"
"@end example\n"
msgstr ""

#: nset.texi:371
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:373
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:376
msgid ""
"@anchor{cardinality}\n"
"@deffn {Function} cardinality (@var{a})\n"
msgstr ""

#: nset.texi:378
msgid ""
"Returns the number of distinct elements of the set @var{a}. \n"
msgstr ""

#: nset.texi:381
msgid ""
"@code{cardinality} ignores redundant elements\n"
"even when simplification is disabled.\n"
msgstr ""

#: nset.texi:383
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:400
msgid ""
"@c ===beg===\n"
"@c cardinality ({});\n"
"@c cardinality ({a, a, b, c});\n"
"@c simp : false;\n"
"@c cardinality ({a, a, b, c});\n"
"@c ===end===\n"
"@example\n"
"(%i1) cardinality (@{@});\n"
"(%o1)                           0\n"
"(%i2) cardinality (@{a, a, b, c@});\n"
"(%o2)                           3\n"
"(%i3) simp : false;\n"
"(%o3)                         false\n"
"(%i4) cardinality (@{a, a, b, c@});\n"
"(%o4)                           3\n"
"@end example\n"
msgstr ""

#: nset.texi:404
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:406
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:412
msgid ""
"@anchor{cartesian_product}\n"
"@deffn {Function} cartesian_product (@var{b_1}, ... , @var{b_n})\n"
"Returns a set of lists of the form @code{[@var{x_1}, ..., @var{x_n}]}, where\n"
"@var{x_1}, ..., @var{x_n} are elements of the sets @var{b_1}, ... , @var{b_n},\n"
"respectively.\n"
msgstr ""

#: nset.texi:414
msgid ""
"@code{cartesian_product} complains if any argument is not a literal set.\n"
msgstr ""

#: nset.texi:416
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:433
msgid ""
"@c ===beg===\n"
"@c cartesian_product ({0, 1});\n"
"@c cartesian_product ({0, 1}, {0, 1});\n"
"@c cartesian_product ({x}, {y}, {z});\n"
"@c cartesian_product ({x}, {-1, 0, 1});\n"
"@c ===end===\n"
"@example\n"
"(%i1) cartesian_product (@{0, 1@});\n"
"(%o1)                      @{[0], [1]@}\n"
"(%i2) cartesian_product (@{0, 1@}, @{0, 1@});\n"
"(%o2)           @{[0, 0], [0, 1], [1, 0], [1, 1]@}\n"
"(%i3) cartesian_product (@{x@}, @{y@}, @{z@});\n"
"(%o3)                      @{[x, y, z]@}\n"
"(%i4) cartesian_product (@{x@}, @{-1, 0, 1@});\n"
"(%o4)              @{[x, - 1], [x, 0], [x, 1]@}\n"
"@end example\n"
msgstr ""

#: nset.texi:437
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:439
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:445
msgid ""
"@anchor{disjoin}\n"
"@deffn {Function} disjoin (@var{x}, @var{a})\n"
"Returns the set @var{a} without the member @var{x}.\n"
"If @var{x} is not a member of @var{a}, return @var{a} unchanged.\n"
msgstr ""

#: nset.texi:447
msgid ""
"@code{disjoin} complains if @var{a} is not a literal set.\n"
msgstr ""

#: nset.texi:451
msgid ""
"@code{disjoin(@var{x}, @var{a})}, @code{delete(@var{x}, @var{a})}, and\n"
"@code{setdifference(@var{a}, set(@var{x}))} are all equivalent. \n"
"Of these, @code{disjoin} is generally faster than the others.\n"
msgstr ""

#: nset.texi:453
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:467
msgid ""
"@c ===beg===\n"
"@c disjoin (a, {a, b, c, d});\n"
"@c disjoin (a + b, {5, z, a + b, %pi});\n"
"@c disjoin (a - b, {5, z, a + b, %pi});\n"
"@c ===end===\n"
"@example\n"
"(%i1) disjoin (a, @{a, b, c, d@});\n"
"(%o1)                       @{b, c, d@}\n"
"(%i2) disjoin (a + b, @{5, z, a + b, %pi@});\n"
"(%o2)                      @{5, %pi, z@}\n"
"(%i3) disjoin (a - b, @{5, z, a + b, %pi@});\n"
"(%o3)                  @{5, %pi, b + a, z@}\n"
"@end example\n"
msgstr ""

#: nset.texi:471
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:473
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:477
msgid ""
"@anchor{disjointp}\n"
"@deffn {Function} disjointp (@var{a}, @var{b}) \n"
"Returns @code{true} if and only if the sets @var{a} and @var{b} are disjoint.\n"
msgstr ""

#: nset.texi:479
msgid ""
"@code{disjointp} complains if either @var{a} or @var{b} is not a literal set.\n"
msgstr ""

#: nset.texi:481
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:492
msgid ""
"@c ===beg===\n"
"@c disjointp ({a, b, c}, {1, 2, 3});\n"
"@c disjointp ({a, b, 3}, {1, 2, 3});\n"
"@c ===end===\n"
"@example\n"
"(%i1) disjointp (@{a, b, c@}, @{1, 2, 3@});\n"
"(%o1)                         true\n"
"(%i2) disjointp (@{a, b, 3@}, @{1, 2, 3@});\n"
"(%o2)                         false\n"
"@end example\n"
msgstr ""

#: nset.texi:496
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Predicate functions}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:498
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:501
msgid ""
"@anchor{divisors}\n"
"@deffn {Function} divisors (@var{n})\n"
msgstr ""

#: nset.texi:503
msgid ""
"Represents the set of divisors of @var{n}.\n"
msgstr ""

#: nset.texi:508
msgid ""
"@code{divisors(@var{n})} simplifies to a set of integers\n"
"when @var{n} is a nonzero integer.\n"
"The set of divisors includes the members 1 and @var{n}.\n"
"The divisors of a negative integer are the divisors of its absolute value.\n"
msgstr ""

#: nset.texi:510
msgid ""
"@code{divisors} distributes over equations, lists, matrices, and sets.\n"
msgstr ""

#: nset.texi:512
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:515
msgid ""
"We can verify that 28 is a perfect number:\n"
"the sum of its divisors (except for itself) is 28.\n"
msgstr ""

#: nset.texi:526
msgid ""
"@c ===beg===\n"
"@c s: divisors(28);\n"
"@c lreduce (\\"+\\", args(s)) - 28;\n"
"@c ===end===\n"
"@example\n"
"(%i1) s: divisors(28);\n"
"(%o1)                 @{1, 2, 4, 7, 14, 28@}\n"
"(%i2) lreduce (\\"+\\", args(s)) - 28;\n"
"(%o2)                          28\n"
"@end example\n"
msgstr ""

#: nset.texi:530
msgid ""
"@code{divisors} is a simplifying function.\n"
"Substituting 8 for @code{a} in @code{divisors(a)}\n"
"yields the divisors without reevaluating @code{divisors(8)}.\n"
msgstr ""

#: nset.texi:541
msgid ""
"@c ===beg===\n"
"@c divisors (a);\n"
"@c subst (8, a, %);\n"
"@c ===end===\n"
"@example\n"
"(%i1) divisors (a);\n"
"(%o1)                      divisors(a)\n"
"(%i2) subst (8, a, %);\n"
"(%o2)                     @{1, 2, 4, 8@}\n"
"@end example\n"
msgstr ""

#: nset.texi:543
msgid ""
"@code{divisors} distributes over equations, lists, matrices, and sets.\n"
msgstr ""

#: nset.texi:562
msgid ""
"@c ===beg===\n"
"@c divisors (a = b);\n"
"@c divisors ([a, b, c]);\n"
"@c divisors (matrix ([a, b], [c, d]));\n"
"@c divisors ({a, b, c});\n"
"@c ===end===\n"
"@example\n"
"(%i1) divisors (a = b);\n"
"(%o1)               divisors(a) = divisors(b)\n"
"(%i2) divisors ([a, b, c]);\n"
"(%o2)        [divisors(a), divisors(b), divisors(c)]\n"
"(%i3) divisors (matrix ([a, b], [c, d]));\n"
"                  [ divisors(a)  divisors(b) ]\n"
"(%o3)             [                          ]\n"
"                  [ divisors(c)  divisors(d) ]\n"
"(%i4) divisors (@{a, b, c@});\n"
"(%o4)        @{divisors(a), divisors(b), divisors(c)@}\n"
"@end example\n"
msgstr ""

#: nset.texi:566
msgid ""
"@opencatbox\n"
"@category{Integers}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:568
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:573
msgid ""
"@anchor{elementp}\n"
"@deffn {Function} elementp (@var{x}, @var{a})\n"
"Returns @code{true} if and only if @var{x} is a member of the \n"
"set @var{a}.\n"
msgstr ""

#: nset.texi:575
msgid ""
"@code{elementp} complains if @var{a} is not a literal set.\n"
msgstr ""

#: nset.texi:577
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:588
msgid ""
"@c ===beg===\n"
"@c elementp (sin(1), {sin(1), sin(2), sin(3)});\n"
"@c elementp (sin(1), {cos(1), cos(2), cos(3)});\n"
"@c ===end===\n"
"@example\n"
"(%i1) elementp (sin(1), @{sin(1), sin(2), sin(3)@});\n"
"(%o1)                         true\n"
"(%i2) elementp (sin(1), @{cos(1), cos(2), cos(3)@});\n"
"(%o2)                         false\n"
"@end example\n"
msgstr ""

#: nset.texi:592
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Predicate functions}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:594
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:599
msgid ""
"@anchor{emptyp}\n"
"@deffn {Function} emptyp (@var{a})\n"
"Return @code{true} if and only if @var{a} is the empty set or\n"
"the empty list.\n"
msgstr ""

#: nset.texi:601
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:612
msgid ""
"@c ===beg===\n"
"@c map (emptyp, [{}, []]);\n"
"@c map (emptyp, [a + b, {{}}, %pi]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) map (emptyp, [@{@}, []]);\n"
"(%o1)                     [true, true]\n"
"(%i2) map (emptyp, [a + b, @{@{@}@}, %pi]);\n"
"(%o2)                 [false, false, false]\n"
"@end example\n"
msgstr ""

#: nset.texi:616
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Predicate functions}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:623
msgid ""
"@end deffn\n"
"       \n"
"@anchor{equiv_classes}\n"
"@deffn {Function} equiv_classes (@var{s}, @var{F})\n"
"Returns a set of the equivalence classes of the set @var{s} with respect\n"
"to the equivalence relation @var{F}.\n"
msgstr ""

#: nset.texi:627
msgid ""
"@var{F} is a function of two variables defined on the Cartesian product of @var{s} with @var{s}.\n"
"The return value of @var{F} is either @code{true} or @code{false},\n"
"or an expression @var{expr} such that @code{is(@var{expr})} is either @code{true} or @code{false}.\n"
msgstr ""

#: nset.texi:631
msgid ""
"When @var{F} is not an equivalence relation,\n"
"@code{equiv_classes} accepts it without complaint,\n"
"but the result is generally incorrect in that case.\n"
msgstr ""

#: nset.texi:636
msgid ""
"@c EXCESSIVE DETAIL HERE. PROBABLY JUST CUT THIS\n"
"@c @var{F} may be a relational operator (built-in or user-defined),\n"
"@c an ordinary Maxima function, a Lisp function, a lambda expression,\n"
"@c a macro, or a subscripted function.\n"
msgstr ""

#: nset.texi:638
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:640
msgid ""
"The equivalence relation is a lambda expression which returns @code{true} or @code{false}.\n"
msgstr ""

#: nset.texi:650
msgid ""
"@c ===beg===\n"
"@c equiv_classes ({1, 1.0, 2, 2.0, 3, 3.0}, \n"
"@c                         lambda ([x, y], is (equal (x, y))));\n"
"@c ===end===\n"
"@example\n"
"(%i1) equiv_classes (@{1, 1.0, 2, 2.0, 3, 3.0@},\n"
"                        lambda ([x, y], is (equal (x, y))));\n"
"(%o1)            @{@{1, 1.0@}, @{2, 2.0@}, @{3, 3.0@}@}\n"
"@end example\n"
msgstr ""

#: nset.texi:653
msgid ""
"The equivalence relation is the name of a relational function\n"
"which @code{is} evaluates to @code{true} or @code{false}.\n"
msgstr ""

#: nset.texi:661
msgid ""
"@c ===beg===\n"
"@c equiv_classes ({1, 1.0, 2, 2.0, 3, 3.0}, equal);\n"
"@c ===end===\n"
"@example\n"
"(%i1) equiv_classes (@{1, 1.0, 2, 2.0, 3, 3.0@}, equal);\n"
"(%o1)            @{@{1, 1.0@}, @{2, 2.0@}, @{3, 3.0@}@}\n"
"@end example\n"
msgstr ""

#: nset.texi:663
msgid ""
"The equivalence classes are numbers which differ by a multiple of 3.\n"
msgstr ""

#: nset.texi:673
msgid ""
"@c ===beg===\n"
"@c equiv_classes ({1, 2, 3, 4, 5, 6, 7}, \n"
"@c                      lambda ([x, y], remainder (x - y, 3) = 0));\n"
"@c ===end===\n"
"@example\n"
"(%i1) equiv_classes (@{1, 2, 3, 4, 5, 6, 7@},\n"
"                     lambda ([x, y], remainder (x - y, 3) = 0));\n"
"(%o1)              @{@{1, 4, 7@}, @{2, 5@}, @{3, 6@}@}\n"
"@end example\n"
msgstr ""

#: nset.texi:677
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:679
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:684
msgid ""
"@anchor{every}\n"
"@deffn {Function} every @\n"
"@fname{every} (@var{f}, @var{s}) @\n"
"@fname{every} (@var{f}, @var{L_1}, ..., @var{L_n})\n"
msgstr ""

#: nset.texi:686
msgid ""
"Returns @code{true} if the predicate @var{f} is @code{true} for all given arguments.\n"
msgstr ""

#: nset.texi:693
msgid ""
"Given one set as the second argument, \n"
"@code{every(@var{f}, @var{s})} returns @code{true}\n"
"if @code{is(@var{f}(@var{a_i}))} returns @code{true} for all @var{a_i} in @var{s}.\n"
"@code{every} may or may not evaluate @var{f} for all @var{a_i} in @var{s}.\n"
"Since sets are unordered,\n"
"@code{every} may evaluate @code{@var{f}(@var{a_i})} in any order.\n"
msgstr ""

#: nset.texi:701
msgid ""
"Given one or more lists as arguments,\n"
"@code{every(@var{f}, @var{L_1}, ..., @var{L_n})} returns @code{true}\n"
"if @code{is(@var{f}(@var{x_1}, ..., @var{x_n}))} returns @code{true} \n"
"for all @var{x_1}, ..., @var{x_n} in @var{L_1}, ..., @var{L_n}, respectively.\n"
"@code{every} may or may not evaluate \n"
"@var{f} for every combination @var{x_1}, ..., @var{x_n}.\n"
"@code{every} evaluates lists in the order of increasing index.\n"
msgstr ""

#: nset.texi:704
msgid ""
"Given an empty set @code{@{@}} or empty lists @code{[]} as arguments,\n"
"@code{every} returns @code{true}.\n"
msgstr ""

#: nset.texi:709
msgid ""
"When the global flag @code{maperror} is @code{true}, all lists \n"
"@var{L_1}, ..., @var{L_n} must have equal lengths.\n"
"When @code{maperror} is @code{false}, list arguments are\n"
"effectively truncated to the length of the shortest list. \n"
msgstr ""

#: nset.texi:719
msgid ""
"Return values of the predicate @var{f} which evaluate (via @code{is})\n"
"to something other than @code{true} or @code{false}\n"
"are governed by the global flag @code{prederror}.\n"
"When @code{prederror} is @code{true},\n"
"such values are treated as @code{false},\n"
"and the return value from @code{every} is @code{false}.\n"
"When @code{prederror} is @code{false},\n"
"such values are treated as @code{unknown},\n"
"and the return value from @code{every} is @code{unknown}.\n"
msgstr ""

#: nset.texi:721
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:724
msgid ""
"@code{every} applied to a single set.\n"
"The predicate is a function of one argument.\n"
msgstr ""

#: nset.texi:735
msgid ""
"@c ===beg===\n"
"@c every (integerp, {1, 2, 3, 4, 5, 6});\n"
"@c every (atom, {1, 2, sin(3), 4, 5 + y, 6});\n"
"@c ===end===\n"
"@example\n"
"(%i1) every (integerp, @{1, 2, 3, 4, 5, 6@});\n"
"(%o1)                         true\n"
"(%i2) every (atom, @{1, 2, sin(3), 4, 5 + y, 6@});\n"
"(%o2)                         false\n"
"@end example\n"
msgstr ""

#: nset.texi:738
msgid ""
"@code{every} applied to two lists.\n"
"The predicate is a function of two arguments.\n"
msgstr ""

#: nset.texi:749
msgid ""
"@c ===beg===\n"
"@c every (\\"=\\", [a, b, c], [a, b, c]);\n"
"@c every (\\"#\\", [a, b, c], [a, b, c]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) every (\\"=\\", [a, b, c], [a, b, c]);\n"
"(%o1)                         true\n"
"(%i2) every (\\"#\\", [a, b, c], [a, b, c]);\n"
"(%o2)                         false\n"
"@end example\n"
msgstr ""

#: nset.texi:753
msgid ""
"Return values of the predicate @var{f} which evaluate\n"
"to something other than @code{true} or @code{false}\n"
"are governed by the global flag @code{prederror}.\n"
msgstr ""

#: nset.texi:775
msgid ""
"@c ===beg===\n"
"@c prederror : false;\n"
"@c map (lambda ([a, b], is (a < b)), [x, y, z], \n"
"@c                    [x^2, y^2, z^2]);\n"
"@c every (\\"<\\", [x, y, z], [x^2, y^2, z^2]);\n"
"@c prederror : true;\n"
"@c every (\\"<\\", [x, y, z], [x^2, y^2, z^2]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) prederror : false;\n"
"(%o1)                         false\n"
"(%i2) map (lambda ([a, b], is (a < b)), [x, y, z],\n"
"                   [x^2, y^2, z^2]);\n"
"(%o2)              [unknown, unknown, unknown]\n"
"(%i3) every (\\"<\\", [x, y, z], [x^2, y^2, z^2]);\n"
"(%o3)                        unknown\n"
"(%i4) prederror : true;\n"
"(%o4)                         true\n"
"(%i5) every (\\"<\\", [x, y, z], [x^2, y^2, z^2]);\n"
"(%o5)                         false\n"
"@end example\n"
msgstr ""

#: nset.texi:779
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:786
msgid ""
"@end deffn\n"
" \n"
"@anchor{extremal_subset}\n"
"@deffn {Function} extremal_subset @\n"
"@fname{extremal_subset} (@var{s}, @var{f}, max) @\n"
"@fname{extremal_subset} (@var{s}, @var{f}, min)\n"
msgstr ""

#: nset.texi:788
msgid ""
"Returns the subset of @var{s} for which the function @var{f} takes on maximum or minimum values.\n"
msgstr ""

#: nset.texi:791
msgid ""
"@code{extremal_subset(@var{s}, @var{f}, max)} returns the subset of the set or \n"
"list @var{s} for which the real-valued function @var{f} takes on its maximum value.\n"
msgstr ""

#: nset.texi:794
msgid ""
"@code{extremal_subset(@var{s}, @var{f}, min)} returns the subset of the set or \n"
"list @var{s} for which the real-valued function @var{f} takes on its minimum value.\n"
msgstr ""

#: nset.texi:796
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:807
msgid ""
"@c ===beg===\n"
"@c extremal_subset ({-2, -1, 0, 1, 2}, abs, max);\n"
"@c extremal_subset ({sqrt(2), 1.57, %pi/2}, sin, min);\n"
"@c ===end===\n"
"@example\n"
"(%i1) extremal_subset (@{-2, -1, 0, 1, 2@}, abs, max);\n"
"(%o1)                       @{- 2, 2@}\n"
"(%i2) extremal_subset (@{sqrt(2), 1.57, %pi/2@}, sin, min);\n"
"(%o2)                       @{sqrt(2)@}\n"
"@end example\n"
msgstr ""

#: nset.texi:811
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:813
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:816
msgid ""
"@anchor{flatten}\n"
"@deffn {Function} flatten (@var{expr})\n"
msgstr ""

#: nset.texi:819
msgid ""
"Collects arguments of subexpressions which have the same operator as @var{expr}\n"
"and constructs an expression from these collected arguments.\n"
msgstr ""

#: nset.texi:823
msgid ""
"Subexpressions in which the operator is different from the main operator of @code{expr}\n"
"are copied without modification,\n"
"even if they, in turn, contain some subexpressions in which the operator is the same as for @code{expr}.\n"
msgstr ""

#: nset.texi:828
msgid ""
"It may be possible for @code{flatten} to construct expressions in which the number\n"
"of arguments differs from the declared arguments for an operator;\n"
"this may provoke an error message from the simplifier or evaluator.\n"
"@code{flatten} does not try to detect such situations.\n"
msgstr ""

#: nset.texi:831
msgid ""
"Expressions with special representations, for example, canonical rational expressions (CRE), \n"
"cannot be flattened; in such cases, @code{flatten} returns its argument unchanged.\n"
msgstr ""

#: nset.texi:833
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:835
msgid ""
"Applied to a list, @code{flatten} gathers all list elements that are lists.\n"
msgstr ""

#: nset.texi:843
msgid ""
"@c ===beg===\n"
"@c flatten ([a, b, [c, [d, e], f], [[g, h]], i, j]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) flatten ([a, b, [c, [d, e], f], [[g, h]], i, j]);\n"
"(%o1)            [a, b, c, d, e, f, g, h, i, j]\n"
"@end example\n"
msgstr ""

#: nset.texi:845
msgid ""
"Applied to a set, @code{flatten} gathers all members of set elements that are sets.\n"
msgstr ""

#: nset.texi:856
msgid ""
"@c ===beg===\n"
"@c flatten ({a, {b}, {{c}}});\n"
"@c flatten ({a, {[a], {a}}});\n"
"@c ===end===\n"
"@example\n"
"(%i1) flatten (@{a, @{b@}, @{@{c@}@}@});\n"
"(%o1)                       @{a, b, c@}\n"
"(%i2) flatten (@{a, @{[a], @{a@}@}@});\n"
"(%o2)                       @{a, [a]@}\n"
"@end example\n"
msgstr ""

#: nset.texi:860
msgid ""
"@code{flatten} is similar to the effect of declaring the main operator n-ary.\n"
"However, @code{flatten} has no effect on subexpressions which have an operator\n"
"different from the main operator, while an n-ary declaration affects those.\n"
msgstr ""

#: nset.texi:874
msgid ""
"@c ===beg===\n"
"@c expr: flatten (f (g (f (f (x)))));\n"
"@c declare (f, nary);\n"
"@c ev (expr);\n"
"@c ===end===\n"
"@example\n"
"(%i1) expr: flatten (f (g (f (f (x)))));\n"
"(%o1)                     f(g(f(f(x))))\n"
"(%i2) declare (f, nary);\n"
"(%o2)                         done\n"
"(%i3) ev (expr);\n"
"(%o3)                      f(g(f(x)))\n"
"@end example\n"
msgstr ""

#: nset.texi:876
msgid ""
"@code{flatten} treats subscripted functions the same as any other operator.\n"
msgstr ""

#: nset.texi:885
msgid ""
"@c ===beg===\n"
"@c flatten (f[5] (f[5] (x, y), z));\n"
"@c ===end===\n"
"@example\n"
"(%i1) flatten (f[5] (f[5] (x, y), z));\n"
"(%o1)                      f (x, y, z)\n"
"                            5\n"
"@end example\n"
msgstr ""

#: nset.texi:888
msgid ""
"It may be possible for @code{flatten} to construct expressions in which the number\n"
"of arguments differs from the declared arguments for an operator;\n"
msgstr ""

#: nset.texi:903
msgid ""
"@c ===beg===\n"
"@c 'mod (5, 'mod (7, 4));\n"
"@c flatten (%);\n"
"@c ''%, nouns;\n"
"@c ===end===\n"
"@example\n"
"(%i1) 'mod (5, 'mod (7, 4));\n"
"(%o1)                   mod(5, mod(7, 4))\n"
"(%i2) flatten (%);\n"
"(%o2)                     mod(5, 7, 4)\n"
"(%i3) ''%, nouns;\n"
"Wrong number of arguments to mod\n"
" -- an error.  Quitting.  To debug this try debugmode(true);\n"
"@end example\n"
msgstr ""

#: nset.texi:907
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Lists}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:909
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:916
msgid ""
"@anchor{full_listify}\n"
"@deffn {Function} full_listify (@var{a})\n"
"Replaces every set operator in @var{a} by a list operator,\n"
"and returns the result.\n"
"@code{full_listify} replaces set operators in nested subexpressions,\n"
"even if the main operator is not @code{set}.\n"
msgstr ""

#: nset.texi:918
msgid ""
"@code{listify} replaces only the main operator.\n"
msgstr ""

#: nset.texi:920
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:931
msgid ""
"@c ===beg===\n"
"@c full_listify ({a, b, {c, {d, e, f}, g}});\n"
"@c full_listify (F (G ({a, b, H({c, d, e})})));\n"
"@c ===end===\n"
"@example\n"
"(%i1) full_listify (@{a, b, @{c, @{d, e, f@}, g@}@});\n"
"(%o1)               [a, b, [c, [d, e, f], g]]\n"
"(%i2) full_listify (F (G (@{a, b, H(@{c, d, e@})@})));\n"
"(%o2)              F(G([a, b, H([c, d, e])]))\n"
"@end example\n"
msgstr ""

#: nset.texi:935
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:937
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:943
msgid ""
"@anchor{fullsetify}\n"
"@deffn {Function} fullsetify (@var{a})\n"
"When @var{a} is a list, replaces the list operator with a set operator,\n"
"and applies @code{fullsetify} to each member which is a set.\n"
"When @var{a} is not a list, it is returned unchanged.\n"
msgstr ""

#: nset.texi:945
msgid ""
"@code{setify} replaces only the main operator.\n"
msgstr ""

#: nset.texi:947
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:950
msgid ""
"In line @code{(%o2)}, the argument of @code{f} isn't converted to a set\n"
"because the main operator of @code{f([b])} isn't a list.\n"
msgstr ""

#: nset.texi:961
msgid ""
"@c ===beg===\n"
"@c fullsetify ([a, [a]]);\n"
"@c fullsetify ([a, f([b])]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) fullsetify ([a, [a]]);\n"
"(%o1)                       @{a, @{a@}@}\n"
"(%i2) fullsetify ([a, f([b])]);\n"
"(%o2)                      @{a, f([b])@}\n"
"@end example\n"
msgstr ""

#: nset.texi:965
msgid ""
"@opencatbox\n"
"@category{Lists}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:967
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:970
msgid ""
"@anchor{identity}\n"
"@deffn {Function} identity (@var{x})\n"
msgstr ""

#: nset.texi:972
msgid ""
"Returns @var{x} for any argument @var{x}.\n"
msgstr ""

#: nset.texi:974
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:977
msgid ""
"@code{identity} may be used as a predicate when the arguments\n"
"are already Boolean values.\n"
msgstr ""

#: nset.texi:986
msgid ""
"@c ===beg===\n"
"@c every (identity, [true, true]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) every (identity, [true, true]);\n"
"(%o1)                         true\n"
"@end example\n"
"@end deffn\n"
msgstr ""

#: nset.texi:991
msgid ""
"@anchor{integer_partitions}\n"
"@deffn {Function} integer_partitions @\n"
"@fname{integer_partitions} (@var{n}) @\n"
"@fname{integer_partitions} (@var{n}, @var{len})\n"
msgstr ""

#: nset.texi:994
msgid ""
"Returns integer partitions of @var{n}, that is,\n"
"lists of integers which sum to @var{n}.\n"
msgstr ""

#: nset.texi:998
msgid ""
"@code{integer_partitions(@var{n})} returns the set of\n"
"all partitions of the integer @var{n}.\n"
"Each partition is a list sorted from greatest to least.\n"
msgstr ""

#: nset.texi:1004
msgid ""
"@code{integer_partitions(@var{n}, @var{len})}\n"
"returns all partitions that have length @var{len} or less; in this\n"
"case, zeros are appended to each partition with fewer than @var{len}\n"
"terms to make each partition have exactly @var{len} terms.\n"
"Each partition is a list sorted from greatest to least.\n"
msgstr ""

#: nset.texi:1008
msgid ""
"A list @math{[a_1, ..., a_m]} is a partition of a nonnegative integer\n"
"@math{n} when (1) each @math{a_i} is a nonzero integer, and (2) \n"
"@math{a_1 + ... + a_m = n.} Thus 0 has no partitions.\n"
msgstr ""

#: nset.texi:1010
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1032
msgid ""
"@c ===beg===\n"
"@c integer_partitions (3);\n"
"@c s: integer_partitions (25)$\n"
"@c cardinality (s);\n"
"@c map (lambda ([x], apply (\\"+\\", x)), s);\n"
"@c integer_partitions (5, 3);\n"
"@c integer_partitions (5, 2);\n"
"@c ===end===\n"
"@example\n"
"(%i1) integer_partitions (3);\n"
"(%o1)               @{[1, 1, 1], [2, 1], [3]@}\n"
"(%i2) s: integer_partitions (25)$\n"
"(%i3) cardinality (s);\n"
"(%o3)                         1958\n"
"(%i4) map (lambda ([x], apply (\\"+\\", x)), s);\n"
"(%o4)                         @{25@}\n"
"(%i5) integer_partitions (5, 3);\n"
"(%o5) @{[2, 2, 1], [3, 1, 1], [3, 2, 0], [4, 1, 0], [5, 0, 0]@}\n"
"(%i6) integer_partitions (5, 2);\n"
"(%o6)               @{[3, 2], [4, 1], [5, 0]@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1035
msgid ""
"To find all partitions that satisfy a condition, use the function @code{subset};\n"
"here is an example that finds all partitions of 10 that consist of prime numbers.\n"
msgstr ""

#: nset.texi:1050
msgid ""
"@c ===beg===\n"
"@c s: integer_partitions (10)$\n"
"@c cardinality (s);\n"
"@c xprimep(x) := integerp(x) and (x > 1) and primep(x)$\n"
"@c subset (s, lambda ([x], every (xprimep, x)));\n"
"@c ===end===\n"
"@example\n"
"(%i1) s: integer_partitions (10)$\n"
"(%i2) cardinality (s);\n"
"(%o2)                          42\n"
"(%i3) xprimep(x) := integerp(x) and (x > 1) and primep(x)$\n"
"(%i4) subset (s, lambda ([x], every (xprimep, x)));\n"
"(%o4) @{[2, 2, 2, 2, 2], [3, 3, 2, 2], [5, 3, 2], [5, 5], [7, 3]@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1054
msgid ""
"@opencatbox\n"
"@category{Integers}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1056
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1059
msgid ""
"@anchor{intersect}\n"
"@deffn {Function} intersect (@var{a_1}, ..., @var{a_n})\n"
msgstr ""

#: nset.texi:1061
msgid ""
"@code{intersect} is the same as @code{intersection}, which see.\n"
msgstr ""

#: nset.texi:1065
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1067
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1072
msgid ""
"@anchor{intersection}\n"
"@deffn {Function} intersection (@var{a_1}, ..., @var{a_n})\n"
"Returns a set containing the elements that are common to the \n"
"sets @var{a_1} through @var{a_n}.\n"
msgstr ""

#: nset.texi:1074
msgid ""
"@code{intersection} complains if any argument is not a literal set.\n"
msgstr ""

#: nset.texi:1076
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1105
msgid ""
"@c ===beg===\n"
"@c S_1 : {a, b, c, d};\n"
"@c S_2 : {d, e, f, g};\n"
"@c S_3 : {c, d, e, f};\n"
"@c S_4 : {u, v, w};\n"
"@c intersection (S_1, S_2);\n"
"@c intersection (S_2, S_3);\n"
"@c intersection (S_1, S_2, S_3);\n"
"@c intersection (S_1, S_2, S_3, S_4);\n"
"@c ===end===\n"
"@example\n"
"(%i1) S_1 : @{a, b, c, d@};\n"
"(%o1)                     @{a, b, c, d@}\n"
"(%i2) S_2 : @{d, e, f, g@};\n"
"(%o2)                     @{d, e, f, g@}\n"
"(%i3) S_3 : @{c, d, e, f@};\n"
"(%o3)                     @{c, d, e, f@}\n"
"(%i4) S_4 : @{u, v, w@};\n"
"(%o4)                       @{u, v, w@}\n"
"(%i5) intersection (S_1, S_2);\n"
"(%o5)                          @{d@}\n"
"(%i6) intersection (S_2, S_3);\n"
"(%o6)                       @{d, e, f@}\n"
"(%i7) intersection (S_1, S_2, S_3);\n"
"(%o7)                          @{d@}\n"
"(%i8) intersection (S_1, S_2, S_3, S_4);\n"
"(%o8)                          @{@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1109
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1111
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1113
msgid ""
"@deffn {Function} kron_delta (@var{x1}, @var{x2}, @dots{}, @var{xp})\n"
msgstr ""

#: nset.texi:1115
msgid ""
"Represents the Kronecker delta function.\n"
msgstr ""

#: nset.texi:1122
msgid ""
"@code{kron_delta} simplifies to 1 when @var{xi} and @var{yj} are equal\n"
"for all pairs of arguments, and it simplifies to 0 when @var{xi} and\n"
"@var{yj} are not equal for some pair of arguments. Equality is\n"
"determined using @code{is(equal(xi,xj))} and inequality by\n"
"@code{is(notequal(xi,xj))}. For exactly one argument, @code{kron_delta}\n"
"signals an error.\n"
msgstr ""

#: nset.texi:1124
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1144
msgid ""
"@c ===beg===\n"
"@c kron_delta(a,a);\n"
"@c kron_delta(a,b,a,b);\n"
"@c kron_delta(a,a,b,a+1);\n"
"@c assume(equal(x,y));\n"
"@c kron_delta(x,y);\n"
"@c ===end===\n"
"@example\n"
"(%i1) kron_delta(a,a);\n"
"(%o1)                                  1\n"
"(%i2) kron_delta(a,b,a,b);\n"
"(%o2)                          kron_delta(a, b)\n"
"(%i3) kron_delta(a,a,b,a+1);\n"
"(%o3)                                  0\n"
"(%i4) assume(equal(x,y));\n"
"(%o4)                            [equal(x, y)]\n"
"(%i5) kron_delta(x,y);\n"
"(%o5)                                  1\n"
"@end example\n"
msgstr ""

#: nset.texi:1147
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1150
msgid ""
"@anchor{listify}\n"
"@deffn {Function} listify (@var{a})\n"
msgstr ""

#: nset.texi:1153
msgid ""
"Returns a list containing the members of @var{a} when @var{a} is a set.\n"
"Otherwise, @code{listify} returns @var{a}.\n"
msgstr ""

#: nset.texi:1155
msgid ""
"@code{full_listify} replaces all set operators in @var{a} by list operators.\n"
msgstr ""

#: nset.texi:1157
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1168
msgid ""
"@c ===beg===\n"
"@c listify ({a, b, c, d});\n"
"@c listify (F ({a, b, c, d}));\n"
"@c ===end===\n"
"@example\n"
"(%i1) listify (@{a, b, c, d@});\n"
"(%o1)                     [a, b, c, d]\n"
"(%i2) listify (F (@{a, b, c, d@}));\n"
"(%o2)                    F(@{a, b, c, d@})\n"
"@end example\n"
msgstr ""

#: nset.texi:1172
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1174
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1177
msgid ""
"@anchor{makeset}\n"
"@deffn {Function} makeset (@var{expr}, @var{x}, @var{s})\n"
msgstr ""

#: nset.texi:1183
msgid ""
"Returns a set with members generated from the expression @var{expr},\n"
"where @var{x} is a list of variables in @var{expr},\n"
"and @var{s} is a set or list of lists.\n"
"To generate each set member,\n"
"@var{expr} is evaluated with the variables @var{x} bound in parallel to a member of @var{s}.\n"
msgstr ""

#: nset.texi:1188
msgid ""
"Each member of @var{s} must have the same length as @var{x}.\n"
"The list of variables @var{x} must be a list of symbols, without subscripts.\n"
"Even if there is only one symbol, @var{x} must be a list of one element,\n"
"and each member of @var{s} must be a list of one element.\n"
msgstr ""

#: nset.texi:1192
msgid ""
"@c FOLLOWING EQUIVALENT EXPRESSION IS REALLY TOO COMPLICATED, JUST SKIP IT FOR NOW\n"
"@c @code{makeset(@var{expr}, @var{x}, @var{s})} returns the same result as\n"
"@c @code{setify(map(lambda([L], sublis(map(\\"=\\", ''@var{x}, L), ''@var{expr})), args(@var{s})))}.\n"
msgstr ""

#: nset.texi:1194
msgid ""
"See also @mref{makelist}.\n"
msgstr ""

#: nset.texi:1196
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1223
msgid ""
"@c ===beg===\n"
"@c makeset (i/j, [i, j], [[1, a], [2, b], [3, c], [4, d]]);\n"
"@c S : {x, y, z}$\n"
"@c S3 : cartesian_product (S, S, S);\n"
"@c makeset (i + j + k, [i, j, k], S3);\n"
"@c makeset (sin(x), [x], {[1], [2], [3]});\n"
"@c ===end===\n"
"@example\n"
"(%i1) makeset (i/j, [i, j], [[1, a], [2, b], [3, c], [4, d]]);\n"
"                           1  2  3  4\n"
"(%o1)                     @{-, -, -, -@}\n"
"                           a  b  c  d\n"
"(%i2) S : @{x, y, z@}$\n"
"(%i3) S3 : cartesian_product (S, S, S);\n"
"(%o3) @{[x, x, x], [x, x, y], [x, x, z], [x, y, x], [x, y, y], \n"
"[x, y, z], [x, z, x], [x, z, y], [x, z, z], [y, x, x], \n"
"[y, x, y], [y, x, z], [y, y, x], [y, y, y], [y, y, z], \n"
"[y, z, x], [y, z, y], [y, z, z], [z, x, x], [z, x, y], \n"
"[z, x, z], [z, y, x], [z, y, y], [z, y, z], [z, z, x], \n"
"[z, z, y], [z, z, z]@}\n"
"(%i4) makeset (i + j + k, [i, j, k], S3);\n"
"(%o4) @{3 x, 3 y, y + 2 x, 2 y + x, 3 z, z + 2 x, z + y + x, \n"
"                                       z + 2 y, 2 z + x, 2 z + y@}\n"
"(%i5) makeset (sin(x), [x], @{[1], [2], [3]@});\n"
"(%o5)               @{sin(1), sin(2), sin(3)@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1227
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1229
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1232
msgid ""
"@anchor{moebius}\n"
"@deffn {Function} moebius (@var{n})\n"
msgstr ""

#: nset.texi:1234
msgid ""
"Represents the Moebius function.\n"
msgstr ""

#: nset.texi:1239
msgid ""
"When @var{n} is product of @math{k} distinct primes,\n"
"@code{moebius(@var{n})} simplifies to @math{(-1)^k};\n"
"when @math{@var{n} = 1}, it simplifies to 1;\n"
"and it simplifies to 0 for all other positive integers. \n"
msgstr ""

#: nset.texi:1241
msgid ""
"@code{moebius} distributes over equations, lists, matrices, and sets.\n"
msgstr ""

#: nset.texi:1243
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1277
msgid ""
"@c ===beg===\n"
"@c moebius (1);\n"
"@c moebius (2 * 3 * 5);\n"
"@c moebius (11 * 17 * 29 * 31);\n"
"@c moebius (2^32);\n"
"@c moebius (n);\n"
"@c moebius (n = 12);\n"
"@c moebius ([11, 11 * 13, 11 * 13 * 15]);\n"
"@c moebius (matrix ([11, 12], [13, 14]));\n"
"@c moebius ({21, 22, 23, 24});\n"
"@c ===end===\n"
"@example\n"
"(%i1) moebius (1);\n"
"(%o1)                           1\n"
"(%i2) moebius (2 * 3 * 5);\n"
"(%o2)                          - 1\n"
"(%i3) moebius (11 * 17 * 29 * 31);\n"
"(%o3)                           1\n"
"(%i4) moebius (2^32);\n"
"(%o4)                           0\n"
"(%i5) moebius (n);\n"
"(%o5)                      moebius(n)\n"
"(%i6) moebius (n = 12);\n"
"(%o6)                    moebius(n) = 0\n"
"(%i7) moebius ([11, 11 * 13, 11 * 13 * 15]);\n"
"(%o7)                      [- 1, 1, 1]\n"
"(%i8) moebius (matrix ([11, 12], [13, 14]));\n"
"                           [ - 1  0 ]\n"
"(%o8)                      [        ]\n"
"                           [ - 1  1 ]\n"
"(%i9) moebius (@{21, 22, 23, 24@});\n"
"(%o9)                      @{- 1, 0, 1@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1281
msgid ""
"@opencatbox\n"
"@category{Integers}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1288
msgid ""
"@end deffn\n"
" \n"
"@anchor{multinomial_coeff}\n"
"@deffn {Function} multinomial_coeff @\n"
"@fname{multinomial_coeff} (@var{a_1}, ..., @var{a_n}) @\n"
"@fname{multinomial_coeff} ()\n"
msgstr ""

#: nset.texi:1290
msgid ""
"Returns the multinomial coefficient.\n"
msgstr ""

#: nset.texi:1296
msgid ""
"When each @var{a_k} is a nonnegative integer, the multinomial coefficient\n"
"gives the number of ways of placing @code{@var{a_1} + ... + @var{a_n}} \n"
"distinct objects into @math{n} boxes with @var{a_k} elements in the \n"
"@math{k}'th box. In general, @code{multinomial_coeff (@var{a_1}, ..., @var{a_n})}\n"
"evaluates to @code{(@var{a_1} + ... + @var{a_n})!/(@var{a_1}! ... @var{a_n}!)}.\n"
msgstr ""

#: nset.texi:1298
msgid ""
"@code{multinomial_coeff()} (with no arguments) evaluates to 1.\n"
msgstr ""

#: nset.texi:1300
msgid ""
"@code{minfactorial} may be able to simplify the value returned by @code{multinomial_coeff}.\n"
msgstr ""

#: nset.texi:1302
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1325
msgid ""
"@c ===beg===\n"
"@c multinomial_coeff (1, 2, x);\n"
"@c minfactorial (%);\n"
"@c multinomial_coeff (-6, 2);\n"
"@c minfactorial (%);\n"
"@c ===end===\n"
"@example\n"
"(%i1) multinomial_coeff (1, 2, x);\n"
"                            (x + 3)!\n"
"(%o1)                       --------\n"
"                              2 x!\n"
"(%i2) minfactorial (%);\n"
"                     (x + 1) (x + 2) (x + 3)\n"
"(%o2)                -----------------------\n"
"                                2\n"
"(%i3) multinomial_coeff (-6, 2);\n"
"                             (- 4)!\n"
"(%o3)                       --------\n"
"                            2 (- 6)!\n"
"(%i4) minfactorial (%);\n"
"(%o4)                          10\n"
"@end example\n"
msgstr ""

#: nset.texi:1329
msgid ""
"@opencatbox\n"
"@category{Integers}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1331
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1336
msgid ""
"@anchor{num_distinct_partitions}\n"
"@deffn {Function} num_distinct_partitions @\n"
"@fname{num_distinct_partitions} (@var{n}) @\n"
"@fname{num_distinct_partitions} (@var{n}, list)\n"
msgstr ""

#: nset.texi:1340
msgid ""
"Returns the number of distinct integer partitions of @var{n}\n"
"when @var{n} is a nonnegative integer.\n"
"Otherwise, @code{num_distinct_partitions} returns a noun expression.\n"
msgstr ""

#: nset.texi:1343
msgid ""
"@code{num_distinct_partitions(@var{n}, list)} returns a \n"
"list of the number of distinct partitions of 1, 2, 3, ..., @var{n}. \n"
msgstr ""

#: nset.texi:1347
msgid ""
"A distinct partition of @var{n} is\n"
"a list of distinct positive integers @math{k_1}, ..., @math{k_m}\n"
"such that @math{@var{n} = k_1 + ... + k_m}.\n"
msgstr ""

#: nset.texi:1349
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1363
msgid ""
"@c ===beg===\n"
"@c num_distinct_partitions (12);\n"
"@c num_distinct_partitions (12, list);\n"
"@c num_distinct_partitions (n);\n"
"@c ===end===\n"
"@example\n"
"(%i1) num_distinct_partitions (12);\n"
"(%o1)                          15\n"
"(%i2) num_distinct_partitions (12, list);\n"
"(%o2)      [1, 1, 1, 2, 2, 3, 4, 5, 6, 8, 10, 12, 15]\n"
"(%i3) num_distinct_partitions (n);\n"
"(%o3)              num_distinct_partitions(n)\n"
"@end example\n"
msgstr ""

#: nset.texi:1367
msgid ""
"@opencatbox\n"
"@category{Integers}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1369
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1374
msgid ""
"@anchor{num_partitions}\n"
"@deffn {Function} num_partitions @\n"
"@fname{num_partitions} (@var{n}) @\n"
"@fname{num_partitions} (@var{n}, list)\n"
msgstr ""

#: nset.texi:1378
msgid ""
"Returns the number of integer partitions of @var{n}\n"
"when @var{n} is a nonnegative integer.\n"
"Otherwise, @code{num_partitions} returns a noun expression.\n"
msgstr ""

#: nset.texi:1381
msgid ""
"@code{num_partitions(@var{n}, list)} returns a\n"
"list of the number of integer partitions of 1, 2, 3, ..., @var{n}.\n"
msgstr ""

#: nset.texi:1385
msgid ""
"For a nonnegative integer @var{n}, @code{num_partitions(@var{n})} is equal to\n"
"@code{cardinality(integer_partitions(@var{n}))}; however, @code{num_partitions} \n"
"does not actually construct the set of partitions, so it is much faster.\n"
msgstr ""

#: nset.texi:1387
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1401
msgid ""
"@c ===beg===\n"
"@c num_partitions (5) = cardinality (integer_partitions (5));\n"
"@c num_partitions (8, list);\n"
"@c num_partitions (n);\n"
"@c ===end===\n"
"@example\n"
"(%i1) num_partitions (5) = cardinality (integer_partitions (5));\n"
"(%o1)                         7 = 7\n"
"(%i2) num_partitions (8, list);\n"
"(%o2)            [1, 1, 2, 3, 5, 7, 11, 15, 22]\n"
"(%i3) num_partitions (n);\n"
"(%o3)                   num_partitions(n)\n"
"@end example\n"
msgstr ""

#: nset.texi:1405
msgid ""
"@opencatbox\n"
"@category{Integers}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1407
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1412
msgid ""
"@anchor{partition_set}\n"
"@deffn {Function} partition_set (@var{a}, @var{f})\n"
msgstr ""

#: nset.texi:1414
msgid ""
"Partitions the set @var{a} according to the predicate @var{f}.\n"
msgstr ""

#: nset.texi:1419
msgid ""
"@code{partition_set} returns a list of two sets.\n"
"The first set comprises the elements of @var{a} for which @var{f} evaluates to @code{false},\n"
"and the second comprises any other elements of @var{a}.\n"
"@code{partition_set} does not apply @code{is} to the return value of @var{f}.\n"
msgstr ""

#: nset.texi:1421
msgid ""
"@code{partition_set} complains if @var{a} is not a literal set.\n"
msgstr ""

#: nset.texi:1423
msgid ""
"See also @mref{subset}.\n"
msgstr ""

#: nset.texi:1425
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1438
msgid ""
"@c ===beg===\n"
"@c partition_set ({2, 7, 1, 8, 2, 8}, evenp);\n"
"@c partition_set ({x, rat(y), rat(y) + z, 1}, \n"
"@c                      lambda ([x], ratp(x)));\n"
"@c ===end===\n"
"@example\n"
"(%i1) partition_set (@{2, 7, 1, 8, 2, 8@}, evenp);\n"
"(%o1)                   [@{1, 7@}, @{2, 8@}]\n"
"(%i2) partition_set (@{x, rat(y), rat(y) + z, 1@},\n"
"                     lambda ([x], ratp(x)));\n"
"(%o2)/R/              [@{1, x@}, @{y, y + z@}]\n"
"@end example\n"
msgstr ""

#: nset.texi:1442
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1444
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1447
msgid ""
"@anchor{permutations}\n"
"@deffn {Function} permutations (@var{a})\n"
msgstr ""

#: nset.texi:1450
msgid ""
"Returns a set of all distinct permutations of the members of \n"
"the list or set @var{a}. Each permutation is a list, not a set. \n"
msgstr ""

#: nset.texi:1453
msgid ""
"When @var{a} is a list, duplicate members of @var{a} are included\n"
"in the permutations.\n"
msgstr ""

#: nset.texi:1455
msgid ""
"@code{permutations} complains if @var{a} is not a literal list or set.\n"
msgstr ""

#: nset.texi:1457
msgid ""
"See also @mref{random_permutation}.\n"
msgstr ""

#: nset.texi:1459
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1470
msgid ""
"@c ===beg===\n"
"@c permutations ([a, a]);\n"
"@c permutations ([a, a, b]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) permutations ([a, a]);\n"
"(%o1)                       @{[a, a]@}\n"
"(%i2) permutations ([a, a, b]);\n"
"(%o2)           @{[a, a, b], [a, b, a], [b, a, a]@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1474
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Lists}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1476
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1481
msgid ""
"@anchor{powerset}\n"
"@deffn {Function} powerset @\n"
"@fname{powerset} (@var{a}) @\n"
"@fname{powerset} (@var{a}, @var{n})\n"
msgstr ""

#: nset.texi:1483
msgid ""
"Returns the set of all subsets of @var{a}, or a subset of that set.\n"
msgstr ""

#: nset.texi:1486
msgid ""
"@code{powerset(@var{a})} returns the set of all subsets of the set @var{a}.\n"
"@code{powerset(@var{a})} has @code{2^cardinality(@var{a})} members.\n"
msgstr ""

#: nset.texi:1489
msgid ""
"@code{powerset(@var{a}, @var{n})} returns the set of all subsets of @var{a} that have \n"
"cardinality @var{n}.\n"
msgstr ""

#: nset.texi:1492
msgid ""
"@code{powerset} complains if @var{a} is not a literal set,\n"
"or if @var{n} is not a nonnegative integer.\n"
msgstr ""

#: nset.texi:1494
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1517
msgid ""
"@c ===beg===\n"
"@c powerset ({a, b, c});\n"
"@c powerset ({w, x, y, z}, 4);\n"
"@c powerset ({w, x, y, z}, 3);\n"
"@c powerset ({w, x, y, z}, 2);\n"
"@c powerset ({w, x, y, z}, 1);\n"
"@c powerset ({w, x, y, z}, 0);\n"
"@c ===end===\n"
"@example\n"
"(%i1) powerset (@{a, b, c@});\n"
"(%o1) @{@{@}, @{a@}, @{a, b@}, @{a, b, c@}, @{a, c@}, @{b@}, @{b, c@}, @{c@}@}\n"
"(%i2) powerset (@{w, x, y, z@}, 4);\n"
"(%o2)                    @{@{w, x, y, z@}@}\n"
"(%i3) powerset (@{w, x, y, z@}, 3);\n"
"(%o3)     @{@{w, x, y@}, @{w, x, z@}, @{w, y, z@}, @{x, y, z@}@}\n"
"(%i4) powerset (@{w, x, y, z@}, 2);\n"
"(%o4)   @{@{w, x@}, @{w, y@}, @{w, z@}, @{x, y@}, @{x, z@}, @{y, z@}@}\n"
"(%i5) powerset (@{w, x, y, z@}, 1);\n"
"(%o5)                 @{@{w@}, @{x@}, @{y@}, @{z@}@}\n"
"(%i6) powerset (@{w, x, y, z@}, 0);\n"
"(%o6)                         @{@{@}@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1521
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1523
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1526
msgid ""
"@anchor{random_permutation}\n"
"@deffn {Function} random_permutation (@var{a})\n"
msgstr ""

#: nset.texi:1529
msgid ""
"Returns a random permutation of the set or list @var{a},\n"
"as constructed by the Knuth shuffle algorithm.\n"
msgstr ""

#: nset.texi:1533
msgid ""
"The return value is a new list, which is distinct\n"
"from the argument even if all elements happen to be the same.\n"
"However, the elements of the argument are not copied.\n"
msgstr ""

#: nset.texi:1535
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1552
msgid ""
"@c ===beg===\n"
"@c random_permutation ([a, b, c, 1, 2, 3]);\n"
"@c random_permutation ([a, b, c, 1, 2, 3]);\n"
"@c random_permutation ({x + 1, y + 2, z + 3});\n"
"@c random_permutation ({x + 1, y + 2, z + 3});\n"
"@c ===end===\n"
"@example\n"
"(%i1) random_permutation ([a, b, c, 1, 2, 3]);\n"
"(%o1)                  [c, 1, 2, 3, a, b]\n"
"(%i2) random_permutation ([a, b, c, 1, 2, 3]);\n"
"(%o2)                  [b, 3, 1, c, a, 2]\n"
"(%i3) random_permutation (@{x + 1, y + 2, z + 3@});\n"
"(%o3)                 [y + 2, z + 3, x + 1]\n"
"(%i4) random_permutation (@{x + 1, y + 2, z + 3@});\n"
"(%o4)                 [x + 1, y + 2, z + 3]\n"
"@end example\n"
msgstr ""

#: nset.texi:1556
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Lists}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1558
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1561
msgid ""
"@anchor{setdifference}\n"
"@deffn {Function}  setdifference (@var{a}, @var{b})\n"
msgstr ""

#: nset.texi:1564
msgid ""
"Returns a set containing the elements in the set @var{a} that are\n"
"not in the set @var{b}.\n"
msgstr ""

#: nset.texi:1566
msgid ""
"@code{setdifference} complains if either @var{a} or @var{b} is not a literal set.\n"
msgstr ""

#: nset.texi:1568
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1594
msgid ""
"@c ===beg===\n"
"@c S_1 : {a, b, c, x, y, z};\n"
"@c S_2 : {aa, bb, c, x, y, zz};\n"
"@c setdifference (S_1, S_2);\n"
"@c setdifference (S_2, S_1);\n"
"@c setdifference (S_1, S_1);\n"
"@c setdifference (S_1, {});\n"
"@c setdifference ({}, S_1);\n"
"@c ===end===\n"
"@example\n"
"(%i1) S_1 : @{a, b, c, x, y, z@};\n"
"(%o1)                  @{a, b, c, x, y, z@}\n"
"(%i2) S_2 : @{aa, bb, c, x, y, zz@};\n"
"(%o2)                 @{aa, bb, c, x, y, zz@}\n"
"(%i3) setdifference (S_1, S_2);\n"
"(%o3)                       @{a, b, z@}\n"
"(%i4) setdifference (S_2, S_1);\n"
"(%o4)                     @{aa, bb, zz@}\n"
"(%i5) setdifference (S_1, S_1);\n"
"(%o5)                          @{@}\n"
"(%i6) setdifference (S_1, @{@});\n"
"(%o6)                  @{a, b, c, x, y, z@}\n"
"(%i7) setdifference (@{@}, S_1);\n"
"(%o7)                          @{@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1598
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1600
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1603
msgid ""
"@anchor{setequalp}\n"
"@deffn {Function} setequalp (@var{a}, @var{b})\n"
msgstr ""

#: nset.texi:1612
msgid ""
"Returns @code{true} if sets @var{a} and @var{b} have the same number of elements\n"
"@c $SETEQUALP CALLS THE LISP FUNCTION LIKE,\n"
"@c AND SO DOES THE CODE TO EVALUATE IS (X = Y).\n"
"and @code{is(@var{x} = @var{y})} is @code{true}\n"
"for @code{x} in the elements of @var{a}\n"
"and @code{y} in the elements of @var{b},\n"
"considered in the order determined by @code{listify}.\n"
"Otherwise, @code{setequalp} returns @code{false}.\n"
msgstr ""

#: nset.texi:1614
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1628
msgid ""
"@c ===beg===\n"
"@c setequalp ({1, 2, 3}, {1, 2, 3});\n"
"@c setequalp ({a, b, c}, {1, 2, 3});\n"
"@c setequalp ({x^2 - y^2}, {(x + y) * (x - y)});\n"
"@c ===end===\n"
"@example\n"
"(%i1) setequalp (@{1, 2, 3@}, @{1, 2, 3@});\n"
"(%o1)                         true\n"
"(%i2) setequalp (@{a, b, c@}, @{1, 2, 3@});\n"
"(%o2)                         false\n"
"(%i3) setequalp (@{x^2 - y^2@}, @{(x + y) * (x - y)@});\n"
"(%o3)                         false\n"
"@end example\n"
msgstr ""

#: nset.texi:1632
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Predicate functions}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1634
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1637
msgid ""
"@anchor{setify}\n"
"@deffn {Function} setify (@var{a})\n"
msgstr ""

#: nset.texi:1641
msgid ""
"Constructs a set from the elements of the list @var{a}. Duplicate\n"
"elements of the list @var{a} are deleted and the elements\n"
"are sorted according to the predicate @code{orderlessp}.\n"
msgstr ""

#: nset.texi:1643
msgid ""
"@code{setify} complains if @var{a} is not a literal list.\n"
msgstr ""

#: nset.texi:1645
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1659
msgid ""
"@c ===beg===\n"
"@c setify ([1, 2, 3, a, b, c]);\n"
"@c setify ([a, b, c, a, b, c]);\n"
"@c setify ([7, 13, 11, 1, 3, 9, 5]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) setify ([1, 2, 3, a, b, c]);\n"
"(%o1)                  @{1, 2, 3, a, b, c@}\n"
"(%i2) setify ([a, b, c, a, b, c]);\n"
"(%o2)                       @{a, b, c@}\n"
"(%i3) setify ([7, 13, 11, 1, 3, 9, 5]);\n"
"(%o3)                @{1, 3, 5, 7, 9, 11, 13@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1663
msgid ""
"@opencatbox\n"
"@category{Lists}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1665
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1668
msgid ""
"@anchor{setp}\n"
"@deffn {Function} setp (@var{a})\n"
msgstr ""

#: nset.texi:1670
msgid ""
"Returns @code{true} if and only if @var{a} is a Maxima set.\n"
msgstr ""

#: nset.texi:1673
msgid ""
"@code{setp} returns @code{true} for unsimplified sets (that is, sets with redundant members)\n"
"as well as simplified sets.\n"
msgstr ""

#: nset.texi:1677
msgid ""
"@c NOT SURE WE NEED TO MENTION THIS. OK FOR NOW\n"
"@code{setp} is equivalent to the Maxima function\n"
"@code{setp(a) := not atom(a) and op(a) = 'set}.\n"
msgstr ""

#: nset.texi:1679
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1693
msgid ""
"@c ===beg===\n"
"@c simp : false;\n"
"@c {a, a, a};\n"
"@c setp (%);\n"
"@c ===end===\n"
"@example\n"
"(%i1) simp : false;\n"
"(%o1)                         false\n"
"(%i2) @{a, a, a@};\n"
"(%o2)                       @{a, a, a@}\n"
"(%i3) setp (%);\n"
"(%o3)                         true\n"
"@end example\n"
msgstr ""

#: nset.texi:1697
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Predicate functions}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1699
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1704
msgid ""
"@anchor{set_partitions}\n"
"@deffn {Function} set_partitions @\n"
"@fname{set_partitions} (@var{a}) @\n"
"@fname{set_partitions} (@var{a}, @var{n})\n"
msgstr ""

#: nset.texi:1706
msgid ""
"Returns the set of all partitions of @var{a}, or a subset of that set.\n"
msgstr ""

#: nset.texi:1709
msgid ""
"@code{set_partitions(@var{a}, @var{n})} returns a set of all\n"
"decompositions of @var{a} into @var{n} nonempty disjoint subsets.\n"
msgstr ""

#: nset.texi:1711
msgid ""
"@code{set_partitions(@var{a})} returns the set of all partitions.\n"
msgstr ""

#: nset.texi:1713
msgid ""
"@code{stirling2} returns the cardinality of the set of partitions of a set.\n"
msgstr ""

#: nset.texi:1715
msgid ""
"A set of sets @math{P} is a partition of a set @math{S} when\n"
msgstr ""

#: nset.texi:1724
msgid ""
"@enumerate\n"
"@item\n"
"each member of @math{P} is a nonempty set,\n"
"@item\n"
"distinct members of @math{P} are disjoint,\n"
"@item\n"
"the union of the members of @math{P} equals @math{S}.\n"
"@end enumerate\n"
msgstr ""

#: nset.texi:1726
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1728
msgid ""
"The empty set is a partition of itself, the conditions 1 and 2 being vacuously true.\n"
msgstr ""

#: nset.texi:1736
msgid ""
"@c ===beg===\n"
"@c set_partitions ({});\n"
"@c ===end===\n"
"@example\n"
"(%i1) set_partitions (@{@});\n"
"(%o1)                         @{@{@}@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1738
msgid ""
"The cardinality of the set of partitions of a set can be found using @code{stirling2}.\n"
msgstr ""

#: nset.texi:1750
msgid ""
"@c ===beg===\n"
"@c s: {0, 1, 2, 3, 4, 5}$\n"
"@c p: set_partitions (s, 3)$ \n"
"@c cardinality(p) = stirling2 (6, 3);\n"
"@c ===end===\n"
"@example\n"
"(%i1) s: @{0, 1, 2, 3, 4, 5@}$\n"
"(%i2) p: set_partitions (s, 3)$ \n"
"(%i3) cardinality(p) = stirling2 (6, 3);\n"
"(%o3)                        90 = 90\n"
"@end example\n"
msgstr ""

#: nset.texi:1752
msgid ""
"Each member of @code{p} should have @var{n} = 3 members; let's check.\n"
msgstr ""

#: nset.texi:1764
msgid ""
"@c ===beg===\n"
"@c s: {0, 1, 2, 3, 4, 5}$\n"
"@c p: set_partitions (s, 3)$ \n"
"@c map (cardinality, p);\n"
"@c ===end===\n"
"@example\n"
"(%i1) s: @{0, 1, 2, 3, 4, 5@}$\n"
"(%i2) p: set_partitions (s, 3)$ \n"
"(%i3) map (cardinality, p);\n"
"(%o3)                          @{3@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1767
msgid ""
"Finally, for each member of @code{p}, the union of its members should \n"
"equal @code{s}; again let's check.\n"
msgstr ""

#: nset.texi:1779
msgid ""
"@c ===beg===\n"
"@c s: {0, 1, 2, 3, 4, 5}$\n"
"@c p: set_partitions (s, 3)$ \n"
"@c map (lambda ([x], apply (union, listify (x))), p);\n"
"@c ===end===\n"
"@example\n"
"(%i1) s: @{0, 1, 2, 3, 4, 5@}$\n"
"(%i2) p: set_partitions (s, 3)$ \n"
"(%i3) map (lambda ([x], apply (union, listify (x))), p);\n"
"(%o3)                 @{@{0, 1, 2, 3, 4, 5@}@}\n"
"@end example\n"
msgstr ""

#: nset.texi:1783
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1785
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1790
msgid ""
"@anchor{some}\n"
"@deffn {Function} some @\n"
"@fname{some} (@var{f}, @var{a}) @\n"
"@fname{some} (@var{f}, @var{L_1}, ..., @var{L_n})\n"
msgstr ""

#: nset.texi:1792
msgid ""
"Returns @code{true} if the predicate @var{f} is @code{true} for one or more given arguments.\n"
msgstr ""

#: nset.texi:1799
msgid ""
"Given one set as the second argument, \n"
"@code{some(@var{f}, @var{s})} returns @code{true}\n"
"if @code{is(@var{f}(@var{a_i}))} returns @code{true} for one or more @var{a_i} in @var{s}.\n"
"@code{some} may or may not evaluate @var{f} for all @var{a_i} in @var{s}.\n"
"Since sets are unordered,\n"
"@code{some} may evaluate @code{@var{f}(@var{a_i})} in any order.\n"
msgstr ""

#: nset.texi:1807
msgid ""
"Given one or more lists as arguments,\n"
"@code{some(@var{f}, @var{L_1}, ..., @var{L_n})} returns @code{true}\n"
"if @code{is(@var{f}(@var{x_1}, ..., @var{x_n}))} returns @code{true} \n"
"for one or more @var{x_1}, ..., @var{x_n} in @var{L_1}, ..., @var{L_n}, respectively.\n"
"@code{some} may or may not evaluate \n"
"@var{f} for some combinations @var{x_1}, ..., @var{x_n}.\n"
"@code{some} evaluates lists in the order of increasing index.\n"
msgstr ""

#: nset.texi:1810
msgid ""
"Given an empty set @code{@{@}} or empty lists @code{[]} as arguments,\n"
"@code{some} returns @code{false}.\n"
msgstr ""

#: nset.texi:1815
msgid ""
"When the global flag @code{maperror} is @code{true}, all lists \n"
"@var{L_1}, ..., @var{L_n} must have equal lengths.\n"
"When @code{maperror} is @code{false}, list arguments are\n"
"effectively truncated to the length of the shortest list. \n"
msgstr ""

#: nset.texi:1823
msgid ""
"Return values of the predicate @var{f} which evaluate (via @code{is})\n"
"to something other than @code{true} or @code{false}\n"
"are governed by the global flag @code{prederror}.\n"
"When @code{prederror} is @code{true},\n"
"such values are treated as @code{false}.\n"
"When @code{prederror} is @code{false},\n"
"such values are treated as @code{unknown}.\n"
msgstr ""

#: nset.texi:1825
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1828
msgid ""
"@code{some} applied to a single set.\n"
"The predicate is a function of one argument.\n"
msgstr ""

#: nset.texi:1839
msgid ""
"@c ===beg===\n"
"@c some (integerp, {1, 2, 3, 4, 5, 6});\n"
"@c some (atom, {1, 2, sin(3), 4, 5 + y, 6});\n"
"@c ===end===\n"
"@example\n"
"(%i1) some (integerp, @{1, 2, 3, 4, 5, 6@});\n"
"(%o1)                         true\n"
"(%i2) some (atom, @{1, 2, sin(3), 4, 5 + y, 6@});\n"
"(%o2)                         true\n"
"@end example\n"
msgstr ""

#: nset.texi:1842
msgid ""
"@code{some} applied to two lists.\n"
"The predicate is a function of two arguments.\n"
msgstr ""

#: nset.texi:1853
msgid ""
"@c ===beg===\n"
"@c some (\\"=\\", [a, b, c], [a, b, c]);\n"
"@c some (\\"#\\", [a, b, c], [a, b, c]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) some (\\"=\\", [a, b, c], [a, b, c]);\n"
"(%o1)                         true\n"
"(%i2) some (\\"#\\", [a, b, c], [a, b, c]);\n"
"(%o2)                         false\n"
"@end example\n"
msgstr ""

#: nset.texi:1857
msgid ""
"Return values of the predicate @var{f} which evaluate\n"
"to something other than @code{true} or @code{false}\n"
"are governed by the global flag @code{prederror}.\n"
msgstr ""

#: nset.texi:1885
msgid ""
"@c ===beg===\n"
"@c prederror : false;\n"
"@c map (lambda ([a, b], is (a < b)), [x, y, z], \n"
"@c            [x^2, y^2, z^2]);\n"
"@c some (\\"<\\", [x, y, z], [x^2, y^2, z^2]);\n"
"@c some (\\"<\\", [x, y, z], [x^2, y^2, z + 1]);\n"
"@c prederror : true;\n"
"@c some (\\"<\\", [x, y, z], [x^2, y^2, z^2]);\n"
"@c some (\\"<\\", [x, y, z], [x^2, y^2, z + 1]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) prederror : false;\n"
"(%o1)                         false\n"
"(%i2) map (lambda ([a, b], is (a < b)), [x, y, z],\n"
"           [x^2, y^2, z^2]);\n"
"(%o2)              [unknown, unknown, unknown]\n"
"(%i3) some (\\"<\\", [x, y, z], [x^2, y^2, z^2]);\n"
"(%o3)                        unknown\n"
"(%i4) some (\\"<\\", [x, y, z], [x^2, y^2, z + 1]);\n"
"(%o4)                         true\n"
"(%i5) prederror : true;\n"
"(%o5)                         true\n"
"(%i6) some (\\"<\\", [x, y, z], [x^2, y^2, z^2]);\n"
"(%o6)                         false\n"
"(%i7) some (\\"<\\", [x, y, z], [x^2, y^2, z + 1]);\n"
"(%o7)                         true\n"
"@end example\n"
msgstr ""

#: nset.texi:1889
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Lists}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1891
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1894
msgid ""
"@anchor{stirling1}\n"
"@deffn {Function} stirling1 (@var{n}, @var{m})\n"
msgstr ""

#: nset.texi:1896
msgid ""
"Represents the Stirling number of the first kind.\n"
msgstr ""

#: nset.texi:1900
msgid ""
"When @var{n} and @var{m} are nonnegative \n"
"integers, the magnitude of @code{stirling1 (@var{n}, @var{m})} is the number of \n"
"permutations of a set with @var{n} members that have @var{m} cycles.\n"
msgstr ""

#: nset.texi:1903
msgid ""
"@code{stirling1} is a simplifying function.\n"
"Maxima knows the following identities:\n"
msgstr ""

#: nset.texi:1919
msgid ""
"@enumerate\n"
"@item\n"
"@math{stirling1(1,k) = kron_delta(1,k), k >= 0},(see @url{http://dlmf.nist.gov/26.8.E2})\n"
"@item\n"
"@math{stirling1(n,n) = 1, n >= 0} (see @url{http://dlmf.nist.gov/26.8.E1})\n"
"@item\n"
"@math{stirling1(n,n-1) = -binomial(n,2), n >= 1}, (see @url{http://dlmf.nist.gov/26.8.E16})\n"
"@item\n"
"@math{stirling1(n,0) = kron_delta(n,0), n >=0}  (see @url{http://dlmf.nist.gov/26.8.E14} and \n"
"   @url{http://dlmf.nist.gov/26.8.E1})\n"
"@item\n"
"@math{stirling1(n,1) =(-1)^(n-1) (n-1)!, n >= 1} (see @url{http://dlmf.nist.gov/26.8.E14})\n"
"@item\n"
"@math{stirling1(n,k) = 0, n >= 0} and @math{k > n}.\n"
"@end enumerate\n"
msgstr ""

#: nset.texi:1923
msgid ""
"These identities are applied when the arguments are literal integers\n"
"or symbols declared as integers, and the first argument is nonnegative.\n"
"@code{stirling1} does not simplify for non-integer arguments.\n"
msgstr ""

#: nset.texi:1926
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1938
msgid ""
"@c ===beg===\n"
"@c declare (n, integer)$\n"
"@c assume (n >= 0)$\n"
"@c stirling1 (n, n);\n"
"@c ===end===\n"
"@example\n"
"(%i1) declare (n, integer)$\n"
"(%i2) assume (n >= 0)$\n"
"(%i3) stirling1 (n, n);\n"
"(%o3)                           1\n"
"@end example\n"
msgstr ""

#: nset.texi:1943
msgid ""
"@opencatbox\n"
"@category{Integers}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:1945
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:1948
msgid ""
"@anchor{stirling2}\n"
"@deffn {Function} stirling2 (@var{n}, @var{m})\n"
msgstr ""

#: nset.texi:1950
msgid ""
"Represents the Stirling number of the second kind.\n"
msgstr ""

#: nset.texi:1954
msgid ""
"When @var{n} and @var{m} are nonnegative \n"
"integers, @code{stirling2 (@var{n}, @var{m})} is the number of ways a set with \n"
"cardinality @var{n} can be partitioned into @var{m} disjoint subsets.\n"
msgstr ""

#: nset.texi:1957
msgid ""
"@code{stirling2} is a simplifying function.\n"
"Maxima knows the following identities.\n"
msgstr ""

#: nset.texi:1966
msgid ""
"@enumerate\n"
"@item @math{stirling2(n,0) = 1, n >= 1} (see @url{http://dlmf.nist.gov/26.8.E17} and stirling2(0,0) = 1)\n"
"@item @math{stirling2(n,n) = 1, n >= 0}, (see @url{http://dlmf.nist.gov/26.8.E4})\n"
"@item @math{stirling2(n,1) = 1, n >= 1}, (see @url{http://dlmf.nist.gov/26.8.E17} and stirling2(0,1) = 0)\n"
"@item @math{stirling2(n,2) = 2^(n-1) -1, n >= 1}, (see @url{http://dlmf.nist.gov/26.8.E17})\n"
"@item @math{stirling2(n,n-1) = binomial(n,2), n>= 1} (see @url{http://dlmf.nist.gov/26.8.E16})\n"
"@item @math{stirling2(n,k) = 0, n >= 0} and @math{k > n}.\n"
"@end enumerate\n"
msgstr ""

#: nset.texi:1970
msgid ""
"These identities are applied when the arguments are literal integers\n"
"or symbols declared as integers, and the first argument is nonnegative.\n"
"@code{stirling2} does not simplify for non-integer arguments.\n"
msgstr ""

#: nset.texi:1972
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:1984
msgid ""
"@c ===beg===\n"
"@c declare (n, integer)$\n"
"@c assume (n >= 0)$\n"
"@c stirling2 (n, n);\n"
"@c ===end===\n"
"@example\n"
"(%i1) declare (n, integer)$\n"
"(%i2) assume (n >= 0)$\n"
"(%i3) stirling2 (n, n);\n"
"(%o3)                           1\n"
"@end example\n"
msgstr ""

#: nset.texi:1986
msgid ""
"@code{stirling2} does not simplify for non-integer arguments.\n"
msgstr ""

#: nset.texi:1994
msgid ""
"@c ===beg===\n"
"@c stirling2 (%pi, %pi);\n"
"@c ===end===\n"
"@example\n"
"(%i1) stirling2 (%pi, %pi);\n"
"(%o1)                  stirling2(%pi, %pi)\n"
"@end example\n"
msgstr ""

#: nset.texi:1998
msgid ""
"@opencatbox\n"
"@category{Integers}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:2000
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:2003
msgid ""
"@anchor{subset}\n"
"@deffn {Function} subset (@var{a}, @var{f})\n"
msgstr ""

#: nset.texi:2005
msgid ""
"Returns the subset of the set @var{a} that satisfies the predicate @var{f}. \n"
msgstr ""

#: nset.texi:2009
msgid ""
"@code{subset} returns a set which comprises the elements of @var{a}\n"
"for which @var{f} returns anything other than @code{false}.\n"
"@code{subset} does not apply @code{is} to the return value of @var{f}.\n"
msgstr ""

#: nset.texi:2011
msgid ""
"@code{subset} complains if @var{a} is not a literal set.\n"
msgstr ""

#: nset.texi:2013
msgid ""
"See also @mref{partition_set}.\n"
msgstr ""

#: nset.texi:2015
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:2026
msgid ""
"@c ===beg===\n"
"@c subset ({1, 2, x, x + y, z, x + y + z}, atom);\n"
"@c subset ({1, 2, 7, 8, 9, 14}, evenp);\n"
"@c ===end===\n"
"@example\n"
"(%i1) subset (@{1, 2, x, x + y, z, x + y + z@}, atom);\n"
"(%o1)                     @{1, 2, x, z@}\n"
"(%i2) subset (@{1, 2, 7, 8, 9, 14@}, evenp);\n"
"(%o2)                      @{2, 8, 14@}\n"
"@end example\n"
msgstr ""

#: nset.texi:2030
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:2032
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:2035
msgid ""
"@anchor{subsetp}\n"
"@deffn {Function} subsetp (@var{a}, @var{b})\n"
msgstr ""

#: nset.texi:2037
msgid ""
"Returns @code{true} if and only if the set @var{a} is a subset of @var{b}.\n"
msgstr ""

#: nset.texi:2039
msgid ""
"@code{subsetp} complains if either @var{a} or @var{b} is not a literal set.\n"
msgstr ""

#: nset.texi:2041
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:2052
msgid ""
"@c ===beg===\n"
"@c subsetp ({1, 2, 3}, {a, 1, b, 2, c, 3});\n"
"@c subsetp ({a, 1, b, 2, c, 3}, {1, 2, 3});\n"
"@c ===end===\n"
"@example\n"
"(%i1) subsetp (@{1, 2, 3@}, @{a, 1, b, 2, c, 3@});\n"
"(%o1)                         true\n"
"(%i2) subsetp (@{a, 1, b, 2, c, 3@}, @{1, 2, 3@});\n"
"(%o2)                         false\n"
"@end example\n"
msgstr ""

#: nset.texi:2056
msgid ""
"@opencatbox\n"
"@category{Sets} @category{Predicate functions}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:2058
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:2061
msgid ""
"@anchor{symmdifference}\n"
"@deffn {Function} symmdifference (@var{a_1}, @dots{}, @var{a_n})\n"
msgstr ""

#: nset.texi:2063
msgid ""
"Returns the symmetric difference of sets @var{a_1}, @dots{}, @var{a_n}.\n"
msgstr ""

#: nset.texi:2067
msgid ""
"Given two arguments, @code{symmdifference (@var{a}, @var{b})} is the same as\n"
"@code{union (setdifference (@var{a}, @var{b}), setdifference (@var{b},\n"
"@var{a}))}.\n"
msgstr ""

#: nset.texi:2069
msgid ""
"@code{symmdifference} complains if any argument is not a literal set.\n"
msgstr ""

#: nset.texi:2071
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:2100
msgid ""
"@c ===beg===\n"
"@c S_1 : {a, b, c};\n"
"@c S_2 : {1, b, c};\n"
"@c S_3 : {a, b, z};\n"
"@c symmdifference ();\n"
"@c symmdifference (S_1);\n"
"@c symmdifference (S_1, S_2);\n"
"@c symmdifference (S_1, S_2, S_3);\n"
"@c symmdifference ({}, S_1, S_2, S_3);\n"
"@c ===end===\n"
"@example\n"
"(%i1) S_1 : @{a, b, c@};\n"
"(%o1)                       @{a, b, c@}\n"
"(%i2) S_2 : @{1, b, c@};\n"
"(%o2)                       @{1, b, c@}\n"
"(%i3) S_3 : @{a, b, z@};\n"
"(%o3)                       @{a, b, z@}\n"
"(%i4) symmdifference ();\n"
"(%o4)                          @{@}\n"
"(%i5) symmdifference (S_1);\n"
"(%o5)                       @{a, b, c@}\n"
"(%i6) symmdifference (S_1, S_2);\n"
"(%o6)                        @{1, a@}\n"
"(%i7) symmdifference (S_1, S_2, S_3);\n"
"(%o7)                        @{1, b, z@}\n"
"(%i8) symmdifference (@{@}, S_1, S_2, S_3);\n"
"(%o8)                        @{1,b, z@}\n"
"@end example\n"
msgstr ""

#: nset.texi:2104
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:2106
msgid ""
"@end deffn\n"
msgstr ""

#: nset.texi:2110
msgid ""
"@anchor{union}\n"
"@deffn {Function} union (@var{a_1}, ..., @var{a_n})\n"
"Returns the union of the sets @var{a_1} through @var{a_n}. \n"
msgstr ""

#: nset.texi:2112
msgid ""
"@code{union()} (with no arguments) returns the empty set.\n"
msgstr ""

#: nset.texi:2114
msgid ""
"@code{union} complains if any argument is not a literal set.\n"
msgstr ""

#: nset.texi:2116
msgid ""
"Examples:\n"
msgstr ""

#: nset.texi:2145
msgid ""
"@c ===beg===\n"
"@c S_1 : {a, b, c + d, %e};\n"
"@c S_2 : {%pi, %i, %e, c + d};\n"
"@c S_3 : {17, 29, 1729, %pi, %i};\n"
"@c union ();\n"
"@c union (S_1);\n"
"@c union (S_1, S_2);\n"
"@c union (S_1, S_2, S_3);\n"
"@c union ({}, S_1, S_2, S_3);\n"
"@c ===end===\n"
"@example\n"
"(%i1) S_1 : @{a, b, c + d, %e@};\n"
"(%o1)                   @{%e, a, b, d + c@}\n"
"(%i2) S_2 : @{%pi, %i, %e, c + d@};\n"
"(%o2)                 @{%e, %i, %pi, d + c@}\n"
"(%i3) S_3 : @{17, 29, 1729, %pi, %i@};\n"
"(%o3)                @{17, 29, 1729, %i, %pi@}\n"
"(%i4) union ();\n"
"(%o4)                          @{@}\n"
"(%i5) union (S_1);\n"
"(%o5)                   @{%e, a, b, d + c@}\n"
"(%i6) union (S_1, S_2);\n"
"(%o6)              @{%e, %i, %pi, a, b, d + c@}\n"
"(%i7) union (S_1, S_2, S_3);\n"
"(%o7)       @{17, 29, 1729, %e, %i, %pi, a, b, d + c@}\n"
"(%i8) union (@{@}, S_1, S_2, S_3);\n"
"(%o8)       @{17, 29, 1729, %e, %i, %pi, a, b, d + c@}\n"
"@end example\n"
msgstr ""

#: nset.texi:2149
msgid ""
"@opencatbox\n"
"@category{Sets}\n"
"@closecatbox\n"
msgstr ""

#: nset.texi:2151
msgid ""
"@end deffn\n"
msgstr ""

