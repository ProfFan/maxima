# SOME DESCRIPTIVE TITLE.">
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF8\n"
"Content-Transfer-Encoding: 8bit\n"
 
# simplex.texi
msgid ""
"@menu\n"
"* Introduction to simplex::\n"
"* Functions and Variables for simplex::\n"
"@end menu\n"
msgstr ""

# simplex.texi
msgid ""
"@node Introduction to simplex, Functions and Variables for simplex, simplex-pkg, simplex-pkg\n"
"@section Introduction to simplex\n"
msgstr ""

# simplex.texi
msgid ""
"@code{simplex} is a package for linear optimization using the simplex algorithm.\n"
msgstr ""

# simplex.texi
msgid ""
"Example:\n"
msgstr ""

# simplex.texi
msgid ""
"@c ===beg===\n"
"@c load(\"simplex\")$\n"
"@c minimize_lp(x+y, [3*x+2*y>2, x+4*y>3]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"simplex\")$\n"
"(%i2) minimize_lp(x+y, [3*x+2*y>2, x+4*y>3]);\n"
"                  9        7       1\n"
"(%o2)            [--, [y = --, x = -]]\n"
"                  10       10      5\n"
"@end example\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Numerical methods}  @category{Optimization} @category{Share packages} @category{Package simplex}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@subsection Tests for simplex\n"
msgstr ""

# simplex.texi
msgid ""
"There are some tests in the directory @code{share/simplex/Tests}.\n"
msgstr ""

# simplex.texi
msgid ""
"@subsubsection klee_minty\n"
msgstr ""

# simplex.texi
msgid ""
"The function @code{klee_minty} produces input for @code{linear_program}, for which\n"
"exponential time for solving is required without scaling.\n"
msgstr ""

# simplex.texi
msgid ""
"Example:\n"
msgstr ""

# simplex.texi
msgid ""
"@example\n"
"load(klee_minty)$\n"
"apply(linear_program, klee_minty(6));\n"
"@end example\n"
msgstr ""

# simplex.texi
msgid ""
"A better approach:\n"
msgstr ""

# simplex.texi
msgid ""
"@example\n"
"epsilon_sx : 0$\n"
"scale_sx : true$\n"
"apply(linear_program, klee_minty(10));\n"
"@end example\n"
msgstr ""

# simplex.texi
msgid ""
"@subsubsection NETLIB\n"
msgstr ""

# simplex.texi
msgid ""
"Some smaller problems from netlib (@url{http://www.netlib.org/lp/data/}) test\n"
"suite are converted to a format, readable by Maxima. Problems are @code{adlittle},\n"
"@code{afiro}, @code{kb2} and @code{sc50a}. Each problem has three input files in CSV format for\n"
"matrix @var{A} and vectors @var{b} and @var{c}.\n"
msgstr ""

# simplex.texi
msgid ""
"Example:\n"
msgstr ""

# simplex.texi
msgid ""
"@example\n"
"A : read_matrix(\"adlittle_A.csv\", 'csv)$\n"
"b : read_list(\"adlittle_b.csv\", 'csv)$\n"
"c : read_list(\"adlittle_c.csv\", 'csv)$\n"
"linear_program(A, b, c)$\n"
"%[2]\n"
"=> 225494.963126615\n"
"@end example\n"
msgstr ""

# simplex.texi
msgid ""
"Results:\n"
msgstr ""

# simplex.texi
msgid ""
"@example\n"
"PROBLEM        MINIMUM                SCALING\n"
"adlittle       225494.963126615       no\n"
"afiro          - 464.7531428571429    no\n"
"kb2            - 1749.900129055996    yes\n"
"sc50a          - 64.5750770585645     no\n"
"@end example\n"
msgstr ""

# simplex.texi
msgid ""
"@node Functions and Variables for simplex,  , Introduction to simplex, simplex-pkg\n"
"@section Functions and Variables for simplex\n"
msgstr ""

# simplex.texi
msgid ""
"@anchor{epsilon_lp}\n"
"@defvr {Option variable} epsilon_lp\n"
"Default value: @code{10^-8}\n"
msgstr ""

# simplex.texi
msgid ""
"Epsilon used for numerical computations in @code{linear_program}.\n"
msgstr ""

# simplex.texi
msgid ""
"See also: @mref{linear_program}.\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Package simplex}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@end defvr\n"
msgstr ""

# simplex.texi
msgid ""
"@anchor{linear_program}\n"
"@deffn {Function} linear_program (@var{A}, @var{b}, @var{c})\n"
msgstr ""

# simplex.texi
msgid ""
"@code{linear_program} is an implementation of the simplex algorithm.\n"
"@code{linear_program(A, b, c)} computes a vector @var{x} for which\n"
"@code{c.x} is minimum possible among vectors for which @code{A.x = b}\n"
"and @code{x >= 0}. Argument @var{A} is a matrix and arguments @var{b}\n"
"and @var{c} are lists.\n"
msgstr ""

# simplex.texi
msgid ""
"@code{linear_program} returns a list which contains the minimizing\n"
"vector @var{x} and the minimum value @code{c.x}. If the problem is not\n"
"bounded, it returns \"Problem not bounded!\" and if the problem is not\n"
"feasible, it returns \"Problem not feasible!\".\n"
msgstr ""

# simplex.texi
msgid ""
"To use this function first load the @code{simplex} package with\n"
"@code{load(simplex);}.\n"
msgstr ""

# simplex.texi
msgid ""
"Example:\n"
msgstr ""

# simplex.texi
msgid ""
"@c ===beg===\n"
"@c A: matrix([1,1,-1,0], [2,-3,0,-1], [4,-5,0,0])$\n"
"@c b: [1,1,6]$\n"
"@c c: [1,-2,0,0]$\n"
"@c linear_program(A, b, c);\n"
"@c ===end===\n"
"@example\n"
"(%i2) A: matrix([1,1,-1,0], [2,-3,0,-1], [4,-5,0,0])$\n"
"(%i3) b: [1,1,6]$\n"
"(%i4) c: [1,-2,0,0]$\n"
"(%i5) linear_program(A, b, c);\n"
"                   13     19        3\n"
"(%o5)            [[--, 4, --, 0], - -]\n"
"                   2      2         2\n"
"@end example\n"
msgstr ""

# simplex.texi
msgid ""
"See also: @mref{minimize_lp}, @mref{scale_lp}, and @mref{epsilon_lp}.\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Package simplex} @category{Numerical methods}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@end deffn\n"
msgstr ""

# simplex.texi
msgid ""
"@anchor{maximize_lp}\n"
"@deffn {Function} maximize_lp (@var{obj}, @var{cond}, [@var{pos}])\n"
msgstr ""

# simplex.texi
msgid ""
"Maximizes linear objective function @var{obj} subject to some linear\n"
"constraints @var{cond}. See @mref{minimize_lp} for detailed\n"
"description of arguments and return value.\n"
"See also: @mref{minimize_lp}.\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Package simplex} @category{Numerical methods}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@end deffn\n"
msgstr ""

# simplex.texi
msgid ""
"@anchor{minimize_lp}\n"
"@deffn {Function} minimize_lp (@var{obj}, @var{cond}, [@var{pos}])\n"
msgstr ""

# simplex.texi
msgid ""
"Minimizes a linear objective function @var{obj} subject to some linear\n"
"constraints @var{cond}. @var{cond} a list of linear equations or\n"
"inequalities. In strict inequalities @code{>} is replaced by @code{>=}\n"
"and @code{<} by @code{<=}. The optional argument @var{pos} is a list\n"
"of decision variables which are assumed to be positive.\n"
msgstr ""

# simplex.texi
msgid ""
"If the minimum exists, @code{minimize_lp} returns a list which\n"
"contains the minimum value of the objective function and a list of\n"
"decision variable values for which the minimum is attained. If the\n"
"problem is not bounded, @code{minimize_lp} returns \"Problem not\n"
"bounded!\" and if the problem is not feasible, it returns \"Problem not\n"
"feasible!\".\n"
msgstr ""

# simplex.texi
msgid ""
"The decision variables are not assumed to be nonegative by default. If\n"
"all decision variables are nonegative, set @code{nonegative_lp} to\n"
"@code{true}.  If only some of decision variables are positive, list\n"
"them in the optional argument @var{pos} (note that this is more\n"
"efficient than adding constraints).\n"
msgstr ""

# simplex.texi
msgid ""
"@code{minimize_lp} uses the simplex algorithm which is implemented in\n"
"maxima @code{linear_program} function.\n"
msgstr ""

# simplex.texi
msgid ""
"To use this function first load the @code{simplex} package with\n"
"@code{load(simplex);}.\n"
msgstr ""

# simplex.texi
msgid ""
"Examples:\n"
msgstr ""

# simplex.texi
msgid ""
"@c ===beg===\n"
"@c minimize_lp(x+y, [3*x+y=0, x+2*y>2]);\n"
"@c minimize_lp(x+y, [3*x+y>0, x+2*y>2]), nonegative_lp=true;\n"
"@c minimize_lp(x+y, [3*x+y=0, x+2*y>2]), nonegative_lp=true;\n"
"@c minimize_lp(x+y, [3*x+y>0]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) minimize_lp(x+y, [3*x+y=0, x+2*y>2]);\n"
"                      4       6        2\n"
"(%o1)                [-, [y = -, x = - -]]\n"
"                      5       5        5\n"
"(%i2) minimize_lp(x+y, [3*x+y>0, x+2*y>2]), nonegative_lp=true;\n"
"(%o2)                [1, [y = 1, x = 0]]\n"
"(%i3) minimize_lp(x+y, [3*x+y=0, x+2*y>2]), nonegative_lp=true;\n"
"(%o3)                Problem not feasible!\n"
"(%i4) minimize_lp(x+y, [3*x+y>0]);\n"
"(%o4)                Problem not bounded!\n"
"@end example\n"
"See also: @mref{maximize_lp}, @mref{nonegative_lp}, @mref{epsilon_lp}.\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Package simplex} @category{Numerical methods}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@end deffn\n"
msgstr ""

# simplex.texi
msgid ""
"@anchor{nonegative_lp}\n"
"@defvr {Option variable} nonegative_lp\n"
"Default value: @code{false}\n"
msgstr ""

# simplex.texi
msgid ""
"If @code{nonegative_lp} is true all decision variables to\n"
"@code{minimize_lp} and @code{maximize_lp} are assumed to be positive.\n"
msgstr ""

# simplex.texi
msgid ""
"See also: @mref{minimize_lp}.\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Package simplex}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@end defvr\n"
msgstr ""

# simplex.texi
msgid ""
"@anchor{scale_lp}\n"
"@defvr {Option variable} scale_lp\n"
"Default value: @code{false}\n"
msgstr ""

# simplex.texi
msgid ""
"When @code{scale_lp} is @code{true},\n"
"@code{linear_program} scales its input so that the maximum absolute value in each row or column is 1.\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Package simplex}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@end defvr\n"
msgstr ""

# simplex.texi
msgid ""
"@anchor{pivot_count_sx}\n"
"@defvr {Variable} pivot_count_sx\n"
msgstr ""

# simplex.texi
msgid ""
"After @code{linear_program} returns,\n"
"@code{pivot_count_sx} is the number of pivots in last computation.\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Package simplex}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@end defvr\n"
msgstr ""

# simplex.texi
msgid ""
"@anchor{pivot_max_sx}\n"
"@defvr {Variable} pivot_max_sx\n"
msgstr ""

# simplex.texi
msgid ""
"@code{pivot_max_sx} is the maximum number of pivots allowed by @code{linear_program}.\n"
msgstr ""

# simplex.texi
msgid ""
"@opencatbox\n"
"@category{Package simplex}\n"
"@closecatbox\n"
msgstr ""

# simplex.texi
msgid ""
"@end defvr\n"
msgstr ""

# simplex.texi
msgid ""
msgstr ""
