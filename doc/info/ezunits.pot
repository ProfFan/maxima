# SOME DESCRIPTIVE TITLE.">
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF8\n"
"Content-Transfer-Encoding: 8bit\n"
 
# ezunits.texi
msgid ""
"@menu\n"
"* Introduction to ezunits::\n"
"* Introduction to physical_constants::\n"
"* Functions and Variables for ezunits::\n"
"@end menu\n"
msgstr ""

# ezunits.texi
msgid ""
"@node Introduction to ezunits, Introduction to physical_constants, ezunits-pkg, ezunits-pkg\n"
"@section Introduction to ezunits\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{ezunits} is a package for working with dimensional quantities,\n"
"including some functions for dimensional analysis.\n"
"@code{ezunits} can carry out arithmetic operations on dimensional quantities and unit conversions.\n"
"The built-in units include Systeme Internationale (SI) and US customary units,\n"
"and other units can be declared.\n"
"See also @mrefcomma{physical_constants} a collection of physical constants.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads this package.\n"
"@code{demo(ezunits)} displays several examples.\n"
"The convenience function @code{known_units} returns a list of\n"
"the built-in and user-declared units,\n"
"while @code{display_known_unit_conversions} displays\n"
"the set of known conversions in an easy-to-read format.\n"
msgstr ""

# ezunits.texi
msgid ""
"An expression @math{a ` b} represents a dimensional quantity,\n"
"with @code{a} indicating a nondimensional quantity and @code{b} indicating the dimensional units.\n"
"A symbol can be used as a unit without declaring it as such;\n"
"unit symbols need not have any special properties.\n"
"The quantity and unit of an expression @math{a ` b} can\n"
"be extracted by the @code{qty} and @code{units} functions, respectively.\n"
msgstr ""

# ezunits.texi
msgid ""
"A symbol may be declared to be a dimensional quantity,\n"
"with specified quantity or specified units or both.\n"
msgstr ""

# ezunits.texi
msgid ""
"An expression @math{a ` b `@w{}` c} converts from unit @code{b} to unit @code{c}.\n"
"@code{ezunits} has built-in conversions for SI base units,\n"
"SI derived units, and some non-SI units.\n"
"Unit conversions not already known to @code{ezunits} can be declared.\n"
"The unit conversions known to @code{ezunits} are specified by the\n"
"global variable @code{known_unit_conversions},\n"
"which comprises built-in and user-defined conversions.\n"
"Conversions for products, quotients, and powers of units are\n"
"derived from the set of known unit conversions.\n"
msgstr ""

# ezunits.texi
msgid ""
"As Maxima generally prefers exact numbers (integers or rationals)\n"
"to inexact (float or bigfloat),\n"
"so @code{ezunits} preserves exact numbers when they appear\n"
"in dimensional quantities.\n"
"All built-in unit conversions are expressed in terms of exact numbers;\n"
"inexact numbers in declared conversions are coerced to exact.\n"
msgstr ""

# ezunits.texi
msgid ""
"There is no preferred system for display of units;\n"
"input units are not converted to other units\n"
"unless conversion is explicitly indicated.\n"
"@code{ezunits} recognizes the prefixes m-, k-, M, and G-\n"
"(for milli-, kilo-, mega-, and giga-)\n"
"as applied to SI base units and SI derived units,\n"
"but such prefixes are applied only when indicated by an explicit conversion.\n"
msgstr ""

# ezunits.texi
msgid ""
"Arithmetic operations on dimensional quantities are carried out by\n"
"conventional rules for such operations.\n"
msgstr ""

# ezunits.texi
msgid ""
"@itemize\n"
"@item @math{(x ` a) * (y ` b)} is equal to @math{(x * y) ` (a * b)}.\n"
"@item @math{(x ` a) + (y ` a)} is equal to @math{(x + y) ` a}.\n"
"@item @math{(x ` a)^y} is equal to @math{x^y ` a^y} when @code{y} is nondimensional.\n"
"@end itemize\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{ezunits} does not require that units in a sum have the same dimensions;\n"
"such terms are not added together, and no error is reported.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{ezunits} includes functions for elementary dimensional analysis,\n"
"namely the fundamental dimensions and fundamental units\n"
"of a dimensional quantity,\n"
"and computation of dimensionless quantities and natural units.\n"
"The functions for dimensional analysis were adapted from similar\n"
"functions in another package, written by Barton Willis.\n"
msgstr ""

# ezunits.texi
msgid ""
"For the purpose of dimensional analysis,\n"
"a list of fundamental dimensions and an associated list of fundamental units\n"
"are maintained;\n"
"by default the fundamental dimensions are\n"
"length, mass, time, charge, temperature, and quantity,\n"
"and the fundamental units are the associated SI units,\n"
"but other fundamental dimensions and units can be declared.\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Physical units} @category{Share packages} @category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@node Introduction to physical_constants, Functions and Variables for ezunits, Introduction to ezunits, ezunits-pkg\n"
"@section Introduction to physical_constants\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{physical_constants}\n"
"@code{physical_constants} is a collection of physical constants,\n"
"copied from CODATA 2006 recommended values\n"
"(@url{http://physics.nist.gov/constants}).\n"
"@code{load(physical_constants)} loads this package,\n"
"and loads @code{ezunits} also, if it is not already loaded.\n"
msgstr ""

# ezunits.texi
msgid ""
"A physical constant is represented as a symbol which has a property\n"
"which is the constant value.\n"
"The constant value is a dimensional quantity, as represented by @code{ezunits}.\n"
"The function @code{constvalue} fetches the constant value;\n"
"the constant value is not the ordinary value of the symbol,\n"
"so symbols of physical constants persist in evaluated expressions until their\n"
"values are fetched by @code{constvalue}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{physical_constants} includes some auxiliary information,\n"
"namely, a description string for each constant,\n"
"an estimate of the error of its numerical value,\n"
"and a property for TeX display.\n"
"To identify physical constants, each symbol has the\n"
"@code{physical_constant} property;\n"
"@code{propvars(physical_constant)} therefore shows the list\n"
"of all such symbols.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{physical_constants} comprises the following constants.\n"
msgstr ""

# ezunits.texi
msgid ""
"@table @code\n"
"@item %c\n"
"speed of light in vacuum\n"
"@item %mu_0\n"
"magnetic constant\n"
"@item %e_0\n"
"electric constant\n"
"@item %Z_0\n"
"characteristic impedance of vacuum\n"
"@item %G\n"
"Newtonian constant of gravitation\n"
"@item %h\n"
"Planck constant\n"
"@item %h_bar\n"
"Planck constant\n"
"@item %m_P\n"
"Planck mass\n"
"@item %T_P\n"
"Planck temperature\n"
"@item %l_P\n"
"Planck length\n"
"@item %t_P\n"
"Planck time\n"
"@item %%e\n"
"elementary charge\n"
"@item %Phi_0\n"
"magnetic flux quantum\n"
"@item %G_0\n"
"conductance quantum\n"
"@item %K_J\n"
"Josephson constant\n"
"@item %R_K\n"
"von Klitzing constant\n"
"@item %mu_B\n"
"Bohr magneton\n"
"@item %mu_N\n"
"nuclear magneton\n"
"@item %alpha\n"
"fine-structure constant\n"
"@item %R_inf\n"
"Rydberg constant\n"
"@item %a_0\n"
"Bohr radius\n"
"@item %E_h\n"
"Hartree energy\n"
"@item %ratio_h_me\n"
"quantum of circulation\n"
"@item %m_e\n"
"electron mass\n"
"@item %N_A\n"
"Avogadro constant\n"
"@item %m_u\n"
"atomic mass constant\n"
"@item %F\n"
"Faraday constant\n"
"@item %R\n"
"molar gas constant\n"
"@item %%k\n"
"Boltzmann constant\n"
"@item %V_m\n"
"molar volume of ideal gas\n"
"@item %n_0\n"
"Loschmidt constant\n"
"@item %ratio_S0_R\n"
"Sackur-Tetrode constant (absolute entropy constant)\n"
"@item %sigma\n"
"Stefan-Boltzmann constant\n"
"@item %c_1\n"
"first radiation constant\n"
"@item %c_1L\n"
"first radiation constant for spectral radiance\n"
"@item %c_2\n"
"second radiation constant\n"
"@item %b\n"
"Wien displacement law constant\n"
"@item %b_prime\n"
"Wien displacement law constant\n"
"@end table\n"
msgstr ""

# ezunits.texi
msgid ""
"Reference: @url{http://physics.nist.gov/constants}\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"The list of all symbols which have the @code{physical_constant} property.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (physical_constants)$\n"
"@c propvars (physical_constant);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (physical_constants)$\n"
"(%i2) propvars (physical_constant);\n"
"(%o2) [%c, %mu_0, %e_0, %Z_0, %G, %h, %h_bar, %m_P, %T_P, %l_P, \n"
"%t_P, %%e, %Phi_0, %G_0, %K_J, %R_K, %mu_B, %mu_N, %alpha, \n"
"%R_inf, %a_0, %E_h, %ratio_h_me, %m_e, %N_A, %m_u, %F, %R, %%k, \n"
"%V_m, %n_0, %ratio_S0_R, %sigma, %c_1, %c_1L, %c_2, %b, %b_prime]\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Properties of the physical constant @code{%c}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (physical_constants)$\n"
"@c constantp (%c);\n"
"@c get (%c, description);\n"
"@c constvalue (%c);\n"
"@c get (%c, RSU);\n"
"@c tex (%c);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (physical_constants)$\n"
"(%i2) constantp (%c);\n"
"(%o2)                         true\n"
"(%i3) get (%c, description);\n"
"(%o3)               speed of light in vacuum\n"
"(%i4) constvalue (%c);\n"
"                                      m\n"
"(%o4)                     299792458 ` -\n"
"                                      s\n"
"(%i5) get (%c, RSU);\n"
"(%o5)                           0\n"
"(%i6) tex (%c);\n"
"$$c$$\n"
"(%o6)                         false\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"The energy equivalent of 1 pound-mass.\n"
"The symbol @code{%c} persists until its value is fetched by @code{constvalue}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (physical_constants)$\n"
"@c m * %c^2;\n"
"@c %, m = 1 ` lbm;\n"
"@c constvalue (%);\n"
"@c E : % `` J;\n"
"@c E `` GJ;\n"
"@c float (%);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (physical_constants)$\n"
"(%i2) m * %c^2;\n"
"                                2\n"
"(%o2)                         %c  m\n"
"(%i3) %, m = 1 ` lbm;\n"
"                              2\n"
"(%o3)                       %c  ` lbm\n"
"(%i4) constvalue (%);\n"
"                                            2\n"
"                                       lbm m\n"
"(%o4)              89875517873681764 ` ------\n"
"                                          2\n"
"                                         s\n"
"(%i5) E : % `` J;\n"
"Computing conversions to base units; may take a moment. \n"
"                     366838848464007200\n"
"(%o5)                ------------------ ` J\n"
"                             9\n"
"(%i6) E `` GJ;\n"
"                      458548560580009\n"
"(%o6)                 --------------- ` GJ\n"
"                         11250000\n"
"(%i7) float (%);\n"
"(%o7)              4.0759872051556356e+7 ` GJ\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Physical units} @category{Share packages} @category{Package physical_constants}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@node Functions and Variables for ezunits, , Introduction to physical_constants, ezunits-pkg\n"
"@section Functions and Variables for ezunits\n"
msgstr ""

# ezunits.texi
msgid ""
"@deffn {Operator} `\n"
msgstr ""

# ezunits.texi
msgid ""
"The dimensional quantity operator.\n"
"An expression @math{a ` b} represents a dimensional quantity,\n"
"with @code{a} indicating a nondimensional quantity and @code{b} indicating the dimensional units.\n"
"A symbol can be used as a unit without declaring it as such;\n"
"unit symbols need not have any special properties.\n"
"The quantity and unit of an expression @math{a ` b} can\n"
"be extracted by the @code{qty} and @code{units} functions, respectively.\n"
msgstr ""

# ezunits.texi
msgid ""
"Arithmetic operations on dimensional quantities are carried out by\n"
"conventional rules for such operations.\n"
msgstr ""

# ezunits.texi
msgid ""
"@itemize\n"
"@item @math{(x ` a) * (y ` b)} is equal to @math{(x * y) ` (a * b)}.\n"
"@item @math{(x ` a) + (y ` a)} is equal to @math{(x + y) ` a}.\n"
"@item @math{(x ` a)^y} is equal to @math{x^y ` a^y} when @code{y} is nondimensional.\n"
"@end itemize\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{ezunits} does not require that units in a sum have the same dimensions;\n"
"such terms are not added together, and no error is reported.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} enables this operator.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"SI (Systeme Internationale) units.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c foo : 10 ` m;\n"
"@c qty (foo);\n"
"@c units (foo);\n"
"@c dimensions (foo);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) foo : 10 ` m;\n"
"(%o2)                        10 ` m\n"
"(%i3) qty (foo);\n"
"(%o3)                          10\n"
"(%i4) units (foo);\n"
"(%o4)                           m\n"
"(%i5) dimensions (foo);\n"
"(%o5)                        length\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"\"Customary\" units.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c bar : x ` acre;\n"
"@c dimensions (bar);\n"
"@c fundamental_units (bar);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) bar : x ` acre;\n"
"(%o2)                       x ` acre\n"
"(%i3) dimensions (bar);\n"
"                                   2\n"
"(%o3)                        length\n"
"(%i4) fundamental_units (bar);\n"
"                                2\n"
"(%o4)                          m\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Units ad hoc.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c baz : 3 ` sheep + 8 ` goat + 1 ` horse;\n"
"@c subst ([sheep = 3*goat, horse = 10*goat], baz);\n"
"@c baz2 : 1000`gallon/fortnight;\n"
"@c subst (fortnight = 14*day, baz2);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) baz : 3 ` sheep + 8 ` goat + 1 ` horse;\n"
"(%o2)           8 ` goat + 3 ` sheep + 1 ` horse\n"
"(%i3) subst ([sheep = 3*goat, horse = 10*goat], baz);\n"
"(%o3)                       27 ` goat\n"
"(%i4) baz2 : 1000`gallon/fortnight;\n"
"                                gallon\n"
"(%o4)                   1000 ` ---------\n"
"                               fortnight\n"
"(%i5) subst (fortnight = 14*day, baz2);\n"
"                          500   gallon\n"
"(%o5)                     --- ` ------\n"
"                           7     day\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Arithmetic operations on dimensional quantities.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c 100 ` kg + 200 ` kg;\n"
"@c 100 ` m^3 - 100 ` m^3;\n"
"@c (10 ` kg) * (17 ` m/s^2);\n"
"@c (x ` m) / (y ` s);\n"
"@c (a ` m)^2;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) 100 ` kg + 200 ` kg;\n"
"(%o2)                       300 ` kg\n"
"(%i3) 100 ` m^3 - 100 ` m^3;\n"
"                                  3\n"
"(%o3)                        0 ` m\n"
"(%i4) (10 ` kg) * (17 ` m/s^2);\n"
"                                 kg m\n"
"(%o4)                      170 ` ----\n"
"                                   2\n"
"                                  s\n"
"(%i5) (x ` m) / (y ` s);\n"
"                              x   m\n"
"(%o5)                         - ` -\n"
"                              y   s\n"
"(%i6) (a ` m)^2;\n"
"                              2    2\n"
"(%o6)                        a  ` m\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@deffn {Operator} `@w{}`\n"
msgstr ""

# ezunits.texi
msgid ""
"The unit conversion operator.\n"
"An expression @math{a ` b `@w{}` c} converts from unit @code{b} to unit @code{c}.\n"
"@code{ezunits} has built-in conversions for SI base units,\n"
"SI derived units, and some non-SI units.\n"
"Unit conversions not already known to @code{ezunits} can be declared.\n"
"The unit conversions known to @code{ezunits} are specified by the\n"
"global variable @code{known_unit_conversions},\n"
"which comprises built-in and user-defined conversions.\n"
"Conversions for products, quotients, and powers of units are\n"
"derived from the set of known unit conversions.\n"
msgstr ""

# ezunits.texi
msgid ""
"There is no preferred system for display of units;\n"
"input units are not converted to other units\n"
"unless conversion is explicitly indicated.\n"
"@code{ezunits} does not attempt to simplify units by prefixes\n"
"(milli-, centi-, deci-, etc)\n"
"unless such conversion is explicitly indicated.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} enables this operator.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"The set of known unit conversions.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c display2d : false$\n"
"@c known_unit_conversions;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) display2d : false$\n"
"(%i3) known_unit_conversions;\n"
"(%o3) @{acre = 4840*yard^2,Btu = 1055*J,cfm = feet^3/minute,\n"
"       cm = m/100,day = 86400*s,feet = 381*m/1250,ft = feet,\n"
"       g = kg/1000,gallon = 757*l/200,GHz = 1000000000*Hz,\n"
"       GOhm = 1000000000*Ohm,GPa = 1000000000*Pa,\n"
"       GWb = 1000000000*Wb,Gg = 1000000*kg,Gm = 1000000000*m,\n"
"       Gmol = 1000000*mol,Gs = 1000000000*s,ha = hectare,\n"
"       hectare = 100*m^2,hour = 3600*s,Hz = 1/s,inch = feet/12,\n"
"       km = 1000*m,kmol = 1000*mol,ks = 1000*s,l = liter,\n"
"       lbf = pound_force,lbm = pound_mass,liter = m^3/1000,\n"
"       metric_ton = Mg,mg = kg/1000000,MHz = 1000000*Hz,\n"
"       microgram = kg/1000000000,micrometer = m/1000000,\n"
"       micron = micrometer,microsecond = s/1000000,\n"
"       mile = 5280*feet,minute = 60*s,mm = m/1000,\n"
"       mmol = mol/1000,month = 2629800*s,MOhm = 1000000*Ohm,\n"
"       MPa = 1000000*Pa,ms = s/1000,MWb = 1000000*Wb,\n"
"       Mg = 1000*kg,Mm = 1000000*m,Mmol = 1000000000*mol,\n"
"       Ms = 1000000*s,ns = s/1000000000,ounce = pound_mass/16,\n"
"       oz = ounce,Ohm = s*J/C^2,\n"
"       pound_force = 32*ft*pound_mass/s^2,\n"
"       pound_mass = 200*kg/441,psi = pound_force/inch^2,\n"
"       Pa = N/m^2,week = 604800*s,Wb = J/A,yard = 3*feet,\n"
"       year = 31557600*s,C = s*A,F = C^2/J,GA = 1000000000*A,\n"
"       GC = 1000000000*C,GF = 1000000000*F,GH = 1000000000*H,\n"
"       GJ = 1000000000*J,GK = 1000000000*K,GN = 1000000000*N,\n"
"       GS = 1000000000*S,GT = 1000000000*T,GV = 1000000000*V,\n"
"       GW = 1000000000*W,H = J/A^2,J = m*N,kA = 1000*A,\n"
"       kC = 1000*C,kF = 1000*F,kH = 1000*H,kHz = 1000*Hz,\n"
"       kJ = 1000*J,kK = 1000*K,kN = 1000*N,kOhm = 1000*Ohm,\n"
"       kPa = 1000*Pa,kS = 1000*S,kT = 1000*T,kV = 1000*V,\n"
"       kW = 1000*W,kWb = 1000*Wb,mA = A/1000,mC = C/1000,\n"
"       mF = F/1000,mH = H/1000,mHz = Hz/1000,mJ = J/1000,\n"
"       mK = K/1000,mN = N/1000,mOhm = Ohm/1000,mPa = Pa/1000,\n"
"       mS = S/1000,mT = T/1000,mV = V/1000,mW = W/1000,\n"
"       mWb = Wb/1000,MA = 1000000*A,MC = 1000000*C,\n"
"       MF = 1000000*F,MH = 1000000*H,MJ = 1000000*J,\n"
"       MK = 1000000*K,MN = 1000000*N,MS = 1000000*S,\n"
"       MT = 1000000*T,MV = 1000000*V,MW = 1000000*W,\n"
"       N = kg*m/s^2,R = 5*K/9,S = 1/Ohm,T = J/(m^2*A),V = J/C,\n"
"       W = J/s@}\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Elementary unit conversions.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c 1 ` ft `` m;\n"
"@c %, numer; \n"
"@c 1 ` kg `` lbm; \n"
"@c %, numer;\n"
"@c 1 ` W `` Btu/hour;\n"
"@c %, numer;\n"
"@c 100 ` degC `` degF;\n"
"@c -40 ` degF `` degC;\n"
"@c 1 ` acre*ft `` m^3;\n"
"@c %, numer;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) 1 ` ft `` m;\n"
"Computing conversions to base units; may take a moment. \n"
"                            381\n"
"(%o2)                       ---- ` m\n"
"                            1250\n"
"(%i3) %, numer;\n"
"(%o3)                      0.3048 ` m\n"
"(%i4) 1 ` kg `` lbm;\n"
"                            441\n"
"(%o4)                       --- ` lbm\n"
"                            200\n"
"(%i5) %, numer;\n"
"(%o5)                      2.205 ` lbm\n"
"(%i6) 1 ` W `` Btu/hour;\n"
"                           720   Btu\n"
"(%o6)                      --- ` ----\n"
"                           211   hour\n"
"(%i7) %, numer;\n"
"                                        Btu\n"
"(%o7)               3.412322274881517 ` ----\n"
"                                        hour\n"
"(%i8) 100 ` degC `` degF;\n"
"(%o8)                      212 ` degF\n"
"(%i9) -40 ` degF `` degC;\n"
"(%o9)                     (- 40) ` degC\n"
"(%i10) 1 ` acre*ft `` m^3;\n"
"                        60228605349    3\n"
"(%o10)                  ----------- ` m\n"
"                         48828125\n"
"(%i11) %, numer;\n"
"                                          3\n"
"(%o11)                1233.48183754752 ` m\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Coercing quantities in feet and meters to one or the other.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c 100 ` m + 100 ` ft;\n"
"@c (100 ` m + 100 ` ft) `` ft;\n"
"@c %, numer;\n"
"@c (100 ` m + 100 ` ft) `` m;\n"
"@c %, numer;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) 100 ` m + 100 ` ft;\n"
"(%o2)                  100 ` m + 100 ` ft\n"
"(%i3) (100 ` m + 100 ` ft) `` ft;\n"
"Computing conversions to base units; may take a moment. \n"
"                           163100\n"
"(%o3)                      ------ ` ft\n"
"                            381\n"
"(%i4) %, numer;\n"
"(%o4)                428.0839895013123 ` ft\n"
"(%i5) (100 ` m + 100 ` ft) `` m;\n"
"                            3262\n"
"(%o5)                       ---- ` m\n"
"                             25\n"
"(%i6) %, numer;\n"
"(%o6)                      130.48 ` m\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Dimensional analysis to find fundamental dimensions and fundamental units.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c foo : 1 ` acre * ft;\n"
"@c dimensions (foo);\n"
"@c fundamental_units (foo);\n"
"@c foo `` m^3;\n"
"@c %, numer;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) foo : 1 ` acre * ft;\n"
"(%o2)                      1 ` acre ft\n"
"(%i3) dimensions (foo);\n"
"                                   3\n"
"(%o3)                        length\n"
"(%i4) fundamental_units (foo);\n"
"                                3\n"
"(%o4)                          m\n"
"(%i5) foo `` m^3;\n"
"Computing conversions to base units; may take a moment. \n"
"                        60228605349    3\n"
"(%o5)                   ----------- ` m\n"
"                         48828125\n"
"(%i6) %, numer;\n"
"                                          3\n"
"(%o6)                 1233.48183754752 ` m\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Declared unit conversions.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c declare_unit_conversion (MMBtu = 10^6*Btu, kW = 1000*W);\n"
"@c declare_unit_conversion (kWh = kW*hour, MWh = 1000*kWh, \n"
"@c                          bell = 1800*s);\n"
"@c 1 ` kW*s `` MWh;\n"
"@c 1 ` kW/m^2 `` MMBtu/bell/ft^2;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) declare_unit_conversion (MMBtu = 10^6*Btu, kW = 1000*W);\n"
"(%o2)                         done\n"
"(%i3) declare_unit_conversion (kWh = kW*hour, MWh = 1000*kWh,\n"
"                               bell = 1800*s);\n"
"(%o3)                         done\n"
"(%i4) 1 ` kW*s `` MWh;\n"
"Computing conversions to base units; may take a moment. \n"
"                             1\n"
"(%o4)                     ------- ` MWh\n"
"                          3600000\n"
"(%i5) 1 ` kW/m^2 `` MMBtu/bell/ft^2;\n"
"                       1306449      MMBtu\n"
"(%o5)                 ---------- ` --------\n"
"                      8242187500          2\n"
"                                   bell ft\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{constvalue}\n"
"@deffn {Function} constvalue (@var{x})\n"
msgstr ""

# ezunits.texi
msgid ""
"Shows the value and the units of one of the constants declared by package\n"
"@code{physical_constants}, which includes a list of physical constants, or\n"
"of a new constant declared in package @code{ezunits} (see\n"
"@mref{declare_constvalue}).\n"
msgstr ""

# ezunits.texi
msgid ""
"Note that constant values as recognized by @code{constvalue}\n"
"are separate from values declared by @code{numerval} and\n"
"recognized by @code{constantp}.\n"
msgstr ""

# ezunits.texi
msgid ""
"Example:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (physical_constants)$\n"
"@c constvalue (%G);\n"
"@c get ('%G, 'description);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (physical_constants)$\n"
"(%i2) constvalue (%G);\n"
"                                     3\n"
"                                    m\n"
"(%o2)                    6.67428 ` -----\n"
"                                       2\n"
"                                   kg s\n"
"(%i3) get ('%G, 'description);\n"
"(%o3)           Newtonian constant of gravitation\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{declare_constvalue}\n"
"@deffn {Function} declare_constvalue (@var{a}, @var{x})\n"
msgstr ""

# ezunits.texi
msgid ""
"Declares the value of a constant to be used in package @code{ezunits}. This\n"
"function should be loaded with @code{load(ezunits)}. \n"
msgstr ""

# ezunits.texi
msgid ""
"Example:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c declare_constvalue (FOO, 100 ` lbm / acre);\n"
"@c FOO * (50 ` acre);\n"
"@c constvalue (%);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) declare_constvalue (FOO, 100 ` lbm / acre);\n"
"                                 lbm\n"
"(%o2)                      100 ` ----\n"
"                                 acre\n"
"(%i3) FOO * (50 ` acre);\n"
"(%o3)                     50 FOO ` acre\n"
"(%i4) constvalue (%);\n"
"(%o4)                      5000 ` lbm\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{remove_constvalue}\n"
"@deffn {Function} remove_constvalue (@var{a})\n"
msgstr ""

# ezunits.texi
msgid ""
"Reverts the effect of @mrefdot{declare_constvalue} This function should be\n"
"loaded with @code{load(ezunits)}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{units}\n"
"@deffn {Function} units (@var{x})\n"
msgstr ""

# ezunits.texi
msgid ""
"Returns the units of a dimensional quantity @var{x},\n"
"or returns 1 if @var{x} is nondimensional.\n"
msgstr ""

# ezunits.texi
msgid ""
"@var{x} may be a literal dimensional expression @math{a ` b},\n"
"a symbol with declared units via @code{declare_units}, \n"
"or an expression containing either or both of those.\n"
msgstr ""

# ezunits.texi
msgid ""
"This function should be loaded with @code{load(ezunits)}.\n"
msgstr ""

# ezunits.texi
msgid ""
"Example:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c foo : 100 ` kg;\n"
"@c bar : x ` m/s;\n"
"@c units (foo);\n"
"@c units (bar);\n"
"@c units (foo * bar);\n"
"@c units (foo / bar);\n"
"@c units (foo^2);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) foo : 100 ` kg;\n"
"(%o2)                       100 ` kg\n"
"(%i3) bar : x ` m/s;\n"
"                                  m\n"
"(%o3)                         x ` -\n"
"                                  s\n"
"(%i4) units (foo);\n"
"(%o4)                          kg\n"
"(%i5) units (bar);\n"
"                                m\n"
"(%o5)                           -\n"
"                                s\n"
"(%i6) units (foo * bar);\n"
"                              kg m\n"
"(%o6)                         ----\n"
"                               s\n"
"(%i7) units (foo / bar);\n"
"                              kg s\n"
"(%o7)                         ----\n"
"                               m\n"
"(%i8) units (foo^2);\n"
"                                 2\n"
"(%o8)                          kg\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{declare_units}\n"
"@deffn {Function} declare_units (@var{a}, @var{u})\n"
msgstr ""

# ezunits.texi
msgid ""
"Declares that @mref{units} should return units @var{u} for @var{a},\n"
"where @var{u} is an expression. This function should be loaded with\n"
"@code{load(ezunits)}.\n"
msgstr ""

# ezunits.texi
msgid ""
"Example:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c units (aa);\n"
"@c declare_units (aa, J);\n"
"@c units (aa);\n"
"@c units (aa^2);\n"
"@c foo : 100 ` kg;\n"
"@c units (aa * foo);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) units (aa);\n"
"(%o2)                           1\n"
"(%i3) declare_units (aa, J);\n"
"(%o3)                           J\n"
"(%i4) units (aa);\n"
"(%o4)                           J\n"
"(%i5) units (aa^2);\n"
"                                2\n"
"(%o5)                          J\n"
"(%i6) foo : 100 ` kg;\n"
"(%o6)                       100 ` kg\n"
"(%i7) units (aa * foo);\n"
"(%o7)                         kg J\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{qty}\n"
"@deffn {Function} qty (@var{x})\n"
msgstr ""

# ezunits.texi
msgid ""
"Returns the nondimensional part of a dimensional quantity @var{x},\n"
"or returns @var{x} if @var{x} is nondimensional.\n"
"@var{x} may be a literal dimensional expression @math{a ` b},\n"
"a symbol with declared quantity, \n"
"or an expression containing either or both of those.\n"
msgstr ""

# ezunits.texi
msgid ""
"This function should be loaded with @code{load(ezunits)}.\n"
msgstr ""

# ezunits.texi
msgid ""
"Example:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c foo : 100 ` kg;\n"
"@c qty (foo);\n"
"@c bar : v ` m/s;\n"
"@c foo * bar;\n"
"@c qty (foo * bar);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) foo : 100 ` kg;\n"
"(%o2)                       100 ` kg\n"
"(%i3) qty (foo);\n"
"(%o3)                          100\n"
"(%i4) bar : v ` m/s;\n"
"                                  m\n"
"(%o4)                         v ` -\n"
"                                  s\n"
"(%i5) foo * bar;\n"
"                                  kg m\n"
"(%o5)                     100 v ` ----\n"
"                                   s\n"
"(%i6) qty (foo * bar);\n"
"(%o6)                         100 v\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{declare_qty}\n"
"@deffn {Function} declare_qty (@var{a}, @var{x})\n"
msgstr ""

# ezunits.texi
msgid ""
"Declares that @mref{qty} should return @var{x} for symbol @var{a}, where\n"
"@var{x} is a nondimensional quantity. This function should be loaded\n"
"with @code{load(ezunits)}.\n"
msgstr ""

# ezunits.texi
msgid ""
"Example:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c declare_qty (aa, xx);\n"
"@c qty (aa);\n"
"@c qty (aa^2);\n"
"@c foo : 100 ` kg;\n"
"@c qty (aa * foo);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) declare_qty (aa, xx);\n"
"(%o2)                          xx\n"
"(%i3) qty (aa);\n"
"(%o3)                          xx\n"
"(%i4) qty (aa^2);\n"
"                                 2\n"
"(%o4)                          xx\n"
"(%i5) foo : 100 ` kg;\n"
"(%o5)                       100 ` kg\n"
"(%i6) qty (aa * foo);\n"
"(%o6)                        100 xx\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@c PROBABLY SHOULD RENAME THIS TO DIMENSIONALP !!\n"
"@anchor{unitp}\n"
"@deffn {Function} unitp (@var{x})\n"
msgstr ""

# ezunits.texi
msgid ""
"Returns @code{true} if @var{x} is a literal dimensional expression,\n"
"a symbol declared dimensional,\n"
"or an expression in which the main operator is declared dimensional.\n"
"@code{unitp} returns @code{false} otherwise.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads this function.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{unitp} applied to a literal dimensional expression.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c unitp (100 ` kg);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) unitp (100 ` kg);\n"
"(%o2)                         true\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{unitp} applied to a symbol declared dimensional.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c unitp (foo);\n"
"@c declare (foo, dimensional);\n"
"@c unitp (foo);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) unitp (foo);\n"
"(%o2)                         false\n"
"(%i3) declare (foo, dimensional);\n"
"(%o3)                         done\n"
"(%i4) unitp (foo);\n"
"(%o4)                         true\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{unitp} applied to an expression in which the main operator is declared dimensional.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c unitp (bar (x, y, z));\n"
"@c declare (bar, dimensional);\n"
"@c unitp (bar (x, y, z));\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) unitp (bar (x, y, z));\n"
"(%o2)                         false\n"
"(%i3) declare (bar, dimensional);\n"
"(%o3)                         done\n"
"(%i4) unitp (bar (x, y, z));\n"
"(%o4)                         true\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{declare_unit_conversion}\n"
"@deffn {Function} declare_unit_conversion (@var{u} = @var{v}, ...)\n"
msgstr ""

# ezunits.texi
msgid ""
"Appends equations @var{u} = @var{v}, ... to the list of unit conversions\n"
"known to the unit conversion operator @math{`@w{}`}.\n"
"@var{u} and @var{v} are both multiplicative terms,\n"
"in which any variables are units,\n"
"or both literal dimensional expressions.\n"
msgstr ""

# ezunits.texi
msgid ""
"At present, it is necessary to express conversions such that\n"
"the left-hand side of each equation is a simple unit\n"
"(not a multiplicative expression)\n"
"or a literal dimensional expression with the quantity equal to 1\n"
"and the unit being a simple unit.\n"
"This limitation might be relaxed in future versions.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{known_unit_conversions} is the list of known unit conversions.\n"
msgstr ""

# ezunits.texi
msgid ""
"This function should be loaded with @code{load(ezunits)}.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"Unit conversions expressed by equations of multiplicative terms.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c declare_unit_conversion (nautical_mile = 1852 * m, \n"
"@c                          fortnight = 14 * day);\n"
"@c 100 ` nautical_mile / fortnight `` m/s;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) declare_unit_conversion (nautical_mile = 1852 * m,\n"
"                               fortnight = 14 * day);\n"
"(%o2)                         done\n"
"(%i3) 100 ` nautical_mile / fortnight `` m/s;\n"
"Computing conversions to base units; may take a moment. \n"
"                            463    m\n"
"(%o3)                       ---- ` -\n"
"                            3024   s\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Unit conversions expressed by equations of literal dimensional expressions.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c declare_unit_conversion (1 ` fluid_ounce = 2 ` tablespoon);\n"
"@c declare_unit_conversion (1 ` tablespoon = 3 ` teaspoon);\n"
"@c 15 ` fluid_ounce `` teaspoon;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) declare_unit_conversion (1 ` fluid_ounce = 2 ` tablespoon);\n"
"(%o2)                         done\n"
"(%i3) declare_unit_conversion (1 ` tablespoon = 3 ` teaspoon);\n"
"(%o3)                         done\n"
"(%i4) 15 ` fluid_ounce `` teaspoon;\n"
"Computing conversions to base units; may take a moment. \n"
"(%o4)                     90 ` teaspoon\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{declare_dimensions}\n"
"@deffn {Function} declare_dimensions (@var{a_1}, @var{d_1}, ..., @var{a_n}, @var{d_n})\n"
msgstr ""

# ezunits.texi
msgid ""
"Declares @var{a_1}, ..., @var{a_n} to have dimensions @var{d_1}, ...,\n"
"@var{d_n}, respectively.\n"
msgstr ""

# ezunits.texi
msgid ""
"Each @var{a_k} is a symbol or a list of symbols.\n"
"If it is a list, then every symbol in @var{a_k} is declared to have dimension @var{d_k}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads these functions.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits) $\n"
"@c declare_dimensions ([x, y, z], length, [t, u], time);\n"
"@c dimensions (y^2/u);\n"
"@c fundamental_units (y^2/u);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits) $\n"
"(%i2) declare_dimensions ([x, y, z], length, [t, u], time);\n"
"(%o2)                         done\n"
"(%i3) dimensions (y^2/u);\n"
"                                   2\n"
"                             length\n"
"(%o3)                        -------\n"
"                              time\n"
"(%i4) fundamental_units (y^2/u);\n"
"0 errors, 0 warnings\n"
"                                2\n"
"                               m\n"
"(%o4)                          --\n"
"                               s\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{remove_dimensions}\n"
"@deffn {Function} remove_dimensions (@var{a_1}, ..., @var{a_n})\n"
msgstr ""

# ezunits.texi
msgid ""
"Reverts the effect of @code{declare_dimensions}. This function should be\n"
"loaded with @code{load(ezunits)}.\n"
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{declare_fundamental_dimensions}\n"
"@deffn {Function} declare_fundamental_dimensions (@var{d_1}, @var{d_2}, @var{d_3}, ...)\n"
"@deffnx {Function} remove_fundamental_dimensions (@var{d_1}, @var{d_2}, @var{d_3}, ...)\n"
"@deffnx {Global variable} fundamental_dimensions\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{declare_fundamental_dimensions} declares fundamental dimensions.\n"
"Symbols @var{d_1}, @var{d_2}, @var{d_3}, ... are appended to the list of\n"
"fundamental dimensions, if they are not already on the list.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{remove_fundamental_dimensions} reverts the effect of @code{declare_fundamental_dimensions}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{fundamental_dimensions} is the list of fundamental dimensions.\n"
"By default, the list comprises several physical dimensions.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads these functions.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits) $\n"
"@c fundamental_dimensions;\n"
"@c declare_fundamental_dimensions (money, cattle, happiness);\n"
"@c fundamental_dimensions;\n"
"@c remove_fundamental_dimensions (cattle, happiness);\n"
"@c fundamental_dimensions;\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits) $\n"
"(%i2) fundamental_dimensions;\n"
"(%o2) [length, mass, time, current, temperature, quantity]\n"
"(%i3) declare_fundamental_dimensions (money, cattle, happiness);\n"
"(%o3)                         done\n"
"(%i4) fundamental_dimensions;\n"
"(%o4) [length, mass, time, current, temperature, quantity, \n"
"                                        money, cattle, happiness]\n"
"(%i5) remove_fundamental_dimensions (cattle, happiness);\n"
"(%o5)                         done\n"
"(%i6) fundamental_dimensions;\n"
"(%o6) [length, mass, time, current, temperature, quantity, money]\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{declare_fundamental_units}\n"
"@deffn {Function} declare_fundamental_units (@var{u_1}, @var{d_1}, ..., @var{u_n}, @var{d_n})\n"
"@deffnx {Function} remove_fundamental_units (@var{u_1}, ..., @var{u_n})\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{declare_fundamental_units} declares @var{u_1}, ..., @var{u_n}\n"
"to have dimensions @var{d_1}, ..., @var{d_n}, respectively.\n"
"All arguments must be symbols.\n"
msgstr ""

# ezunits.texi
msgid ""
"After calling @code{declare_fundamental_units},\n"
"@code{dimensions(@var{u_k})} returns @var{d_k} for each argument @var{u_1}, ..., @var{u_n},\n"
"and @code{fundamental_units(@var{d_k})} returns @var{u_k} for each argument @var{d_1}, ..., @var{d_n}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{remove_fundamental_units} reverts the effect of @code{declare_fundamental_units}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads these functions.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits) $\n"
"@c declare_fundamental_dimensions (money, cattle, happiness);\n"
"@c declare_fundamental_units (dollar, money, goat, cattle,\n"
"@c                            smile, happiness);\n"
"@c dimensions (100 ` dollar/goat/km^2);\n"
"@c dimensions (x ` smile/kg);\n"
"@c fundamental_units (money*cattle/happiness);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits) $\n"
"(%i2) declare_fundamental_dimensions (money, cattle, happiness);\n"
"(%o2)                         done\n"
"(%i3) declare_fundamental_units (dollar, money, goat, cattle,\n"
"                                 smile, happiness);\n"
"(%o3)                 [dollar, goat, smile]\n"
"(%i4) dimensions (100 ` dollar/goat/km^2);\n"
"                             money\n"
"(%o4)                    --------------\n"
"                                      2\n"
"                         cattle length\n"
"(%i5) dimensions (x ` smile/kg);\n"
"                            happiness\n"
"(%o5)                       ---------\n"
"                              mass\n"
"(%i6) fundamental_units (money*cattle/happiness);\n"
"0 errors, 0 warnings\n"
"                           dollar goat\n"
"(%o6)                      -----------\n"
"                              smile\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{dimensions}\n"
"@deffn {Function} dimensions (@var{x})\n"
"@deffnx {Function} dimensions_as_list (@var{x})\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{dimensions} returns the dimensions of the dimensional quantity @var{x}\n"
"as an expression comprising products and powers of base dimensions.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{dimensions_as_list} returns the dimensions of the dimensional quantity @var{x}\n"
"as a list, in which each element is an integer which indicates the power of the\n"
"corresponding base dimension in the dimensions of @var{x}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads these functions.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c dimensions (1000 ` kg*m^2/s^3);\n"
"@c declare_units (foo, acre*ft/hour);\n"
"@c dimensions (foo);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) dimensions (1000 ` kg*m^2/s^3);\n"
"                                2\n"
"                          length  mass\n"
"(%o2)                     ------------\n"
"                                 3\n"
"                             time\n"
"(%i3) declare_units (foo, acre*ft/hour);\n"
"                             acre ft\n"
"(%o3)                        -------\n"
"                              hour\n"
"(%i4) dimensions (foo);\n"
"                                   3\n"
"                             length\n"
"(%o4)                        -------\n"
"                              time\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c fundamental_dimensions;\n"
"@c dimensions_as_list (1000 ` kg*m^2/s^3);\n"
"@c declare_units (foo, acre*ft/hour);\n"
"@c dimensions_as_list (foo);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) fundamental_dimensions;\n"
"(%o2)  [length, mass, time, charge, temperature, quantity]\n"
"(%i3) dimensions_as_list (1000 ` kg*m^2/s^3);\n"
"(%o3)                 [2, 1, - 3, 0, 0, 0]\n"
"(%i4) declare_units (foo, acre*ft/hour);\n"
"                             acre ft\n"
"(%o4)                        -------\n"
"                              hour\n"
"(%i5) dimensions_as_list (foo);\n"
"(%o5)                 [3, 0, - 1, 0, 0, 0]\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{fundamental_units}\n"
"@deffn {Function} fundamental_units @\n"
"@fname{fundamental_units} (@var{x}) @\n"
"@fname{fundamental_units} ()\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{fundamental_units(@var{x})} returns the units\n"
"associated with the fundamental dimensions of @var{x}.\n"
"as determined by @code{dimensions(@var{x})}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@var{x} may be a literal dimensional expression @math{a ` b},\n"
"a symbol with declared units via @code{declare_units}, \n"
"or an expression containing either or both of those.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{fundamental_units()} returns the list of all known fundamental units,\n"
"as declared by @code{declare_fundamental_units}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads this function.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits)$\n"
"@c fundamental_units ();\n"
"@c fundamental_units (100 ` mile/hour);\n"
"@c declare_units (aa, g/foot^2);\n"
"@c fundamental_units (aa);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits)$\n"
"(%i2) fundamental_units ();\n"
"(%o2)                 [m, kg, s, A, K, mol]\n"
"(%i3) fundamental_units (100 ` mile/hour);\n"
"                                m\n"
"(%o3)                           -\n"
"                                s\n"
"(%i4) declare_units (aa, g/foot^2);\n"
"                                g\n"
"(%o4)                         -----\n"
"                                  2\n"
"                              foot\n"
"(%i5) fundamental_units (aa);\n"
"                               kg\n"
"(%o5)                          --\n"
"                                2\n"
"                               m\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@anchor{dimensionless}\n"
"@deffn {Function} dimensionless (@var{L})\n"
msgstr ""

# ezunits.texi
msgid ""
"Returns a basis for the dimensionless quantities which can be formed\n"
"from a list @var{L} of dimensional quantities.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads this function.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits) $\n"
"@c dimensionless ([x ` m, y ` m/s, z ` s]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits) $\n"
"(%i2) dimensionless ([x ` m, y ` m/s, z ` s]);\n"
"0 errors, 0 warnings\n"
"0 errors, 0 warnings\n"
"                               y z\n"
"(%o2)                         [---]\n"
"                                x\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"Dimensionless quantities derived from fundamental physical quantities.\n"
"Note that the first element on the list\n"
"is proportional to the fine-structure constant.\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c load (ezunits) $\n"
"@c load (physical_constants) $\n"
"@c dimensionless([%h_bar, %m_e, %m_P, %%e, %c, %e_0]);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load (ezunits) $\n"
"(%i2) load (physical_constants) $\n"
"(%i3) dimensionless([%h_bar, %m_e, %m_P, %%e, %c, %e_0]);\n"
"0 errors, 0 warnings\n"
"0 errors, 0 warnings\n"
"                              2\n"
"                           %%e        %m_e\n"
"(%o3)                [--------------, ----]\n"
"                      %c %e_0 %h_bar  %m_P\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""

# ezunits.texi
msgid ""
"@c NEED TO FILL IN !!\n"
"@anchor{natural_unit}\n"
"@deffn {Function} natural_unit (@var{expr}, [@var{v_1}, ..., @var{v_n}])\n"
msgstr ""

# ezunits.texi
msgid ""
"Finds exponents @var{e_1}, ..., @var{e_n} such that\n"
"@code{dimension(@var{expr}) = dimension(@var{v_1}^@var{e_1} ... @var{v_n}^@var{e_n})}.\n"
msgstr ""

# ezunits.texi
msgid ""
"@code{load(ezunits)} loads this function.\n"
msgstr ""

# ezunits.texi
msgid ""
"Examples:\n"
msgstr ""

# ezunits.texi
msgid ""
"@c ===beg===\n"
"@c ===end===\n"
"@example\n"
"@end example\n"
msgstr ""

# ezunits.texi
msgid ""
"@opencatbox\n"
"@category{Package ezunits}\n"
"@closecatbox\n"
msgstr ""

# ezunits.texi
msgid ""
"@end deffn\n"
msgstr ""
