@c Language: Brazilian Portuguese, Encoding: iso-8859-1
@c /Miscellaneous.texi/1.23/Fri Jun  8 01:15:42 2007/-ko/
@menu
* Introdução a Opções Diversas::  
* Compartilhado::                       
* Funções e Variáveis Definidas para Opções Diversas::  
@end menu

@node Introdução a Opções Diversas, Compartilhado, Opções Diversas, Opções Diversas
@section Introdução a Opções Diversas

Nessa seção várias opções são tratadas pelo fato de possuirem um efeito global
sobre a operação do Maxima.   Também várias listas tais como a lista de todas as
funções definidas pelo usuário, são discutidas.

@node Compartilhado, Funções e Variáveis Definidas para Opções Diversas, Introdução a Opções Diversas, Opções Diversas
@section Compartilhado
O diretório "share" do Maxima contém programas e outros arquivos 
de interesse para os usuários do Maxima, mas que não são parte da implementação do núcleo do Maxima.
Esses programas são tipicamente chamados via @code{load} ou @code{setup_autoload}.

@code{:lisp *maxima-sharedir*} mostra a localização do diretório compartilhado
dentro do sistema de arquivos do usuário.

@c FIXME FIXME FIXME -- WE REALLY NEED AN UP-TO-DATE LIST OF SHARE PACKAGES !!
@code{printfile ("share.usg")} imprime uma lista de pacotes desatualizados dos pacotes compartilhados.
Usuários podem encontrar isso de forma mais detalhada navegando no diretório compartilhado usando um navegador de sistema de arquivo.


@node Funções e Variáveis Definidas para Opções Diversas,  , Compartilhado, Opções Diversas
@section Funções e Variáveis Definidas para Opções Diversas

@anchor{genindex}
@defvr {Variável de opção} genindex
Valor padrão: @code{i}

@code{genindex} é o prefixo usado para gerar a
próxima variável do somatório quando necessário.

@end defvr

@anchor{gensumnum}
@defvr {Variável de opção} gensumnum
Valor padrão: 0

@code{gensumnum} é o sufixo numérico usado para gerar variável seguinte
do somatório.  Se isso for escolhido para @code{false} então o índice  consistirá somente
de @code{genindex} com um sufixo numérico.

@end defvr

@anchor{integerp}
@deffn {Função} integerp (@var{expr})
Retorna @code{true} se @var{expr} é um inteiro numérico literal, de outra forma retorna @code{false}.

@code{integerp} retorna @code{false} se seu argumento for um símbolo,
mesmo se o argumento for declarado inteiro.

Exemplos:

@example
(%i1) integerp (0);
(%o1)                         true
(%i2) integerp (1);
(%o2)                         true
(%i3) integerp (-17);
(%o3)                         true
(%i4) integerp (0.0);
(%o4)                         false
(%i5) integerp (1.0);
(%o5)                         false
(%i6) integerp (%pi);
(%o6)                         false
(%i7) integerp (n);
(%o7)                         false
(%i8) declare (n, integer);
(%o8)                         done
(%i9) integerp (n);
(%o9)                         false
@end example

@end deffn

@anchor{m1pbranch}
@defvr {Variável de opção} m1pbranch
Valor padrão: @code{false}

@code{m1pbranch} é principal descendente de @code{-1} a um expoente.
Quantidades tais como @code{(-1)^(1/3)} (isto é, um expoente racional "ímpar") e 
@code{(-1)^(1/4)} (isto é, um expoente racional "par") são manuseados como segue:

@c REDRAW THIS AS A TABLE
@example
              domain:real
                            
(-1)^(1/3):      -1         
(-1)^(1/4):   (-1)^(1/4)   

             domain:complex              
m1pbranch:false          m1pbranch:true
(-1)^(1/3)               1/2+%i*sqrt(3)/2
(-1)^(1/4)              sqrt(2)/2+%i*sqrt(2)/2
@end example

@end defvr

@anchor{numberp}
@deffn {Função} numberp (@var{expr})
Retorna @code{true} se @var{expr} for um inteiro literal, número racional, 
número em ponto flutuante, ou um grande número em ponto flutuante, de outra forma retorna @code{false}.

@code{numberp} retorna @code{false} se seu argumento for um símbolo,
mesmo se o argumento for um número simbólico tal como @code{%pi} ou @code{%i},
ou declarado ser 
@code{even}, @code{odd}, @code{integer}, @code{rational}, @code{irrational}, 
@code{real}, @code{imaginary}, or @code{complex}. Nota de Tradução: par, ímpar, inteiro, racional, irracional, real, imaginário, ou complexo.

Exemplos:

@example
(%i1) numberp (42);
(%o1)                         true
(%i2) numberp (-13/19);
(%o2)                         true
(%i3) numberp (3.14159);
(%o3)                         true
(%i4) numberp (-1729b-4);
(%o4)                         true
(%i5) map (numberp, [%e, %pi, %i, %phi, inf, minf]);
(%o5)      [false, false, false, false, false, false]
(%i6) declare (a, even, b, odd, c, integer, d, rational,
     e, irrational, f, real, g, imaginary, h, complex);
(%o6)                         done
(%i7) map (numberp, [a, b, c, d, e, f, g, h]);
(%o7) [false, false, false, false, false, false, false, false]
@end example

@end deffn

@c NEEDS EXAMPLES
@anchor{remvalue}
@deffn {Função} remvalue (@var{nome_1}, ..., @var{nome_n})
@deffnx {Função} remvalue (all)
Remove os valores de Variáveis de usuário @var{nome_1}, ..., @var{nome_n}
(que podem ser subscritas) do sistema.

@code{remvalue (all)} remove os valores de todas as variáveis em @code{values},
a lista de todas as variáveis nomeadas através do usuário
(em oposição a essas que são automaticamente atribuídas através do Maxima).

Veja também @code{values}.

@end deffn

@c NEEDS EXAMPLES
@anchor{rncombine}
@deffn {Função} rncombine (@var{expr})
Transforma @var{expr} combinando todos os termos de @var{expr} que possuem
denominadores idênticos ou denominadores que diferem de cada um dos outros apenas por
fatores numéricos somente.  Isso é ligeiramente diferente do comportamento de
de @code{combine}, que coleta termos que possuem denominadores idênticos.

Escolhendo @code{pfeformat: true} e usando @code{combine} retorna resultados similares
a esses que podem ser obtidos com @code{rncombine}, mas @code{rncombine} pega o
passo adicional de multiplicar cruzado fatores numérios do denominador.
Esses resultados em forma ideal, e a possibilidade de reconhecer alguns
cancelamentos.

Para usar essa função escreva primeiramente @code{load("rncomb")}.
@end deffn

@anchor{setup_autoload}
@deffn {Função} setup_autoload (@var{nomearquivo}, @var{função_1}, ..., @var{função_n})
Especifica que
se qualquer entre @var{função_1}, ..., @var{função_n} for referenciado e não ainda definido,
@var{nomedeqrquivo} é chamado via @code{load}.
@var{nomearquivo} usualmente contém definições para as funções especificadas,
embora isso não seja obrigatório.

@code{setup_autoload} não trabalha para funções array.

@code{setup_autoload} não avalia seus argumentos.

Exemplo:

@c EXAMPLE GENERATED FROM FOLLOWING INPUT
@c legendre_p (1, %pi);
@c setup_autoload ("specfun.mac", legendre_p, ultraspherical);
@c ultraspherical (2, 1/2, %pi);
@c legendre_p (1, %pi);
@c legendre_q (1, %pi);
@example
(%i1) legendre_p (1, %pi);
(%o1)                  legendre_p(1, %pi)
(%i2) setup_autoload ("specfun.mac", legendre_p, ultraspherical);
(%o2)                         done
(%i3) ultraspherical (2, 1/2, %pi);
Warning - you are redefining the Macsyma função ultraspherical
Warning - you are redefining the Macsyma função legendre_p
                            2
                 3 (%pi - 1)
(%o3)            ------------ + 3 (%pi - 1) + 1
                      2
(%i4) legendre_p (1, %pi);
(%o4)                          %pi
(%i5) legendre_q (1, %pi);
                              %pi + 1
                      %pi log(-------)
                              1 - %pi
(%o5)                 ---------------- - 1
                             2
@end example

@end deffn

