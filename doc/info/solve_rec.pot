# SOME DESCRIPTIVE TITLE.">
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-06 22:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF8\n"
"Content-Transfer-Encoding: 8bit\n"
 
# solve_rec.texi
msgid ""
"@menu\n"
"* Introduction to solve_rec::\n"
"* Functions and Variables for solve_rec::\n"
"@end menu\n"
msgstr ""

# solve_rec.texi
msgid ""
"@node Introduction to solve_rec, Functions and Variables for solve_rec, solve_rec-pkg, solve_rec-pkg\n"
"@section Introduction to solve_rec\n"
msgstr ""

# solve_rec.texi
msgid ""
"@code{solve_rec} is a package for solving linear recurrences with polynomial\n"
"coefficients.\n"
msgstr ""

# solve_rec.texi
msgid ""
"A demo is available with @code{demo(solve_rec);}.\n"
msgstr ""

# solve_rec.texi
msgid ""
"Example:\n"
msgstr ""

# solve_rec.texi
msgid ""
"@example\n"
"(%i1) load(\"solve_rec\")$\n"
"@group\n"
"(%i2) solve_rec((n+4)*s[n+2] + s[n+1] - (n+1)*s[n], s[n]);\n"
"                                    n\n"
"                 %k  (2 n + 3) (- 1)          %k\n"
"                   1                            2\n"
"(%o2)       s  = -------------------- + ---------------\n"
"             n     (n + 1) (n + 2)      (n + 1) (n + 2)\n"
"@end group\n"
"@end example\n"
msgstr ""

# solve_rec.texi
msgid ""
"@opencatbox\n"
"@category{Linear recurrences} @category{Share packages} @category{Package solve_rec}\n"
"@closecatbox\n"
msgstr ""

# solve_rec.texi
msgid ""
"@node Functions and Variables for solve_rec,  , Introduction to solve_rec, solve_rec-pkg\n"
"@section Functions and Variables for solve_rec\n"
msgstr ""

# solve_rec.texi
msgid ""
"@anchor{reduce_order}\n"
"@deffn {Function} reduce_order (@var{rec}, @var{sol}, @var{var})\n"
msgstr ""

# solve_rec.texi
msgid ""
"Reduces the order of linear recurrence @var{rec} when a particular solution\n"
"@var{sol} is known. The reduced reccurence can be used to get other solutions.\n"
msgstr ""

# solve_rec.texi
msgid ""
"Example:\n"
msgstr ""

# solve_rec.texi
msgid ""
"@example\n"
"@group\n"
"(%i3) rec: x[n+2] = x[n+1] + x[n]/n;\n"
"                                      x\n"
"                                       n\n"
"(%o3)               x      = x      + --\n"
"                     n + 2    n + 1   n\n"
"@end group\n"
"@group\n"
"(%i4) solve_rec(rec, x[n]);\n"
"WARNING: found some hypergeometrical solutions! \n"
"(%o4)                    x  = %k  n\n"
"                          n     1\n"
"@end group\n"
"@group\n"
"(%i5) reduce_order(rec, n, x[n]);\n"
"(%t5)                    x  = n %z\n"
"                          n       n\n"
msgstr ""

# solve_rec.texi
msgid ""
"                           n - 1\n"
"                           ====\n"
"                           \\n"
"(%t6)                %z  =  >     %u\n"
"                       n   /        %j\n"
"                           ====\n"
"                           %j = 0\n"
msgstr ""

# solve_rec.texi
msgid ""
"(%o6)             (- n - 2) %u     - %u\n"
"                              n + 1     n\n"
"@end group\n"
"@group\n"
"(%i6) solve_rec((n+2)*%u[n+1] + %u[n], %u[n]);\n"
"                                     n\n"
"                            %k  (- 1)\n"
"                              1\n"
"(%o6)                 %u  = ----------\n"
"                        n    (n + 1)!\n"
msgstr ""

# solve_rec.texi
msgid ""
"So the general solution is\n"
msgstr ""

# solve_rec.texi
msgid ""
"             n - 1\n"
"             ====        j\n"
"             \      (- 1)\n"
"       %k  n  >    -------- + %k  n\n"
"         2   /     (j + 1)!     1\n"
"             ====\n"
"             j = 0\n"
"@end group\n"
"@end example\n"
msgstr ""

# solve_rec.texi
msgid ""
"@opencatbox\n"
"@category{Package solve_rec}\n"
"@closecatbox\n"
msgstr ""

# solve_rec.texi
msgid ""
"@end deffn\n"
msgstr ""

# solve_rec.texi
msgid ""
"@anchor{simplify_products}\n"
"@defvr {Option variable} simplify_products\n"
"Default value: @code{true}\n"
msgstr ""

# solve_rec.texi
msgid ""
"If @code{simplify_products} is @code{true}, @code{solve_rec} will try to\n"
"simplify products in result.\n"
msgstr ""

# solve_rec.texi
msgid ""
"See also: @mrefdot{solve_rec}\n"
msgstr ""

# solve_rec.texi
msgid ""
"@opencatbox\n"
"@category{Package solve_rec}\n"
"@closecatbox\n"
msgstr ""

# solve_rec.texi
msgid ""
"@end defvr\n"
msgstr ""

# solve_rec.texi
msgid ""
"@anchor{simplify_sum}\n"
"@deffn {Function} simplify_sum (@var{expr})\n"
msgstr ""

# solve_rec.texi
msgid ""
"Tries to simplify all sums appearing in @var{expr} to a closed form.\n"
msgstr ""

# solve_rec.texi
msgid ""
"To use this function first load the @code{simplify_sum} package with\n"
"@code{load(simplify_sum)}.\n"
msgstr ""

# solve_rec.texi
msgid ""
"Example:\n"
msgstr ""

# solve_rec.texi
msgid ""
"@c ===beg===\n"
"@c load(\"simplify_sum\")$\n"
"@c sum(binomial(n+k,k)/2^k, k, 1, n) + sum(binomial(2*n, 2*k), k, 1,n);\n"
"@c simplify_sum(%);\n"
"@c ===end===\n"
"@example\n"
"(%i1) load(\"simplify_sum\")$\n"
"@group\n"
"(%i2) sum(binomial(n+k,k)/2^k,k,1,n)+sum(binomial(2*n,2*k),k,1,n);\n"
"        n                          n\n"
"       ====                       ====\n"
"       \     binomial(n + k, k)   \\n"
"(%o2)   >    ------------------ +  >    binomial(2 n, 2 k)\n"
"       /              k           /\n"
"       ====          2            ====\n"
"       k = 1                      k = 1\n"
"@end group\n"
"@group\n"
"(%i3) simplify_sum(%);\n"
msgstr ""

# solve_rec.texi
msgid ""
"                         2 n - 1    n\n"
"(%o3)                   2        + 2  - 2\n"
"@end group\n"
"@end example\n"
msgstr ""

# solve_rec.texi
msgid ""
"@opencatbox\n"
"@category{Package solve_rec} @category{Sums and products} @category{Simplification functions}\n"
"@closecatbox\n"
msgstr ""

# solve_rec.texi
msgid ""
"@end deffn\n"
msgstr ""

# solve_rec.texi
msgid ""
"@anchor{solve_rec}\n"
"@deffn {Function} solve_rec (@var{eqn}, @var{var}, [@var{init}])\n"
"Solves for hypergeometrical solutions to linear recurrence @var{eqn} with\n"
"polynomials coefficient in variable @var{var}. Optional arguments @var{init}\n"
"are initial conditions.\n"
msgstr ""

# solve_rec.texi
msgid ""
"@code{solve_rec} can solve linear recurrences with constant coefficients,\n"
"finds hypergeometrical solutions to homogeneous linear recurrences with\n"
"polynomial coefficients, rational solutions to linear recurrences with\n"
"polynomial coefficients and can solve Ricatti type recurrences.\n"
msgstr ""

# solve_rec.texi
msgid ""
"Note that the running time of the algorithm used to find hypergeometrical\n"
"solutions is exponential in the degree of the leading and trailing\n"
"coefficient.\n"
msgstr ""

# solve_rec.texi
msgid ""
"To use this function first load the @code{solve_rec} package with\n"
"@code{load(solve_rec);}.\n"
msgstr ""

# solve_rec.texi
msgid ""
"Example of linear recurrence with constant coefficients:\n"
msgstr ""

# solve_rec.texi
msgid ""
"@example\n"
"@group\n"
"(%i2) solve_rec(a[n]=a[n-1]+a[n-2]+n/2^n, a[n]);\n"
"                        n          n\n"
"           (sqrt(5) - 1)  %k  (- 1)\n"
"                            1           n\n"
"(%o2) a  = ------------------------- - ----\n"
"       n               n                  n\n"
"                      2                5 2\n"
"                                                n\n"
"                                   (sqrt(5) + 1)  %k\n"
"                                                    2    2\n"
"                                 + ------------------ - ----\n"
"                                            n              n\n"
"                                           2            5 2\n"
"@end group\n"
"@end example\n"
msgstr ""

# solve_rec.texi
msgid ""
"Example of linear recurrence with polynomial coefficients:\n"
msgstr ""

# solve_rec.texi
msgid ""
"@example\n"
"@group\n"
"(%i7) 2*x*(x+1)*y[x] - (x^2+3*x-2)*y[x+1] + (x-1)*y[x+2];\n"
"                         2\n"
"(%o7) (x - 1) y      - (x  + 3 x - 2) y      + 2 x (x + 1) y\n"
"               x + 2                   x + 1                x\n"
"@end group\n"
"@group\n"
"(%i8) solve_rec(%, y[x], y[1]=1, y[3]=3);\n"
"                              x\n"
"                           3 2    x!\n"
"(%o9)                 y  = ---- - --\n"
"                       x    4     2\n"
"@end group\n"
"@end example\n"
msgstr ""

# solve_rec.texi
msgid ""
"Example of Ricatti type recurrence:\n"
msgstr ""

# solve_rec.texi
msgid ""
"@example\n"
"@group\n"
"(%i2) x*y[x+1]*y[x] - y[x+1]/(x+2) + y[x]/(x-1) = 0;\n"
"                            y         y\n"
"                             x + 1     x\n"
"(%o2)         x y  y      - ------ + ----- = 0\n"
"                 x  x + 1   x + 2    x - 1\n"
"@end group\n"
"(%i3) solve_rec(%, y[x], y[3]=5)$\n"
"@group\n"
"(%i4) ratsimp(minfactorial(factcomb(%)));\n"
"                                   3\n"
"                               30 x  - 30 x\n"
"(%o4) y  = - -------------------------------------------------\n"
"       x        6      5       4       3       2\n"
"             5 x  - 3 x  - 25 x  + 15 x  + 20 x  - 12 x - 1584\n"
"@end group\n"
"@end example\n"
"See also: @mrefcomma{solve_rec_rat} @mref{simplify_products} and @mrefdot{product_use_gamma}\n"
msgstr ""

# solve_rec.texi
msgid ""
"@opencatbox\n"
"@category{Package solve_rec}\n"
"@closecatbox\n"
msgstr ""

# solve_rec.texi
msgid ""
"@end deffn\n"
msgstr ""

# solve_rec.texi
msgid ""
"@anchor{solve_rec_rat}\n"
"@deffn {Function} solve_rec_rat (@var{eqn}, @var{var}, [@var{init}])\n"
msgstr ""

# solve_rec.texi
msgid ""
"Solves for rational solutions to linear recurrences. See solve_rec for\n"
"description of arguments.\n"
msgstr ""

# solve_rec.texi
msgid ""
"To use this function first load the @code{solve_rec} package with\n"
"@code{load(solve_rec);}.\n"
msgstr ""

# solve_rec.texi
msgid ""
"Example:\n"
msgstr ""

# solve_rec.texi
msgid ""
"@example\n"
"@group\n"
"(%i1) (x+4)*a[x+3] + (x+3)*a[x+2] - x*a[x+1] + (x^2-1)*a[x];\n"
"(%o1)  (x + 4) a      + (x + 3) a      - x a\n"
"                x + 3            x + 2      x + 1\n"
"                                                   2\n"
"                                               + (x  - 1) a\n"
"                                                            x\n"
"@end group\n"
"@group\n"
"(%i2) solve_rec_rat(% = (x+2)/(x+1), a[x]);\n"
"                       1\n"
"(%o2)      a  = ---------------\n"
"            x   (x - 1) (x + 1)\n"
"@end group\n"
"@end example\n"
"See also: @mrefdot{solve_rec}\n"
msgstr ""

# solve_rec.texi
msgid ""
"@opencatbox\n"
"@category{Package solve_rec}\n"
"@closecatbox\n"
msgstr ""

# solve_rec.texi
msgid ""
"@end deffn\n"
msgstr ""

# solve_rec.texi
msgid ""
"@anchor{product_use_gamma}\n"
"@defvr {Option variable} product_use_gamma\n"
"Default value: @code{true}\n"
msgstr ""

# solve_rec.texi
msgid ""
"When simplifying products, @code{solve_rec} introduces gamma function\n"
"into the expression if @code{product_use_gamma} is @code{true}.\n"
msgstr ""

# solve_rec.texi
msgid ""
"See also: @mrefcomma{simplify_products} @mrefdot{solve_rec}\n"
msgstr ""

# solve_rec.texi
msgid ""
"@opencatbox\n"
"@category{Package solve_rec}\n"
"@closecatbox\n"
msgstr ""

# solve_rec.texi
msgid ""
"@end defvr\n"
msgstr ""

# solve_rec.texi
msgid ""
"@anchor{summand_to_rec}\n"
"@deffn {Function} summand_to_rec @\n"
"@fname{summand_to_rec} (@var{summand}, @var{k}, @var{n}) @\n"
"@fname{summand_to_rec} (@var{summand}, [@var{k}, @var{lo}, @var{hi}], @var{n})\n"
msgstr ""

# solve_rec.texi
msgid ""
"Returns the recurrence sattisfied by the sum\n"
msgstr ""

# solve_rec.texi
msgid ""
"@example\n"
"@group\n"
"     hi\n"
"    ====\n"
"    \\n"
"     >     summand\n"
"    /\n"
"    ====\n"
"  k = lo\n"
"@end group\n"
"@end example\n"
msgstr ""

# solve_rec.texi
msgid ""
"where summand is hypergeometrical in @var{k} and @var{n}. If @var{lo} and @var{hi}\n"
"are omitted, they are assumed to be @code{lo = -inf} and @code{hi = inf}.\n"
msgstr ""

# solve_rec.texi
msgid ""
"To use this function first load the @code{simplify_sum} package with\n"
"@code{load(simplify_sum)}.\n"
msgstr ""

# solve_rec.texi
msgid ""
"Example:\n"
msgstr ""

# solve_rec.texi
msgid ""
"@example\n"
"(%i1) load(\"simplify_sum\")$\n"
"@group\n"
"(%i2) summand: binom(n,k);\n"
"(%o2)                           binomial(n, k)\n"
"@end group\n"
"@group\n"
"(%i3) summand_to_rec(summand,k,n);\n"
"(%o3)                      2 sm  - sm      = 0\n"
"                               n     n + 1\n"
"@end group\n"
"@group\n"
"(%i7) summand: binom(n, k)/(k+1);\n"
"                                binomial(n, k)\n"
"(%o7)                           --------------\n"
"                                    k + 1\n"
"@end group\n"
"@group\n"
"(%i8) summand_to_rec(summand, [k, 0, n], n);\n"
"(%o8)               2 (n + 1) sm  - (n + 2) sm      = - 1\n"
"                                n             n + 1\n"
"@end group\n"
"@end example\n"
msgstr ""

# solve_rec.texi
msgid ""
"@opencatbox\n"
"@category{Package solve_rec}\n"
"@closecatbox\n"
msgstr ""

# solve_rec.texi
msgid ""
"@end deffn\n"
msgstr ""
